
L01_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008308  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  080084d8  080084d8  000094d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089ec  080089ec  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  080089ec  080089ec  000099ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089f4  080089f4  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089f4  080089f4  000099f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089f8  080089f8  000099f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080089fc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  200001d8  08008bd4  0000a1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000628  08008bd4  0000a628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106bb  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002915  00000000  00000000  0001a8c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  0001d1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000099e  00000000  00000000  0001de80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000276b9  00000000  00000000  0001e81e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122cb  00000000  00000000  00045ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea04e  00000000  00000000  000581a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001421f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043a4  00000000  00000000  00142234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  001465d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080084c0 	.word	0x080084c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	080084c0 	.word	0x080084c0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <BH1750_Init>:
#include <stdio.h>
#include <string.h>
#include "usart.h"  // For UART debug output

uint8_t BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af02      	add	r7, sp, #8
 8000f1a:	6078      	str	r0, [r7, #4]
    uint8_t cmd;

    // Power on
    cmd = BH1750_POWER_ON;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Master_Transmit(hi2c, BH1750_I2C_ADDR, &cmd, 1, HAL_MAX_DELAY) != HAL_OK)
 8000f20:	f107 020f 	add.w	r2, r7, #15
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	2146      	movs	r1, #70	@ 0x46
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f001 fd7e 	bl	8002a30 <HAL_I2C_Master_Transmit>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <BH1750_Init+0x2a>
        return 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e02b      	b.n	8000f96 <BH1750_Init+0x82>

    HAL_Delay(10);  // Delay between commands
 8000f3e:	200a      	movs	r0, #10
 8000f40:	f001 f9c6 	bl	80022d0 <HAL_Delay>

    // Reset
    cmd = BH1750_RESET;
 8000f44:	2307      	movs	r3, #7
 8000f46:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Master_Transmit(hi2c, BH1750_I2C_ADDR, &cmd, 1, HAL_MAX_DELAY) != HAL_OK)
 8000f48:	f107 020f 	add.w	r2, r7, #15
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	2301      	movs	r3, #1
 8000f54:	2146      	movs	r1, #70	@ 0x46
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f001 fd6a 	bl	8002a30 <HAL_I2C_Master_Transmit>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <BH1750_Init+0x52>
        return 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e017      	b.n	8000f96 <BH1750_Init+0x82>

    HAL_Delay(10);  // Give reset time to settle
 8000f66:	200a      	movs	r0, #10
 8000f68:	f001 f9b2 	bl	80022d0 <HAL_Delay>

    // Continuous High Resolution Mode (1 lx resolution)
    cmd = BH1750_CONT_HIGH_RES;
 8000f6c:	2310      	movs	r3, #16
 8000f6e:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Master_Transmit(hi2c, BH1750_I2C_ADDR, &cmd, 1, HAL_MAX_DELAY) != HAL_OK)
 8000f70:	f107 020f 	add.w	r2, r7, #15
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	2146      	movs	r1, #70	@ 0x46
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f001 fd56 	bl	8002a30 <HAL_I2C_Master_Transmit>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <BH1750_Init+0x7a>
        return 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e003      	b.n	8000f96 <BH1750_Init+0x82>

    HAL_Delay(200);  // Allow time for first measurement to complete
 8000f8e:	20c8      	movs	r0, #200	@ 0xc8
 8000f90:	f001 f99e 	bl	80022d0 <HAL_Delay>

    return 1;  // Initialization successful
 8000f94:	2301      	movs	r3, #1
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <BH1750_ReadLux>:

uint16_t BH1750_ReadLux(I2C_HandleTypeDef *hi2c)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b096      	sub	sp, #88	@ 0x58
 8000fa4:	af02      	add	r7, sp, #8
 8000fa6:	6078      	str	r0, [r7, #4]
    uint8_t data[2] = {0};
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if (HAL_I2C_Master_Receive(hi2c, BH1750_I2C_ADDR, data, 2, HAL_MAX_DELAY) != HAL_OK)
 8000fae:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2302      	movs	r3, #2
 8000fba:	2146      	movs	r1, #70	@ 0x46
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f001 fe2b 	bl	8002c18 <HAL_I2C_Master_Receive>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d002      	beq.n	8000fce <BH1750_ReadLux+0x2e>
        return 0xFFFF;
 8000fc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fcc:	e022      	b.n	8001014 <BH1750_ReadLux+0x74>

    // Optional debug output
    char buf[64];
    sprintf(buf, "BH1750 Raw: %02X %02X\r\n", data[0], data[1]);
 8000fce:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000fd8:	f107 000c 	add.w	r0, r7, #12
 8000fdc:	490f      	ldr	r1, [pc, #60]	@ (800101c <BH1750_ReadLux+0x7c>)
 8000fde:	f005 f92f 	bl	8006240 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff f962 	bl	80002b0 <strlen>
 8000fec:	4603      	mov	r3, r0
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	f107 010c 	add.w	r1, r7, #12
 8000ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff8:	4809      	ldr	r0, [pc, #36]	@ (8001020 <BH1750_ReadLux+0x80>)
 8000ffa:	f003 ff4d 	bl	8004e98 <HAL_UART_Transmit>

    return ((uint16_t)data[0] << 8) | data[1];  // Combine MSB + LSB
 8000ffe:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001002:	b21b      	sxth	r3, r3
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	b21a      	sxth	r2, r3
 8001008:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b21b      	sxth	r3, r3
 8001012:	b29b      	uxth	r3, r3
}
 8001014:	4618      	mov	r0, r3
 8001016:	3750      	adds	r7, #80	@ 0x50
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	080084d8 	.word	0x080084d8
 8001020:	20000450 	.word	0x20000450

08001024 <INA219_CheckDevice>:

extern I2C_HandleTypeDef hi2c1;

/* ✅ Check if INA219 is responding */
uint8_t INA219_CheckDevice(uint8_t devAddr)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
    return (HAL_I2C_IsDeviceReady(&hi2c1, devAddr, 3, HAL_MAX_DELAY) == HAL_OK);
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	b299      	uxth	r1, r3
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	2203      	movs	r2, #3
 8001038:	4806      	ldr	r0, [pc, #24]	@ (8001054 <INA219_CheckDevice+0x30>)
 800103a:	f002 f911 	bl	8003260 <HAL_I2C_IsDeviceReady>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	bf0c      	ite	eq
 8001044:	2301      	moveq	r3, #1
 8001046:	2300      	movne	r3, #0
 8001048:	b2db      	uxtb	r3, r3
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200001f4 	.word	0x200001f4

08001058 <INA219_WriteRegister>:

/* ✅ Write to INA219 register */
void INA219_WriteRegister(uint8_t devAddr, uint8_t reg, uint16_t value)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af04      	add	r7, sp, #16
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	460b      	mov	r3, r1
 8001064:	71bb      	strb	r3, [r7, #6]
 8001066:	4613      	mov	r3, r2
 8001068:	80bb      	strh	r3, [r7, #4]
    uint8_t data[2] = { (value >> 8) & 0xFF, value & 0xFF };
 800106a:	88bb      	ldrh	r3, [r7, #4]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	b29b      	uxth	r3, r3
 8001070:	b2db      	uxtb	r3, r3
 8001072:	733b      	strb	r3, [r7, #12]
 8001074:	88bb      	ldrh	r3, [r7, #4]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Mem_Write(&hi2c1, devAddr, reg, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	b299      	uxth	r1, r3
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	b29a      	uxth	r2, r3
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	9302      	str	r3, [sp, #8]
 8001088:	2302      	movs	r3, #2
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2301      	movs	r3, #1
 8001094:	4803      	ldr	r0, [pc, #12]	@ (80010a4 <INA219_WriteRegister+0x4c>)
 8001096:	f001 feb5 	bl	8002e04 <HAL_I2C_Mem_Write>
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200001f4 	.word	0x200001f4

080010a8 <INA219_ReadRegister>:

/* ✅ Read from INA219 register */
uint16_t INA219_ReadRegister(uint8_t devAddr, uint8_t reg)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af04      	add	r7, sp, #16
 80010ae:	4603      	mov	r3, r0
 80010b0:	460a      	mov	r2, r1
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	4613      	mov	r3, r2
 80010b6:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2] = {0};
 80010b8:	2300      	movs	r3, #0
 80010ba:	81bb      	strh	r3, [r7, #12]
    if (HAL_I2C_Mem_Read(&hi2c1, devAddr, reg, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY) != HAL_OK)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	b299      	uxth	r1, r3
 80010c0:	79bb      	ldrb	r3, [r7, #6]
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	9302      	str	r3, [sp, #8]
 80010ca:	2302      	movs	r3, #2
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2301      	movs	r3, #1
 80010d6:	480b      	ldr	r0, [pc, #44]	@ (8001104 <INA219_ReadRegister+0x5c>)
 80010d8:	f001 ffa8 	bl	800302c <HAL_I2C_Mem_Read>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d002      	beq.n	80010e8 <INA219_ReadRegister+0x40>
        return 0xFFFF;
 80010e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010e6:	e008      	b.n	80010fa <INA219_ReadRegister+0x52>
    return (data[0] << 8) | data[1];
 80010e8:	7b3b      	ldrb	r3, [r7, #12]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	7b7b      	ldrb	r3, [r7, #13]
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	b29b      	uxth	r3, r3
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200001f4 	.word	0x200001f4

08001108 <INA219_Init>:

/* ✅ Initialize INA219 with updated config and calibration */
void INA219_Init(uint8_t devAddr)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
    uint16_t config = 0x019F; // 32V, 320mV, 12-bit ADC, continuous
 8001112:	f240 139f 	movw	r3, #415	@ 0x19f
 8001116:	81fb      	strh	r3, [r7, #14]
    INA219_WriteRegister(devAddr, INA219_REG_CONFIG, config);
 8001118:	89fa      	ldrh	r2, [r7, #14]
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff9a 	bl	8001058 <INA219_WriteRegister>

    uint16_t calibration = 20480; // For 0.01Ω shunt and 0.2mA/bit
 8001124:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001128:	81bb      	strh	r3, [r7, #12]
    INA219_WriteRegister(devAddr, INA219_REG_CALIBRATION, calibration);
 800112a:	89ba      	ldrh	r2, [r7, #12]
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	2105      	movs	r1, #5
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff91 	bl	8001058 <INA219_WriteRegister>
}
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <INA219_GetBusVoltage>:

/* ✅ Bus Voltage in V */
float INA219_GetBusVoltage(uint8_t devAddr)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
    uint16_t raw = INA219_ReadRegister(devAddr, INA219_REG_BUSVOLTAGE);
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2102      	movs	r1, #2
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ffaa 	bl	80010a8 <INA219_ReadRegister>
 8001154:	4603      	mov	r3, r0
 8001156:	81fb      	strh	r3, [r7, #14]
    if (raw == 0xFFFF) return NAN;
 8001158:	89fb      	ldrh	r3, [r7, #14]
 800115a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800115e:	4293      	cmp	r3, r2
 8001160:	d102      	bne.n	8001168 <INA219_GetBusVoltage+0x28>
 8001162:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800118c <INA219_GetBusVoltage+0x4c>
 8001166:	e00b      	b.n	8001180 <INA219_GetBusVoltage+0x40>
    raw >>= 3;  // Remove OVF and CNVR bits
 8001168:	89fb      	ldrh	r3, [r7, #14]
 800116a:	08db      	lsrs	r3, r3, #3
 800116c:	81fb      	strh	r3, [r7, #14]
    return raw * 0.004f;
 800116e:	89fb      	ldrh	r3, [r7, #14]
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001178:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001190 <INA219_GetBusVoltage+0x50>
 800117c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001180:	eeb0 0a67 	vmov.f32	s0, s15
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	7fc00000 	.word	0x7fc00000
 8001190:	3b83126f 	.word	0x3b83126f

08001194 <INA219_GetCurrent>:
    return raw * 0.01f;
}

/* ✅ Current in mA (0.2mA per bit) */
float INA219_GetCurrent(uint8_t devAddr)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
    int16_t raw = INA219_ReadRegister(devAddr, INA219_REG_CURRENT);
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2104      	movs	r1, #4
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ff80 	bl	80010a8 <INA219_ReadRegister>
 80011a8:	4603      	mov	r3, r0
 80011aa:	81fb      	strh	r3, [r7, #14]
    if (raw == 0xFFFF) return NAN;
    return raw * 0.2f;
 80011ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011b0:	ee07 3a90 	vmov	s15, r3
 80011b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b8:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 80011cc <INA219_GetCurrent+0x38>
 80011bc:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80011c0:	eeb0 0a67 	vmov.f32	s0, s15
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	3e4ccccd 	.word	0x3e4ccccd

080011d0 <INA219_GetPower>:

/* ✅ Power in mW (4mW per bit) */
float INA219_GetPower(uint8_t devAddr)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
    int16_t raw = INA219_ReadRegister(devAddr, INA219_REG_POWER);
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2103      	movs	r1, #3
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ff62 	bl	80010a8 <INA219_ReadRegister>
 80011e4:	4603      	mov	r3, r0
 80011e6:	81fb      	strh	r3, [r7, #14]
    if (raw == 0xFFFF) return NAN;
    return raw * 4.0f;
 80011e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f4:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80011f8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80011fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08e      	sub	sp, #56	@ 0x38
 800120c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	4ba0      	ldr	r3, [pc, #640]	@ (80014a0 <MX_GPIO_Init+0x298>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a9f      	ldr	r2, [pc, #636]	@ (80014a0 <MX_GPIO_Init+0x298>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b9d      	ldr	r3, [pc, #628]	@ (80014a0 <MX_GPIO_Init+0x298>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	623b      	str	r3, [r7, #32]
 8001234:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001236:	4b9a      	ldr	r3, [pc, #616]	@ (80014a0 <MX_GPIO_Init+0x298>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a99      	ldr	r2, [pc, #612]	@ (80014a0 <MX_GPIO_Init+0x298>)
 800123c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b97      	ldr	r3, [pc, #604]	@ (80014a0 <MX_GPIO_Init+0x298>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b94      	ldr	r3, [pc, #592]	@ (80014a0 <MX_GPIO_Init+0x298>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a93      	ldr	r2, [pc, #588]	@ (80014a0 <MX_GPIO_Init+0x298>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b91      	ldr	r3, [pc, #580]	@ (80014a0 <MX_GPIO_Init+0x298>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	61bb      	str	r3, [r7, #24]
 8001264:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	4b8e      	ldr	r3, [pc, #568]	@ (80014a0 <MX_GPIO_Init+0x298>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a8d      	ldr	r2, [pc, #564]	@ (80014a0 <MX_GPIO_Init+0x298>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b8b      	ldr	r3, [pc, #556]	@ (80014a0 <MX_GPIO_Init+0x298>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800127e:	4b88      	ldr	r3, [pc, #544]	@ (80014a0 <MX_GPIO_Init+0x298>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	4a87      	ldr	r2, [pc, #540]	@ (80014a0 <MX_GPIO_Init+0x298>)
 8001284:	f043 0320 	orr.w	r3, r3, #32
 8001288:	6313      	str	r3, [r2, #48]	@ 0x30
 800128a:	4b85      	ldr	r3, [pc, #532]	@ (80014a0 <MX_GPIO_Init+0x298>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	f003 0320 	and.w	r3, r3, #32
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001296:	4b82      	ldr	r3, [pc, #520]	@ (80014a0 <MX_GPIO_Init+0x298>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a81      	ldr	r2, [pc, #516]	@ (80014a0 <MX_GPIO_Init+0x298>)
 800129c:	f043 0310 	orr.w	r3, r3, #16
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b7f      	ldr	r3, [pc, #508]	@ (80014a0 <MX_GPIO_Init+0x298>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ae:	4b7c      	ldr	r3, [pc, #496]	@ (80014a0 <MX_GPIO_Init+0x298>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a7b      	ldr	r2, [pc, #492]	@ (80014a0 <MX_GPIO_Init+0x298>)
 80012b4:	f043 0308 	orr.w	r3, r3, #8
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b79      	ldr	r3, [pc, #484]	@ (80014a0 <MX_GPIO_Init+0x298>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012c6:	4b76      	ldr	r3, [pc, #472]	@ (80014a0 <MX_GPIO_Init+0x298>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a75      	ldr	r2, [pc, #468]	@ (80014a0 <MX_GPIO_Init+0x298>)
 80012cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b73      	ldr	r3, [pc, #460]	@ (80014a0 <MX_GPIO_Init+0x298>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80012e4:	486f      	ldr	r0, [pc, #444]	@ (80014a4 <MX_GPIO_Init+0x29c>)
 80012e6:	f001 fad5 	bl	8002894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012f0:	486d      	ldr	r0, [pc, #436]	@ (80014a8 <MX_GPIO_Init+0x2a0>)
 80012f2:	f001 facf 	bl	8002894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f244 2140 	movw	r1, #16960	@ 0x4240
 80012fc:	486b      	ldr	r0, [pc, #428]	@ (80014ac <MX_GPIO_Init+0x2a4>)
 80012fe:	f001 fac9 	bl	8002894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001302:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001308:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800130c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001312:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001316:	4619      	mov	r1, r3
 8001318:	4865      	ldr	r0, [pc, #404]	@ (80014b0 <MX_GPIO_Init+0x2a8>)
 800131a:	f001 f90f 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800131e:	2332      	movs	r3, #50	@ 0x32
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800132e:	230b      	movs	r3, #11
 8001330:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001332:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001336:	4619      	mov	r1, r3
 8001338:	485d      	ldr	r0, [pc, #372]	@ (80014b0 <MX_GPIO_Init+0x2a8>)
 800133a:	f001 f8ff 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800133e:	2386      	movs	r3, #134	@ 0x86
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134a:	2303      	movs	r3, #3
 800134c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800134e:	230b      	movs	r3, #11
 8001350:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001356:	4619      	mov	r1, r3
 8001358:	4856      	ldr	r0, [pc, #344]	@ (80014b4 <MX_GPIO_Init+0x2ac>)
 800135a:	f001 f8ef 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800135e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001374:	4619      	mov	r1, r3
 8001376:	484b      	ldr	r0, [pc, #300]	@ (80014a4 <MX_GPIO_Init+0x29c>)
 8001378:	f001 f8e0 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_Btn_Pin;
 800137c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001382:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001388:	2301      	movs	r3, #1
 800138a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ON_Btn_GPIO_Port, &GPIO_InitStruct);
 800138c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001390:	4619      	mov	r1, r3
 8001392:	4845      	ldr	r0, [pc, #276]	@ (80014a8 <MX_GPIO_Init+0x2a0>)
 8001394:	f001 f8d2 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD6_Pin;
 8001398:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	2301      	movs	r3, #1
 80013a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD6_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ae:	4619      	mov	r1, r3
 80013b0:	483d      	ldr	r0, [pc, #244]	@ (80014a8 <MX_GPIO_Init+0x2a0>)
 80013b2:	f001 f8c3 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OFF_Btn_Pin;
 80013b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013c2:	2302      	movs	r3, #2
 80013c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OFF_Btn_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ca:	4619      	mov	r1, r3
 80013cc:	483a      	ldr	r0, [pc, #232]	@ (80014b8 <MX_GPIO_Init+0x2b0>)
 80013ce:	f001 f8b5 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e0:	2303      	movs	r3, #3
 80013e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013e4:	230b      	movs	r3, #11
 80013e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ec:	4619      	mov	r1, r3
 80013ee:	482d      	ldr	r0, [pc, #180]	@ (80014a4 <MX_GPIO_Init+0x29c>)
 80013f0:	f001 f8a4 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin;
 80013f4:	f244 2340 	movw	r3, #16960	@ 0x4240
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fa:	2301      	movs	r3, #1
 80013fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001406:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800140a:	4619      	mov	r1, r3
 800140c:	4827      	ldr	r0, [pc, #156]	@ (80014ac <MX_GPIO_Init+0x2a4>)
 800140e:	f001 f895 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001412:	2380      	movs	r3, #128	@ 0x80
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001416:	2300      	movs	r3, #0
 8001418:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800141e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001422:	4619      	mov	r1, r3
 8001424:	4821      	ldr	r0, [pc, #132]	@ (80014ac <MX_GPIO_Init+0x2a4>)
 8001426:	f001 f889 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800142a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800143c:	230a      	movs	r3, #10
 800143e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001444:	4619      	mov	r1, r3
 8001446:	481b      	ldr	r0, [pc, #108]	@ (80014b4 <MX_GPIO_Init+0x2ac>)
 8001448:	f001 f878 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800144c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001452:	2300      	movs	r3, #0
 8001454:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800145e:	4619      	mov	r1, r3
 8001460:	4814      	ldr	r0, [pc, #80]	@ (80014b4 <MX_GPIO_Init+0x2ac>)
 8001462:	f001 f86b 	bl	800253c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001466:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800146a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001478:	230b      	movs	r3, #11
 800147a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800147c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001480:	4619      	mov	r1, r3
 8001482:	480a      	ldr	r0, [pc, #40]	@ (80014ac <MX_GPIO_Init+0x2a4>)
 8001484:	f001 f85a 	bl	800253c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	2100      	movs	r1, #0
 800148c:	2028      	movs	r0, #40	@ 0x28
 800148e:	f001 f81e 	bl	80024ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001492:	2028      	movs	r0, #40	@ 0x28
 8001494:	f001 f837 	bl	8002506 <HAL_NVIC_EnableIRQ>

}
 8001498:	bf00      	nop
 800149a:	3738      	adds	r7, #56	@ 0x38
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020400 	.word	0x40020400
 80014a8:	40021400 	.word	0x40021400
 80014ac:	40021800 	.word	0x40021800
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40020000 	.word	0x40020000
 80014b8:	40021000 	.word	0x40021000

080014bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001530 <MX_I2C1_Init+0x74>)
 80014c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001534 <MX_I2C1_Init+0x78>)
 80014c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <MX_I2C1_Init+0x74>)
 80014c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001538 <MX_I2C1_Init+0x7c>)
 80014ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014cc:	4b18      	ldr	r3, [pc, #96]	@ (8001530 <MX_I2C1_Init+0x74>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d2:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <MX_I2C1_Init+0x74>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d8:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <MX_I2C1_Init+0x74>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014de:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <MX_I2C1_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014e4:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <MX_I2C1_Init+0x74>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ea:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <MX_I2C1_Init+0x74>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001530 <MX_I2C1_Init+0x74>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014f6:	480e      	ldr	r0, [pc, #56]	@ (8001530 <MX_I2C1_Init+0x74>)
 80014f8:	f001 fa0a 	bl	8002910 <HAL_I2C_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001502:	f000 fc8d 	bl	8001e20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001506:	2100      	movs	r1, #0
 8001508:	4809      	ldr	r0, [pc, #36]	@ (8001530 <MX_I2C1_Init+0x74>)
 800150a:	f002 fac5 	bl	8003a98 <HAL_I2CEx_ConfigAnalogFilter>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001514:	f000 fc84 	bl	8001e20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001518:	2100      	movs	r1, #0
 800151a:	4805      	ldr	r0, [pc, #20]	@ (8001530 <MX_I2C1_Init+0x74>)
 800151c:	f002 fb07 	bl	8003b2e <HAL_I2CEx_ConfigDigitalFilter>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001526:	f000 fc7b 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200001f4 	.word	0x200001f4
 8001534:	40005400 	.word	0x40005400
 8001538:	20404768 	.word	0x20404768

0800153c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b0aa      	sub	sp, #168	@ 0xa8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	2284      	movs	r2, #132	@ 0x84
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f004 fed4 	bl	800630a <memset>
  if(i2cHandle->Instance==I2C1)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a22      	ldr	r2, [pc, #136]	@ (80015f0 <HAL_I2C_MspInit+0xb4>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d13c      	bne.n	80015e6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800156c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001570:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001572:	2300      	movs	r3, #0
 8001574:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	4618      	mov	r0, r3
 800157c:	f003 f84e 	bl	800461c <HAL_RCCEx_PeriphCLKConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001586:	f000 fc4b 	bl	8001e20 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158a:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <HAL_I2C_MspInit+0xb8>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	4a19      	ldr	r2, [pc, #100]	@ (80015f4 <HAL_I2C_MspInit+0xb8>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6313      	str	r3, [r2, #48]	@ 0x30
 8001596:	4b17      	ldr	r3, [pc, #92]	@ (80015f4 <HAL_I2C_MspInit+0xb8>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015aa:	2312      	movs	r3, #18
 80015ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b6:	2303      	movs	r3, #3
 80015b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015bc:	2304      	movs	r3, #4
 80015be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80015c6:	4619      	mov	r1, r3
 80015c8:	480b      	ldr	r0, [pc, #44]	@ (80015f8 <HAL_I2C_MspInit+0xbc>)
 80015ca:	f000 ffb7 	bl	800253c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <HAL_I2C_MspInit+0xb8>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	4a08      	ldr	r2, [pc, #32]	@ (80015f4 <HAL_I2C_MspInit+0xb8>)
 80015d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <HAL_I2C_MspInit+0xb8>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015e6:	bf00      	nop
 80015e8:	37a8      	adds	r7, #168	@ 0xa8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40005400 	.word	0x40005400
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020400 	.word	0x40020400

080015fc <LCD_Init>:
static void LCD_WriteNibble(uint8_t nibble, uint8_t mode);
static void LCD_SendByte(uint8_t byte, uint8_t mode);
static void LCD_SendCmd(uint8_t cmd);

void LCD_Init(I2C_HandleTypeDef *hi2c)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
    _lcd_hi2c = hi2c;
 8001604:	4a18      	ldr	r2, [pc, #96]	@ (8001668 <LCD_Init+0x6c>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6013      	str	r3, [r2, #0]
    HAL_Delay(50);
 800160a:	2032      	movs	r0, #50	@ 0x32
 800160c:	f000 fe60 	bl	80022d0 <HAL_Delay>

    LCD_WriteNibble(0x30, LCD_COMMAND); HAL_Delay(5);
 8001610:	2100      	movs	r1, #0
 8001612:	2030      	movs	r0, #48	@ 0x30
 8001614:	f000 f894 	bl	8001740 <LCD_WriteNibble>
 8001618:	2005      	movs	r0, #5
 800161a:	f000 fe59 	bl	80022d0 <HAL_Delay>
    LCD_WriteNibble(0x30, LCD_COMMAND); HAL_Delay(5);
 800161e:	2100      	movs	r1, #0
 8001620:	2030      	movs	r0, #48	@ 0x30
 8001622:	f000 f88d 	bl	8001740 <LCD_WriteNibble>
 8001626:	2005      	movs	r0, #5
 8001628:	f000 fe52 	bl	80022d0 <HAL_Delay>
    LCD_WriteNibble(0x30, LCD_COMMAND); HAL_Delay(5);
 800162c:	2100      	movs	r1, #0
 800162e:	2030      	movs	r0, #48	@ 0x30
 8001630:	f000 f886 	bl	8001740 <LCD_WriteNibble>
 8001634:	2005      	movs	r0, #5
 8001636:	f000 fe4b 	bl	80022d0 <HAL_Delay>
    LCD_WriteNibble(0x20, LCD_COMMAND); HAL_Delay(5); // 4-bit
 800163a:	2100      	movs	r1, #0
 800163c:	2020      	movs	r0, #32
 800163e:	f000 f87f 	bl	8001740 <LCD_WriteNibble>
 8001642:	2005      	movs	r0, #5
 8001644:	f000 fe44 	bl	80022d0 <HAL_Delay>

    LCD_SendCmd(0x28); // 2-line, 5x8 dots
 8001648:	2028      	movs	r0, #40	@ 0x28
 800164a:	f000 f84e 	bl	80016ea <LCD_SendCmd>
    LCD_SendCmd(0x0C); // Display on, cursor off
 800164e:	200c      	movs	r0, #12
 8001650:	f000 f84b 	bl	80016ea <LCD_SendCmd>
    LCD_SendCmd(0x06); // Entry mode
 8001654:	2006      	movs	r0, #6
 8001656:	f000 f848 	bl	80016ea <LCD_SendCmd>
    LCD_Clear();
 800165a:	f000 f807 	bl	800166c <LCD_Clear>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000248 	.word	0x20000248

0800166c <LCD_Clear>:

void LCD_Clear(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
    LCD_SendCmd(0x01);
 8001670:	2001      	movs	r0, #1
 8001672:	f000 f83a 	bl	80016ea <LCD_SendCmd>
    HAL_Delay(2);
 8001676:	2002      	movs	r0, #2
 8001678:	f000 fe2a 	bl	80022d0 <HAL_Delay>
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	460a      	mov	r2, r1
 800168a:	71fb      	strb	r3, [r7, #7]
 800168c:	4613      	mov	r3, r2
 800168e:	71bb      	strb	r3, [r7, #6]
    const uint8_t row_offsets[] = {0x00, 0x40};
 8001690:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001694:	81bb      	strh	r3, [r7, #12]
    LCD_SendCmd(0x80 | (col + row_offsets[row]));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	3310      	adds	r3, #16
 800169a:	443b      	add	r3, r7
 800169c:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80016a0:	79bb      	ldrb	r3, [r7, #6]
 80016a2:	4413      	add	r3, r2
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 f81a 	bl	80016ea <LCD_SendCmd>
}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <LCD_Print>:

void LCD_Print(char *str)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
    while (*str)
 80016c6:	e007      	b.n	80016d8 <LCD_Print+0x1a>
        LCD_SendByte(*str++, LCD_DATA);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2101      	movs	r1, #1
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 f817 	bl	8001706 <LCD_SendByte>
    while (*str)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f3      	bne.n	80016c8 <LCD_Print+0xa>
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <LCD_SendCmd>:

static void LCD_SendCmd(uint8_t cmd)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	71fb      	strb	r3, [r7, #7]
    LCD_SendByte(cmd, LCD_COMMAND);
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 f804 	bl	8001706 <LCD_SendByte>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <LCD_SendByte>:

static void LCD_SendByte(uint8_t byte, uint8_t mode)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	460a      	mov	r2, r1
 8001710:	71fb      	strb	r3, [r7, #7]
 8001712:	4613      	mov	r3, r2
 8001714:	71bb      	strb	r3, [r7, #6]
    LCD_WriteNibble(byte & 0xF0, mode);
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	f023 030f 	bic.w	r3, r3, #15
 800171c:	b2db      	uxtb	r3, r3
 800171e:	79ba      	ldrb	r2, [r7, #6]
 8001720:	4611      	mov	r1, r2
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f80c 	bl	8001740 <LCD_WriteNibble>
    LCD_WriteNibble((byte << 4) & 0xF0, mode);
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	011b      	lsls	r3, r3, #4
 800172c:	b2db      	uxtb	r3, r3
 800172e:	79ba      	ldrb	r2, [r7, #6]
 8001730:	4611      	mov	r1, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f804 	bl	8001740 <LCD_WriteNibble>
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <LCD_WriteNibble>:

static void LCD_WriteNibble(uint8_t nibble, uint8_t mode)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af02      	add	r7, sp, #8
 8001746:	4603      	mov	r3, r0
 8001748:	460a      	mov	r2, r1
 800174a:	71fb      	strb	r3, [r7, #7]
 800174c:	4613      	mov	r3, r2
 800174e:	71bb      	strb	r3, [r7, #6]
    uint8_t data = nibble | lcd_backlight | mode;
 8001750:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <LCD_WriteNibble+0x68>)
 8001752:	781a      	ldrb	r2, [r3, #0]
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	4313      	orrs	r3, r2
 8001758:	b2da      	uxtb	r2, r3
 800175a:	79bb      	ldrb	r3, [r7, #6]
 800175c:	4313      	orrs	r3, r2
 800175e:	73fb      	strb	r3, [r7, #15]
    uint8_t data_enable = data | ENABLE;
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	f043 0304 	orr.w	r3, r3, #4
 8001766:	b2db      	uxtb	r3, r3
 8001768:	73bb      	strb	r3, [r7, #14]
    uint8_t data_disable = data & ~ENABLE;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	f023 0304 	bic.w	r3, r3, #4
 8001770:	b2db      	uxtb	r3, r3
 8001772:	737b      	strb	r3, [r7, #13]

    HAL_I2C_Master_Transmit(_lcd_hi2c, LCD_I2C_ADDR, &data_enable, 1, HAL_MAX_DELAY);
 8001774:	4b0d      	ldr	r3, [pc, #52]	@ (80017ac <LCD_WriteNibble+0x6c>)
 8001776:	6818      	ldr	r0, [r3, #0]
 8001778:	f107 020e 	add.w	r2, r7, #14
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2301      	movs	r3, #1
 8001784:	214e      	movs	r1, #78	@ 0x4e
 8001786:	f001 f953 	bl	8002a30 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Transmit(_lcd_hi2c, LCD_I2C_ADDR, &data_disable, 1, HAL_MAX_DELAY);
 800178a:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <LCD_WriteNibble+0x6c>)
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	f107 020d 	add.w	r2, r7, #13
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	2301      	movs	r3, #1
 800179a:	214e      	movs	r1, #78	@ 0x4e
 800179c:	f001 f948 	bl	8002a30 <HAL_I2C_Master_Transmit>
}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000000 	.word	0x20000000
 80017ac:	20000248 	.word	0x20000248

080017b0 <main>:

/* UART Buffer */
char uart_buf[512];

int main(void)
{
 80017b0:	b5b0      	push	{r4, r5, r7, lr}
 80017b2:	b092      	sub	sp, #72	@ 0x48
 80017b4:	af04      	add	r7, sp, #16
    HAL_Init();
 80017b6:	f000 fd2e 	bl	8002216 <HAL_Init>
    SystemClock_Config();
 80017ba:	f000 fac3 	bl	8001d44 <SystemClock_Config>
    MX_GPIO_Init();
 80017be:	f7ff fd23 	bl	8001208 <MX_GPIO_Init>
    MX_USART3_UART_Init();
 80017c2:	f000 fc6f 	bl	80020a4 <MX_USART3_UART_Init>
    MX_I2C1_Init();
 80017c6:	f7ff fe79 	bl	80014bc <MX_I2C1_Init>

    Scan_I2C_Devices();
 80017ca:	f000 f8b9 	bl	8001940 <Scan_I2C_Devices>

    uint8_t battery_detected = INA219_CheckDevice(INA219_I2C_ADDRESS1);
 80017ce:	2080      	movs	r0, #128	@ 0x80
 80017d0:	f7ff fc28 	bl	8001024 <INA219_CheckDevice>
 80017d4:	4603      	mov	r3, r0
 80017d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t pv_detected      = INA219_CheckDevice(INA219_I2C_ADDRESS2);
 80017da:	208a      	movs	r0, #138	@ 0x8a
 80017dc:	f7ff fc22 	bl	8001024 <INA219_CheckDevice>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    uint8_t load_detected    = INA219_CheckDevice(INA219_I2C_ADDRESS3);
 80017e6:	2082      	movs	r0, #130	@ 0x82
 80017e8:	f7ff fc1c 	bl	8001024 <INA219_CheckDevice>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    if (battery_detected) {
 80017f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d005      	beq.n	8001806 <main+0x56>
        INA219_Init(INA219_I2C_ADDRESS1);
 80017fa:	2080      	movs	r0, #128	@ 0x80
 80017fc:	f7ff fc84 	bl	8001108 <INA219_Init>
        INA219_Recalibrate(INA219_I2C_ADDRESS1);
 8001800:	2080      	movs	r0, #128	@ 0x80
 8001802:	f000 fa8b 	bl	8001d1c <INA219_Recalibrate>
    }
    if (pv_detected) {
 8001806:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800180a:	2b00      	cmp	r3, #0
 800180c:	d005      	beq.n	800181a <main+0x6a>
        INA219_Init(INA219_I2C_ADDRESS2);
 800180e:	208a      	movs	r0, #138	@ 0x8a
 8001810:	f7ff fc7a 	bl	8001108 <INA219_Init>
        INA219_Recalibrate(INA219_I2C_ADDRESS2);
 8001814:	208a      	movs	r0, #138	@ 0x8a
 8001816:	f000 fa81 	bl	8001d1c <INA219_Recalibrate>
    }
    if (load_detected) {
 800181a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800181e:	2b00      	cmp	r3, #0
 8001820:	d005      	beq.n	800182e <main+0x7e>
        INA219_Init(INA219_I2C_ADDRESS3);
 8001822:	2082      	movs	r0, #130	@ 0x82
 8001824:	f7ff fc70 	bl	8001108 <INA219_Init>
        INA219_Recalibrate(INA219_I2C_ADDRESS3);
 8001828:	2082      	movs	r0, #130	@ 0x82
 800182a:	f000 fa77 	bl	8001d1c <INA219_Recalibrate>
    }

    uint8_t light_sensor_ok = BH1750_Init(&hi2c1);
 800182e:	483e      	ldr	r0, [pc, #248]	@ (8001928 <main+0x178>)
 8001830:	f7ff fb70 	bl	8000f14 <BH1750_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    // ✅ Initialize LCD
    LCD_Init(&hi2c1);
 800183a:	483b      	ldr	r0, [pc, #236]	@ (8001928 <main+0x178>)
 800183c:	f7ff fede 	bl	80015fc <LCD_Init>
    LCD_Clear();
 8001840:	f7ff ff14 	bl	800166c <LCD_Clear>
    LCD_Print("Power Monitor");
 8001844:	4839      	ldr	r0, [pc, #228]	@ (800192c <main+0x17c>)
 8001846:	f7ff ff3a 	bl	80016be <LCD_Print>
    HAL_Delay(1500);
 800184a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800184e:	f000 fd3f 	bl	80022d0 <HAL_Delay>
    LCD_Clear();
 8001852:	f7ff ff0b 	bl	800166c <LCD_Clear>

    while (1)
    {
        INA219_DebugFrame(battery_detected, pv_detected, load_detected, light_sensor_ok);
 8001856:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800185a:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800185e:	f897 1036 	ldrb.w	r1, [r7, #54]	@ 0x36
 8001862:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8001866:	f000 f8a3 	bl	80019b0 <INA219_DebugFrame>

        // ✅ LCD content
        float vbatt = INA219_GetBusVoltage(INA219_I2C_ADDRESS1);
 800186a:	2080      	movs	r0, #128	@ 0x80
 800186c:	f7ff fc68 	bl	8001140 <INA219_GetBusVoltage>
 8001870:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
        float vpv   = INA219_GetBusVoltage(INA219_I2C_ADDRESS2);
 8001874:	208a      	movs	r0, #138	@ 0x8a
 8001876:	f7ff fc63 	bl	8001140 <INA219_GetBusVoltage>
 800187a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        float vload = INA219_GetBusVoltage(INA219_I2C_ADDRESS3);
 800187e:	2082      	movs	r0, #130	@ 0x82
 8001880:	f7ff fc5e 	bl	8001140 <INA219_GetBusVoltage>
 8001884:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
        uint16_t lux = light_sensor_ok ? BH1750_ReadLux(&hi2c1) : 0;
 8001888:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800188c:	2b00      	cmp	r3, #0
 800188e:	d004      	beq.n	800189a <main+0xea>
 8001890:	4825      	ldr	r0, [pc, #148]	@ (8001928 <main+0x178>)
 8001892:	f7ff fb85 	bl	8000fa0 <BH1750_ReadLux>
 8001896:	4603      	mov	r3, r0
 8001898:	e000      	b.n	800189c <main+0xec>
 800189a:	2300      	movs	r3, #0
 800189c:	84fb      	strh	r3, [r7, #38]	@ 0x26

        char lcd_line1[17];
        char lcd_line2[17];

        snprintf(lcd_line1, sizeof(lcd_line1), "Bat:%.2f PV:%.2f", vbatt, vpv);
 800189e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80018a0:	f7fe fe72 	bl	8000588 <__aeabi_f2d>
 80018a4:	4604      	mov	r4, r0
 80018a6:	460d      	mov	r5, r1
 80018a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80018aa:	f7fe fe6d 	bl	8000588 <__aeabi_f2d>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	f107 0014 	add.w	r0, r7, #20
 80018b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018ba:	e9cd 4500 	strd	r4, r5, [sp]
 80018be:	4a1c      	ldr	r2, [pc, #112]	@ (8001930 <main+0x180>)
 80018c0:	2111      	movs	r1, #17
 80018c2:	f004 fc87 	bl	80061d4 <sniprintf>
        snprintf(lcd_line2, sizeof(lcd_line2), "Lux:%-4u Load:%s", lux, (vload > 0.1) ? "OK" : "--");
 80018c6:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 80018c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80018ca:	f7fe fe5d 	bl	8000588 <__aeabi_f2d>
 80018ce:	a314      	add	r3, pc, #80	@ (adr r3, 8001920 <main+0x170>)
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	f7ff f940 	bl	8000b58 <__aeabi_dcmpgt>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <main+0x132>
 80018de:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <main+0x184>)
 80018e0:	e000      	b.n	80018e4 <main+0x134>
 80018e2:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <main+0x188>)
 80018e4:	4638      	mov	r0, r7
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	4623      	mov	r3, r4
 80018ea:	4a14      	ldr	r2, [pc, #80]	@ (800193c <main+0x18c>)
 80018ec:	2111      	movs	r1, #17
 80018ee:	f004 fc71 	bl	80061d4 <sniprintf>

        LCD_SetCursor(0, 0); LCD_Print(lcd_line1);
 80018f2:	2100      	movs	r1, #0
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff fec3 	bl	8001680 <LCD_SetCursor>
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fedd 	bl	80016be <LCD_Print>
        LCD_SetCursor(1, 0); LCD_Print(lcd_line2);
 8001904:	2100      	movs	r1, #0
 8001906:	2001      	movs	r0, #1
 8001908:	f7ff feba 	bl	8001680 <LCD_SetCursor>
 800190c:	463b      	mov	r3, r7
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fed5 	bl	80016be <LCD_Print>

        HAL_Delay(1000);
 8001914:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001918:	f000 fcda 	bl	80022d0 <HAL_Delay>
    {
 800191c:	e79b      	b.n	8001856 <main+0xa6>
 800191e:	bf00      	nop
 8001920:	9999999a 	.word	0x9999999a
 8001924:	3fb99999 	.word	0x3fb99999
 8001928:	200001f4 	.word	0x200001f4
 800192c:	080084f0 	.word	0x080084f0
 8001930:	08008500 	.word	0x08008500
 8001934:	08008514 	.word	0x08008514
 8001938:	08008518 	.word	0x08008518
 800193c:	0800851c 	.word	0x0800851c

08001940 <Scan_I2C_Devices>:
    }
}

void Scan_I2C_Devices(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
    for (uint8_t addr = 0x03; addr <= 0x77; addr++)
 8001946:	2303      	movs	r3, #3
 8001948:	71fb      	strb	r3, [r7, #7]
 800194a:	e020      	b.n	800198e <Scan_I2C_Devices+0x4e>
    {
        if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 3, HAL_MAX_DELAY) == HAL_OK)
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	b29b      	uxth	r3, r3
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	b299      	uxth	r1, r3
 8001954:	f04f 33ff 	mov.w	r3, #4294967295
 8001958:	2203      	movs	r2, #3
 800195a:	4811      	ldr	r0, [pc, #68]	@ (80019a0 <Scan_I2C_Devices+0x60>)
 800195c:	f001 fc80 	bl	8003260 <HAL_I2C_IsDeviceReady>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d110      	bne.n	8001988 <Scan_I2C_Devices+0x48>
        {
            sprintf(uart_buf, "I2C Device Found at 0x%02X\r\n", addr);
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	461a      	mov	r2, r3
 800196a:	490e      	ldr	r1, [pc, #56]	@ (80019a4 <Scan_I2C_Devices+0x64>)
 800196c:	480e      	ldr	r0, [pc, #56]	@ (80019a8 <Scan_I2C_Devices+0x68>)
 800196e:	f004 fc67 	bl	8006240 <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8001972:	480d      	ldr	r0, [pc, #52]	@ (80019a8 <Scan_I2C_Devices+0x68>)
 8001974:	f7fe fc9c 	bl	80002b0 <strlen>
 8001978:	4603      	mov	r3, r0
 800197a:	b29a      	uxth	r2, r3
 800197c:	f04f 33ff 	mov.w	r3, #4294967295
 8001980:	4909      	ldr	r1, [pc, #36]	@ (80019a8 <Scan_I2C_Devices+0x68>)
 8001982:	480a      	ldr	r0, [pc, #40]	@ (80019ac <Scan_I2C_Devices+0x6c>)
 8001984:	f003 fa88 	bl	8004e98 <HAL_UART_Transmit>
    for (uint8_t addr = 0x03; addr <= 0x77; addr++)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	3301      	adds	r3, #1
 800198c:	71fb      	strb	r3, [r7, #7]
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	2b77      	cmp	r3, #119	@ 0x77
 8001992:	d9db      	bls.n	800194c <Scan_I2C_Devices+0xc>
        }
    }
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200001f4 	.word	0x200001f4
 80019a4:	08008530 	.word	0x08008530
 80019a8:	2000024c 	.word	0x2000024c
 80019ac:	20000450 	.word	0x20000450

080019b0 <INA219_DebugFrame>:

void INA219_DebugFrame(uint8_t battery, uint8_t pv, uint8_t load, uint8_t light)
{
 80019b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019b4:	b0b7      	sub	sp, #220	@ 0xdc
 80019b6:	af06      	add	r7, sp, #24
 80019b8:	4604      	mov	r4, r0
 80019ba:	4608      	mov	r0, r1
 80019bc:	4611      	mov	r1, r2
 80019be:	461a      	mov	r2, r3
 80019c0:	4623      	mov	r3, r4
 80019c2:	71fb      	strb	r3, [r7, #7]
 80019c4:	4603      	mov	r3, r0
 80019c6:	71bb      	strb	r3, [r7, #6]
 80019c8:	460b      	mov	r3, r1
 80019ca:	717b      	strb	r3, [r7, #5]
 80019cc:	4613      	mov	r3, r2
 80019ce:	713b      	strb	r3, [r7, #4]
    char line[128];
    uart_buf[0] = '\0';
 80019d0:	4bc5      	ldr	r3, [pc, #788]	@ (8001ce8 <INA219_DebugFrame+0x338>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]

    strcat(uart_buf, "-------------------------------\r\n");
 80019d6:	48c4      	ldr	r0, [pc, #784]	@ (8001ce8 <INA219_DebugFrame+0x338>)
 80019d8:	f7fe fc6a 	bl	80002b0 <strlen>
 80019dc:	4603      	mov	r3, r0
 80019de:	461a      	mov	r2, r3
 80019e0:	4bc1      	ldr	r3, [pc, #772]	@ (8001ce8 <INA219_DebugFrame+0x338>)
 80019e2:	4413      	add	r3, r2
 80019e4:	4ac1      	ldr	r2, [pc, #772]	@ (8001cec <INA219_DebugFrame+0x33c>)
 80019e6:	4614      	mov	r4, r2
 80019e8:	469c      	mov	ip, r3
 80019ea:	f104 0e20 	add.w	lr, r4, #32
 80019ee:	4665      	mov	r5, ip
 80019f0:	4626      	mov	r6, r4
 80019f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80019f4:	6028      	str	r0, [r5, #0]
 80019f6:	6069      	str	r1, [r5, #4]
 80019f8:	60aa      	str	r2, [r5, #8]
 80019fa:	60eb      	str	r3, [r5, #12]
 80019fc:	3410      	adds	r4, #16
 80019fe:	f10c 0c10 	add.w	ip, ip, #16
 8001a02:	4574      	cmp	r4, lr
 8001a04:	d1f3      	bne.n	80019ee <INA219_DebugFrame+0x3e>
 8001a06:	4662      	mov	r2, ip
 8001a08:	4623      	mov	r3, r4
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	8013      	strh	r3, [r2, #0]
    strcat(uart_buf, "Sensor  | Volt  | Current | Power\r\n");
 8001a0e:	48b6      	ldr	r0, [pc, #728]	@ (8001ce8 <INA219_DebugFrame+0x338>)
 8001a10:	f7fe fc4e 	bl	80002b0 <strlen>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461a      	mov	r2, r3
 8001a18:	4bb3      	ldr	r3, [pc, #716]	@ (8001ce8 <INA219_DebugFrame+0x338>)
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4ab4      	ldr	r2, [pc, #720]	@ (8001cf0 <INA219_DebugFrame+0x340>)
 8001a1e:	4614      	mov	r4, r2
 8001a20:	469c      	mov	ip, r3
 8001a22:	f104 0e20 	add.w	lr, r4, #32
 8001a26:	4665      	mov	r5, ip
 8001a28:	4626      	mov	r6, r4
 8001a2a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a2c:	6028      	str	r0, [r5, #0]
 8001a2e:	6069      	str	r1, [r5, #4]
 8001a30:	60aa      	str	r2, [r5, #8]
 8001a32:	60eb      	str	r3, [r5, #12]
 8001a34:	3410      	adds	r4, #16
 8001a36:	f10c 0c10 	add.w	ip, ip, #16
 8001a3a:	4574      	cmp	r4, lr
 8001a3c:	d1f3      	bne.n	8001a26 <INA219_DebugFrame+0x76>
 8001a3e:	4663      	mov	r3, ip
 8001a40:	4622      	mov	r2, r4
 8001a42:	6810      	ldr	r0, [r2, #0]
 8001a44:	6018      	str	r0, [r3, #0]
    strcat(uart_buf, "--------|-------|---------|--------\r\n");
 8001a46:	48a8      	ldr	r0, [pc, #672]	@ (8001ce8 <INA219_DebugFrame+0x338>)
 8001a48:	f7fe fc32 	bl	80002b0 <strlen>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4ba5      	ldr	r3, [pc, #660]	@ (8001ce8 <INA219_DebugFrame+0x338>)
 8001a52:	4413      	add	r3, r2
 8001a54:	4aa7      	ldr	r2, [pc, #668]	@ (8001cf4 <INA219_DebugFrame+0x344>)
 8001a56:	4614      	mov	r4, r2
 8001a58:	469c      	mov	ip, r3
 8001a5a:	f104 0e20 	add.w	lr, r4, #32
 8001a5e:	4665      	mov	r5, ip
 8001a60:	4626      	mov	r6, r4
 8001a62:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a64:	6028      	str	r0, [r5, #0]
 8001a66:	6069      	str	r1, [r5, #4]
 8001a68:	60aa      	str	r2, [r5, #8]
 8001a6a:	60eb      	str	r3, [r5, #12]
 8001a6c:	3410      	adds	r4, #16
 8001a6e:	f10c 0c10 	add.w	ip, ip, #16
 8001a72:	4574      	cmp	r4, lr
 8001a74:	d1f3      	bne.n	8001a5e <INA219_DebugFrame+0xae>
 8001a76:	4663      	mov	r3, ip
 8001a78:	4622      	mov	r2, r4
 8001a7a:	6810      	ldr	r0, [r2, #0]
 8001a7c:	6018      	str	r0, [r3, #0]
 8001a7e:	8892      	ldrh	r2, [r2, #4]
 8001a80:	809a      	strh	r2, [r3, #4]

    if (battery) {
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d048      	beq.n	8001b1a <INA219_DebugFrame+0x16a>
        float v = INA219_GetBusVoltage(INA219_I2C_ADDRESS1);
 8001a88:	2080      	movs	r0, #128	@ 0x80
 8001a8a:	f7ff fb59 	bl	8001140 <INA219_GetBusVoltage>
 8001a8e:	ed87 0a2f 	vstr	s0, [r7, #188]	@ 0xbc
        float i = INA219_GetCurrent(INA219_I2C_ADDRESS1);
 8001a92:	2080      	movs	r0, #128	@ 0x80
 8001a94:	f7ff fb7e 	bl	8001194 <INA219_GetCurrent>
 8001a98:	ed87 0a2e 	vstr	s0, [r7, #184]	@ 0xb8
        float p = INA219_GetPower(INA219_I2C_ADDRESS1);
 8001a9c:	2080      	movs	r0, #128	@ 0x80
 8001a9e:	f7ff fb97 	bl	80011d0 <INA219_GetPower>
 8001aa2:	ed87 0a2d 	vstr	s0, [r7, #180]	@ 0xb4
        const char* dir = (i < 0) ? "↓" : "↑";
 8001aa6:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001aaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab2:	d501      	bpl.n	8001ab8 <INA219_DebugFrame+0x108>
 8001ab4:	4b90      	ldr	r3, [pc, #576]	@ (8001cf8 <INA219_DebugFrame+0x348>)
 8001ab6:	e000      	b.n	8001aba <INA219_DebugFrame+0x10a>
 8001ab8:	4b90      	ldr	r3, [pc, #576]	@ (8001cfc <INA219_DebugFrame+0x34c>)
 8001aba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        sprintf(line, "Battery | %5.2fV | %6.1fmA%s | %5.2fW\r\n", v, fabsf(i), dir, fabsf(p));
 8001abe:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8001ac2:	f7fe fd61 	bl	8000588 <__aeabi_f2d>
 8001ac6:	4680      	mov	r8, r0
 8001ac8:	4689      	mov	r9, r1
 8001aca:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001ace:	eef0 7ae7 	vabs.f32	s15, s15
 8001ad2:	ee17 0a90 	vmov	r0, s15
 8001ad6:	f7fe fd57 	bl	8000588 <__aeabi_f2d>
 8001ada:	4604      	mov	r4, r0
 8001adc:	460d      	mov	r5, r1
 8001ade:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8001ae2:	eef0 7ae7 	vabs.f32	s15, s15
 8001ae6:	ee17 0a90 	vmov	r0, s15
 8001aea:	f7fe fd4d 	bl	8000588 <__aeabi_f2d>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	f107 000c 	add.w	r0, r7, #12
 8001af6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001afa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001afe:	9302      	str	r3, [sp, #8]
 8001b00:	e9cd 4500 	strd	r4, r5, [sp]
 8001b04:	4642      	mov	r2, r8
 8001b06:	464b      	mov	r3, r9
 8001b08:	497d      	ldr	r1, [pc, #500]	@ (8001d00 <INA219_DebugFrame+0x350>)
 8001b0a:	f004 fb99 	bl	8006240 <siprintf>
        strcat(uart_buf, line);
 8001b0e:	f107 030c 	add.w	r3, r7, #12
 8001b12:	4619      	mov	r1, r3
 8001b14:	4874      	ldr	r0, [pc, #464]	@ (8001ce8 <INA219_DebugFrame+0x338>)
 8001b16:	f004 fc00 	bl	800631a <strcat>
    }

    if (pv) {
 8001b1a:	79bb      	ldrb	r3, [r7, #6]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d048      	beq.n	8001bb2 <INA219_DebugFrame+0x202>
        float v = INA219_GetBusVoltage(INA219_I2C_ADDRESS2);
 8001b20:	208a      	movs	r0, #138	@ 0x8a
 8001b22:	f7ff fb0d 	bl	8001140 <INA219_GetBusVoltage>
 8001b26:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac
        float i = INA219_GetCurrent(INA219_I2C_ADDRESS2);
 8001b2a:	208a      	movs	r0, #138	@ 0x8a
 8001b2c:	f7ff fb32 	bl	8001194 <INA219_GetCurrent>
 8001b30:	ed87 0a2a 	vstr	s0, [r7, #168]	@ 0xa8
        float p = INA219_GetPower(INA219_I2C_ADDRESS2);
 8001b34:	208a      	movs	r0, #138	@ 0x8a
 8001b36:	f7ff fb4b 	bl	80011d0 <INA219_GetPower>
 8001b3a:	ed87 0a29 	vstr	s0, [r7, #164]	@ 0xa4
        const char* dir = (i < 0) ? "↓" : "↑";
 8001b3e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8001b42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4a:	d501      	bpl.n	8001b50 <INA219_DebugFrame+0x1a0>
 8001b4c:	4b6a      	ldr	r3, [pc, #424]	@ (8001cf8 <INA219_DebugFrame+0x348>)
 8001b4e:	e000      	b.n	8001b52 <INA219_DebugFrame+0x1a2>
 8001b50:	4b6a      	ldr	r3, [pc, #424]	@ (8001cfc <INA219_DebugFrame+0x34c>)
 8001b52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        sprintf(line, "PV      | %5.2fV | %6.1fmA%s | %5.2fW\r\n", v, fabsf(i), dir, fabsf(p));
 8001b56:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001b5a:	f7fe fd15 	bl	8000588 <__aeabi_f2d>
 8001b5e:	4680      	mov	r8, r0
 8001b60:	4689      	mov	r9, r1
 8001b62:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8001b66:	eef0 7ae7 	vabs.f32	s15, s15
 8001b6a:	ee17 0a90 	vmov	r0, s15
 8001b6e:	f7fe fd0b 	bl	8000588 <__aeabi_f2d>
 8001b72:	4604      	mov	r4, r0
 8001b74:	460d      	mov	r5, r1
 8001b76:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001b7a:	eef0 7ae7 	vabs.f32	s15, s15
 8001b7e:	ee17 0a90 	vmov	r0, s15
 8001b82:	f7fe fd01 	bl	8000588 <__aeabi_f2d>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	f107 000c 	add.w	r0, r7, #12
 8001b8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001b92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001b96:	9302      	str	r3, [sp, #8]
 8001b98:	e9cd 4500 	strd	r4, r5, [sp]
 8001b9c:	4642      	mov	r2, r8
 8001b9e:	464b      	mov	r3, r9
 8001ba0:	4958      	ldr	r1, [pc, #352]	@ (8001d04 <INA219_DebugFrame+0x354>)
 8001ba2:	f004 fb4d 	bl	8006240 <siprintf>
        strcat(uart_buf, line);
 8001ba6:	f107 030c 	add.w	r3, r7, #12
 8001baa:	4619      	mov	r1, r3
 8001bac:	484e      	ldr	r0, [pc, #312]	@ (8001ce8 <INA219_DebugFrame+0x338>)
 8001bae:	f004 fbb4 	bl	800631a <strcat>
    }

    if (load) {
 8001bb2:	797b      	ldrb	r3, [r7, #5]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d048      	beq.n	8001c4a <INA219_DebugFrame+0x29a>
        float v = INA219_GetBusVoltage(INA219_I2C_ADDRESS3);
 8001bb8:	2082      	movs	r0, #130	@ 0x82
 8001bba:	f7ff fac1 	bl	8001140 <INA219_GetBusVoltage>
 8001bbe:	ed87 0a27 	vstr	s0, [r7, #156]	@ 0x9c
        float i = INA219_GetCurrent(INA219_I2C_ADDRESS3);
 8001bc2:	2082      	movs	r0, #130	@ 0x82
 8001bc4:	f7ff fae6 	bl	8001194 <INA219_GetCurrent>
 8001bc8:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
        float p = INA219_GetPower(INA219_I2C_ADDRESS3);
 8001bcc:	2082      	movs	r0, #130	@ 0x82
 8001bce:	f7ff faff 	bl	80011d0 <INA219_GetPower>
 8001bd2:	ed87 0a25 	vstr	s0, [r7, #148]	@ 0x94
        const char* dir = (i < 0) ? "↓" : "↑";
 8001bd6:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8001bda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be2:	d501      	bpl.n	8001be8 <INA219_DebugFrame+0x238>
 8001be4:	4b44      	ldr	r3, [pc, #272]	@ (8001cf8 <INA219_DebugFrame+0x348>)
 8001be6:	e000      	b.n	8001bea <INA219_DebugFrame+0x23a>
 8001be8:	4b44      	ldr	r3, [pc, #272]	@ (8001cfc <INA219_DebugFrame+0x34c>)
 8001bea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        sprintf(line, "Load    | %5.2fV | %6.1fmA%s | %5.2fW\r\n", v, fabsf(i), dir, fabsf(p));
 8001bee:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001bf2:	f7fe fcc9 	bl	8000588 <__aeabi_f2d>
 8001bf6:	4680      	mov	r8, r0
 8001bf8:	4689      	mov	r9, r1
 8001bfa:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8001bfe:	eef0 7ae7 	vabs.f32	s15, s15
 8001c02:	ee17 0a90 	vmov	r0, s15
 8001c06:	f7fe fcbf 	bl	8000588 <__aeabi_f2d>
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	460d      	mov	r5, r1
 8001c0e:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8001c12:	eef0 7ae7 	vabs.f32	s15, s15
 8001c16:	ee17 0a90 	vmov	r0, s15
 8001c1a:	f7fe fcb5 	bl	8000588 <__aeabi_f2d>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	f107 000c 	add.w	r0, r7, #12
 8001c26:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001c2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c2e:	9302      	str	r3, [sp, #8]
 8001c30:	e9cd 4500 	strd	r4, r5, [sp]
 8001c34:	4642      	mov	r2, r8
 8001c36:	464b      	mov	r3, r9
 8001c38:	4933      	ldr	r1, [pc, #204]	@ (8001d08 <INA219_DebugFrame+0x358>)
 8001c3a:	f004 fb01 	bl	8006240 <siprintf>
        strcat(uart_buf, line);
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	4619      	mov	r1, r3
 8001c44:	4828      	ldr	r0, [pc, #160]	@ (8001ce8 <INA219_DebugFrame+0x338>)
 8001c46:	f004 fb68 	bl	800631a <strcat>
    }

    strcat(uart_buf, "-------------------------------\r\n");
 8001c4a:	4827      	ldr	r0, [pc, #156]	@ (8001ce8 <INA219_DebugFrame+0x338>)
 8001c4c:	f7fe fb30 	bl	80002b0 <strlen>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b24      	ldr	r3, [pc, #144]	@ (8001ce8 <INA219_DebugFrame+0x338>)
 8001c56:	4413      	add	r3, r2
 8001c58:	4a24      	ldr	r2, [pc, #144]	@ (8001cec <INA219_DebugFrame+0x33c>)
 8001c5a:	4614      	mov	r4, r2
 8001c5c:	469c      	mov	ip, r3
 8001c5e:	f104 0e20 	add.w	lr, r4, #32
 8001c62:	4665      	mov	r5, ip
 8001c64:	4626      	mov	r6, r4
 8001c66:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c68:	6028      	str	r0, [r5, #0]
 8001c6a:	6069      	str	r1, [r5, #4]
 8001c6c:	60aa      	str	r2, [r5, #8]
 8001c6e:	60eb      	str	r3, [r5, #12]
 8001c70:	3410      	adds	r4, #16
 8001c72:	f10c 0c10 	add.w	ip, ip, #16
 8001c76:	4574      	cmp	r4, lr
 8001c78:	d1f3      	bne.n	8001c62 <INA219_DebugFrame+0x2b2>
 8001c7a:	4662      	mov	r2, ip
 8001c7c:	4623      	mov	r3, r4
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	8013      	strh	r3, [r2, #0]

    if (light) {
 8001c82:	793b      	ldrb	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d013      	beq.n	8001cb0 <INA219_DebugFrame+0x300>
        uint16_t lux = BH1750_ReadLux(&hi2c1);
 8001c88:	4820      	ldr	r0, [pc, #128]	@ (8001d0c <INA219_DebugFrame+0x35c>)
 8001c8a:	f7ff f989 	bl	8000fa0 <BH1750_ReadLux>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
        sprintf(line, "Ambient Light: %u lux\r\n", lux);
 8001c94:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	491c      	ldr	r1, [pc, #112]	@ (8001d10 <INA219_DebugFrame+0x360>)
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f004 face 	bl	8006240 <siprintf>
        strcat(uart_buf, line);
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	4619      	mov	r1, r3
 8001caa:	480f      	ldr	r0, [pc, #60]	@ (8001ce8 <INA219_DebugFrame+0x338>)
 8001cac:	f004 fb35 	bl	800631a <strcat>
    }

    strcat(uart_buf, "\r\n");
 8001cb0:	480d      	ldr	r0, [pc, #52]	@ (8001ce8 <INA219_DebugFrame+0x338>)
 8001cb2:	f7fe fafd 	bl	80002b0 <strlen>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <INA219_DebugFrame+0x338>)
 8001cbc:	4413      	add	r3, r2
 8001cbe:	4a15      	ldr	r2, [pc, #84]	@ (8001d14 <INA219_DebugFrame+0x364>)
 8001cc0:	8811      	ldrh	r1, [r2, #0]
 8001cc2:	7892      	ldrb	r2, [r2, #2]
 8001cc4:	8019      	strh	r1, [r3, #0]
 8001cc6:	709a      	strb	r2, [r3, #2]

    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8001cc8:	4807      	ldr	r0, [pc, #28]	@ (8001ce8 <INA219_DebugFrame+0x338>)
 8001cca:	f7fe faf1 	bl	80002b0 <strlen>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd6:	4904      	ldr	r1, [pc, #16]	@ (8001ce8 <INA219_DebugFrame+0x338>)
 8001cd8:	480f      	ldr	r0, [pc, #60]	@ (8001d18 <INA219_DebugFrame+0x368>)
 8001cda:	f003 f8dd 	bl	8004e98 <HAL_UART_Transmit>
}
 8001cde:	bf00      	nop
 8001ce0:	37c4      	adds	r7, #196	@ 0xc4
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ce8:	2000024c 	.word	0x2000024c
 8001cec:	08008550 	.word	0x08008550
 8001cf0:	08008574 	.word	0x08008574
 8001cf4:	08008598 	.word	0x08008598
 8001cf8:	080085c0 	.word	0x080085c0
 8001cfc:	080085c4 	.word	0x080085c4
 8001d00:	080085c8 	.word	0x080085c8
 8001d04:	080085f0 	.word	0x080085f0
 8001d08:	08008618 	.word	0x08008618
 8001d0c:	200001f4 	.word	0x200001f4
 8001d10:	08008640 	.word	0x08008640
 8001d14:	08008658 	.word	0x08008658
 8001d18:	20000450 	.word	0x20000450

08001d1c <INA219_Recalibrate>:

void INA219_Recalibrate(uint8_t devAddr)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
    INA219_WriteRegister(devAddr, INA219_REG_CALIBRATION, 20480);
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8001d2c:	2105      	movs	r1, #5
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff f992 	bl	8001058 <INA219_WriteRegister>
    HAL_Delay(10);
 8001d34:	200a      	movs	r0, #10
 8001d36:	f000 facb 	bl	80022d0 <HAL_Delay>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b094      	sub	sp, #80	@ 0x50
 8001d48:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d4a:	f107 0320 	add.w	r3, r7, #32
 8001d4e:	2230      	movs	r2, #48	@ 0x30
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f004 fad9 	bl	800630a <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d58:	f107 030c 	add.w	r3, r7, #12
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]

    HAL_PWR_EnableBkUpAccess();
 8001d68:	f001 ff2e 	bl	8003bc8 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001e18 <SystemClock_Config+0xd4>)
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d70:	4a29      	ldr	r2, [pc, #164]	@ (8001e18 <SystemClock_Config+0xd4>)
 8001d72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d76:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d78:	4b27      	ldr	r3, [pc, #156]	@ (8001e18 <SystemClock_Config+0xd4>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d84:	4b25      	ldr	r3, [pc, #148]	@ (8001e1c <SystemClock_Config+0xd8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a24      	ldr	r2, [pc, #144]	@ (8001e1c <SystemClock_Config+0xd8>)
 8001d8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b22      	ldr	r3, [pc, #136]	@ (8001e1c <SystemClock_Config+0xd8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001da0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001da6:	2302      	movs	r3, #2
 8001da8:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001daa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 4;
 8001db0:	2304      	movs	r3, #4
 8001db2:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 216;
 8001db4:	23d8      	movs	r3, #216	@ 0xd8
 8001db6:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001db8:	2302      	movs	r3, #2
 8001dba:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 3;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) Error_Handler();
 8001dc0:	f107 0320 	add.w	r3, r7, #32
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f001 ff5f 	bl	8003c88 <HAL_RCC_OscConfig>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <SystemClock_Config+0x90>
 8001dd0:	f000 f826 	bl	8001e20 <Error_Handler>
    if (HAL_PWREx_EnableOverDrive() != HAL_OK) Error_Handler();
 8001dd4:	f001 ff08 	bl	8003be8 <HAL_PWREx_EnableOverDrive>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <SystemClock_Config+0x9e>
 8001dde:	f000 f81f 	bl	8001e20 <Error_Handler>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001de2:	230f      	movs	r3, #15
 8001de4:	60fb      	str	r3, [r7, #12]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de6:	2302      	movs	r3, #2
 8001de8:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001df2:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001df4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001df8:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) Error_Handler();
 8001dfa:	f107 030c 	add.w	r3, r7, #12
 8001dfe:	2107      	movs	r1, #7
 8001e00:	4618      	mov	r0, r3
 8001e02:	f002 f9e5 	bl	80041d0 <HAL_RCC_ClockConfig>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <SystemClock_Config+0xcc>
 8001e0c:	f000 f808 	bl	8001e20 <Error_Handler>
}
 8001e10:	bf00      	nop
 8001e12:	3750      	adds	r7, #80	@ 0x50
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40007000 	.word	0x40007000

08001e20 <Error_Handler>:

void Error_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e24:	b672      	cpsid	i
}
 8001e26:	bf00      	nop
    __disable_irq();
    while (1) {}
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <Error_Handler+0x8>

08001e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e32:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <HAL_MspInit+0x44>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	4a0e      	ldr	r2, [pc, #56]	@ (8001e70 <HAL_MspInit+0x44>)
 8001e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e70 <HAL_MspInit+0x44>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e46:	607b      	str	r3, [r7, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4a:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <HAL_MspInit+0x44>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4e:	4a08      	ldr	r2, [pc, #32]	@ (8001e70 <HAL_MspInit+0x44>)
 8001e50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e56:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <HAL_MspInit+0x44>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800

08001e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e78:	bf00      	nop
 8001e7a:	e7fd      	b.n	8001e78 <NMI_Handler+0x4>

08001e7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <HardFault_Handler+0x4>

08001e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <MemManage_Handler+0x4>

08001e8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <BusFault_Handler+0x4>

08001e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <UsageFault_Handler+0x4>

08001e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eca:	f000 f9e1 	bl	8002290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OFF_Btn_Pin);
 8001ed6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001eda:	f000 fcf5 	bl	80028c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001ede:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ee2:	f000 fcf1 	bl	80028c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ON_Btn_Pin);
 8001ee6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001eea:	f000 fced 	bl	80028c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  return 1;
 8001ef6:	2301      	movs	r3, #1
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <_kill>:

int _kill(int pid, int sig)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f0c:	f004 fa5e 	bl	80063cc <__errno>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2216      	movs	r2, #22
 8001f14:	601a      	str	r2, [r3, #0]
  return -1;
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <_exit>:

void _exit (int status)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f2a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ffe7 	bl	8001f02 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <_exit+0x12>

08001f38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	e00a      	b.n	8001f60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f4a:	f3af 8000 	nop.w
 8001f4e:	4601      	mov	r1, r0
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	60ba      	str	r2, [r7, #8]
 8001f56:	b2ca      	uxtb	r2, r1
 8001f58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	dbf0      	blt.n	8001f4a <_read+0x12>
  }

  return len;
 8001f68:	687b      	ldr	r3, [r7, #4]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b086      	sub	sp, #24
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	e009      	b.n	8001f98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	60ba      	str	r2, [r7, #8]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	3301      	adds	r3, #1
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	dbf1      	blt.n	8001f84 <_write+0x12>
  }
  return len;
 8001fa0:	687b      	ldr	r3, [r7, #4]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <_close>:

int _close(int file)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fd2:	605a      	str	r2, [r3, #4]
  return 0;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <_isatty>:

int _isatty(int file)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fea:	2301      	movs	r3, #1
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800201c:	4a14      	ldr	r2, [pc, #80]	@ (8002070 <_sbrk+0x5c>)
 800201e:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <_sbrk+0x60>)
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002028:	4b13      	ldr	r3, [pc, #76]	@ (8002078 <_sbrk+0x64>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d102      	bne.n	8002036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002030:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <_sbrk+0x64>)
 8002032:	4a12      	ldr	r2, [pc, #72]	@ (800207c <_sbrk+0x68>)
 8002034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002036:	4b10      	ldr	r3, [pc, #64]	@ (8002078 <_sbrk+0x64>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	429a      	cmp	r2, r3
 8002042:	d207      	bcs.n	8002054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002044:	f004 f9c2 	bl	80063cc <__errno>
 8002048:	4603      	mov	r3, r0
 800204a:	220c      	movs	r2, #12
 800204c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800204e:	f04f 33ff 	mov.w	r3, #4294967295
 8002052:	e009      	b.n	8002068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002054:	4b08      	ldr	r3, [pc, #32]	@ (8002078 <_sbrk+0x64>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800205a:	4b07      	ldr	r3, [pc, #28]	@ (8002078 <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	4a05      	ldr	r2, [pc, #20]	@ (8002078 <_sbrk+0x64>)
 8002064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002066:	68fb      	ldr	r3, [r7, #12]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20050000 	.word	0x20050000
 8002074:	00000400 	.word	0x00000400
 8002078:	2000044c 	.word	0x2000044c
 800207c:	20000628 	.word	0x20000628

08002080 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002084:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <SystemInit+0x20>)
 8002086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208a:	4a05      	ldr	r2, [pc, #20]	@ (80020a0 <SystemInit+0x20>)
 800208c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002090:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020a8:	4b14      	ldr	r3, [pc, #80]	@ (80020fc <MX_USART3_UART_Init+0x58>)
 80020aa:	4a15      	ldr	r2, [pc, #84]	@ (8002100 <MX_USART3_UART_Init+0x5c>)
 80020ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020ae:	4b13      	ldr	r3, [pc, #76]	@ (80020fc <MX_USART3_UART_Init+0x58>)
 80020b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020b6:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <MX_USART3_UART_Init+0x58>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020bc:	4b0f      	ldr	r3, [pc, #60]	@ (80020fc <MX_USART3_UART_Init+0x58>)
 80020be:	2200      	movs	r2, #0
 80020c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020c2:	4b0e      	ldr	r3, [pc, #56]	@ (80020fc <MX_USART3_UART_Init+0x58>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020c8:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <MX_USART3_UART_Init+0x58>)
 80020ca:	220c      	movs	r2, #12
 80020cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ce:	4b0b      	ldr	r3, [pc, #44]	@ (80020fc <MX_USART3_UART_Init+0x58>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d4:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <MX_USART3_UART_Init+0x58>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020da:	4b08      	ldr	r3, [pc, #32]	@ (80020fc <MX_USART3_UART_Init+0x58>)
 80020dc:	2200      	movs	r2, #0
 80020de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020e0:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <MX_USART3_UART_Init+0x58>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020e6:	4805      	ldr	r0, [pc, #20]	@ (80020fc <MX_USART3_UART_Init+0x58>)
 80020e8:	f002 fe88 	bl	8004dfc <HAL_UART_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80020f2:	f7ff fe95 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000450 	.word	0x20000450
 8002100:	40004800 	.word	0x40004800

08002104 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b0aa      	sub	sp, #168	@ 0xa8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800211c:	f107 0310 	add.w	r3, r7, #16
 8002120:	2284      	movs	r2, #132	@ 0x84
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f004 f8f0 	bl	800630a <memset>
  if(uartHandle->Instance==USART3)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a22      	ldr	r2, [pc, #136]	@ (80021b8 <HAL_UART_MspInit+0xb4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d13c      	bne.n	80021ae <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002134:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002138:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800213a:	2300      	movs	r3, #0
 800213c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800213e:	f107 0310 	add.w	r3, r7, #16
 8002142:	4618      	mov	r0, r3
 8002144:	f002 fa6a 	bl	800461c <HAL_RCCEx_PeriphCLKConfig>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800214e:	f7ff fe67 	bl	8001e20 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002152:	4b1a      	ldr	r3, [pc, #104]	@ (80021bc <HAL_UART_MspInit+0xb8>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002156:	4a19      	ldr	r2, [pc, #100]	@ (80021bc <HAL_UART_MspInit+0xb8>)
 8002158:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800215c:	6413      	str	r3, [r2, #64]	@ 0x40
 800215e:	4b17      	ldr	r3, [pc, #92]	@ (80021bc <HAL_UART_MspInit+0xb8>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800216a:	4b14      	ldr	r3, [pc, #80]	@ (80021bc <HAL_UART_MspInit+0xb8>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	4a13      	ldr	r2, [pc, #76]	@ (80021bc <HAL_UART_MspInit+0xb8>)
 8002170:	f043 0308 	orr.w	r3, r3, #8
 8002174:	6313      	str	r3, [r2, #48]	@ 0x30
 8002176:	4b11      	ldr	r3, [pc, #68]	@ (80021bc <HAL_UART_MspInit+0xb8>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002182:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002186:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002190:	2301      	movs	r3, #1
 8002192:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002196:	2303      	movs	r3, #3
 8002198:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800219c:	2307      	movs	r3, #7
 800219e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021a2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80021a6:	4619      	mov	r1, r3
 80021a8:	4805      	ldr	r0, [pc, #20]	@ (80021c0 <HAL_UART_MspInit+0xbc>)
 80021aa:	f000 f9c7 	bl	800253c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80021ae:	bf00      	nop
 80021b0:	37a8      	adds	r7, #168	@ 0xa8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40004800 	.word	0x40004800
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40020c00 	.word	0x40020c00

080021c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021c8:	480d      	ldr	r0, [pc, #52]	@ (8002200 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021ca:	490e      	ldr	r1, [pc, #56]	@ (8002204 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021cc:	4a0e      	ldr	r2, [pc, #56]	@ (8002208 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d0:	e002      	b.n	80021d8 <LoopCopyDataInit>

080021d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021d6:	3304      	adds	r3, #4

080021d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021dc:	d3f9      	bcc.n	80021d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021de:	4a0b      	ldr	r2, [pc, #44]	@ (800220c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021e0:	4c0b      	ldr	r4, [pc, #44]	@ (8002210 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e4:	e001      	b.n	80021ea <LoopFillZerobss>

080021e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e8:	3204      	adds	r2, #4

080021ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ec:	d3fb      	bcc.n	80021e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021ee:	f7ff ff47 	bl	8002080 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021f2:	f004 f8f1 	bl	80063d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021f6:	f7ff fadb 	bl	80017b0 <main>
  bx  lr    
 80021fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021fc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002204:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002208:	080089fc 	.word	0x080089fc
  ldr r2, =_sbss
 800220c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002210:	20000628 	.word	0x20000628

08002214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002214:	e7fe      	b.n	8002214 <ADC_IRQHandler>

08002216 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800221a:	2003      	movs	r0, #3
 800221c:	f000 f94c 	bl	80024b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002220:	2000      	movs	r0, #0
 8002222:	f000 f805 	bl	8002230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002226:	f7ff fe01 	bl	8001e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002238:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <HAL_InitTick+0x54>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <HAL_InitTick+0x58>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	4619      	mov	r1, r3
 8002242:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002246:	fbb3 f3f1 	udiv	r3, r3, r1
 800224a:	fbb2 f3f3 	udiv	r3, r2, r3
 800224e:	4618      	mov	r0, r3
 8002250:	f000 f967 	bl	8002522 <HAL_SYSTICK_Config>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e00e      	b.n	800227c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b0f      	cmp	r3, #15
 8002262:	d80a      	bhi.n	800227a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002264:	2200      	movs	r2, #0
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	f000 f92f 	bl	80024ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002270:	4a06      	ldr	r2, [pc, #24]	@ (800228c <HAL_InitTick+0x5c>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	e000      	b.n	800227c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000004 	.word	0x20000004
 8002288:	2000000c 	.word	0x2000000c
 800228c:	20000008 	.word	0x20000008

08002290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002294:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <HAL_IncTick+0x20>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <HAL_IncTick+0x24>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	4a04      	ldr	r2, [pc, #16]	@ (80022b4 <HAL_IncTick+0x24>)
 80022a2:	6013      	str	r3, [r2, #0]
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	2000000c 	.word	0x2000000c
 80022b4:	200004d8 	.word	0x200004d8

080022b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return uwTick;
 80022bc:	4b03      	ldr	r3, [pc, #12]	@ (80022cc <HAL_GetTick+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	200004d8 	.word	0x200004d8

080022d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d8:	f7ff ffee 	bl	80022b8 <HAL_GetTick>
 80022dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e8:	d005      	beq.n	80022f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002314 <HAL_Delay+0x44>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4413      	add	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022f6:	bf00      	nop
 80022f8:	f7ff ffde 	bl	80022b8 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	429a      	cmp	r2, r3
 8002306:	d8f7      	bhi.n	80022f8 <HAL_Delay+0x28>
  {
  }
}
 8002308:	bf00      	nop
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	2000000c 	.word	0x2000000c

08002318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002328:	4b0b      	ldr	r3, [pc, #44]	@ (8002358 <__NVIC_SetPriorityGrouping+0x40>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002334:	4013      	ands	r3, r2
 8002336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002340:	4b06      	ldr	r3, [pc, #24]	@ (800235c <__NVIC_SetPriorityGrouping+0x44>)
 8002342:	4313      	orrs	r3, r2
 8002344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002346:	4a04      	ldr	r2, [pc, #16]	@ (8002358 <__NVIC_SetPriorityGrouping+0x40>)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	60d3      	str	r3, [r2, #12]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00
 800235c:	05fa0000 	.word	0x05fa0000

08002360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002364:	4b04      	ldr	r3, [pc, #16]	@ (8002378 <__NVIC_GetPriorityGrouping+0x18>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	f003 0307 	and.w	r3, r3, #7
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	2b00      	cmp	r3, #0
 800238c:	db0b      	blt.n	80023a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	f003 021f 	and.w	r2, r3, #31
 8002394:	4907      	ldr	r1, [pc, #28]	@ (80023b4 <__NVIC_EnableIRQ+0x38>)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	2001      	movs	r0, #1
 800239e:	fa00 f202 	lsl.w	r2, r0, r2
 80023a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000e100 	.word	0xe000e100

080023b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	db0a      	blt.n	80023e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	490c      	ldr	r1, [pc, #48]	@ (8002404 <__NVIC_SetPriority+0x4c>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	0112      	lsls	r2, r2, #4
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	440b      	add	r3, r1
 80023dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e0:	e00a      	b.n	80023f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4908      	ldr	r1, [pc, #32]	@ (8002408 <__NVIC_SetPriority+0x50>)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	3b04      	subs	r3, #4
 80023f0:	0112      	lsls	r2, r2, #4
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	440b      	add	r3, r1
 80023f6:	761a      	strb	r2, [r3, #24]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000e100 	.word	0xe000e100
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800240c:	b480      	push	{r7}
 800240e:	b089      	sub	sp, #36	@ 0x24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f1c3 0307 	rsb	r3, r3, #7
 8002426:	2b04      	cmp	r3, #4
 8002428:	bf28      	it	cs
 800242a:	2304      	movcs	r3, #4
 800242c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3304      	adds	r3, #4
 8002432:	2b06      	cmp	r3, #6
 8002434:	d902      	bls.n	800243c <NVIC_EncodePriority+0x30>
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3b03      	subs	r3, #3
 800243a:	e000      	b.n	800243e <NVIC_EncodePriority+0x32>
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	f04f 32ff 	mov.w	r2, #4294967295
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43da      	mvns	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	401a      	ands	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002454:	f04f 31ff 	mov.w	r1, #4294967295
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	fa01 f303 	lsl.w	r3, r1, r3
 800245e:	43d9      	mvns	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	4313      	orrs	r3, r2
         );
}
 8002466:	4618      	mov	r0, r3
 8002468:	3724      	adds	r7, #36	@ 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002484:	d301      	bcc.n	800248a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002486:	2301      	movs	r3, #1
 8002488:	e00f      	b.n	80024aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248a:	4a0a      	ldr	r2, [pc, #40]	@ (80024b4 <SysTick_Config+0x40>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002492:	210f      	movs	r1, #15
 8002494:	f04f 30ff 	mov.w	r0, #4294967295
 8002498:	f7ff ff8e 	bl	80023b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800249c:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <SysTick_Config+0x40>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a2:	4b04      	ldr	r3, [pc, #16]	@ (80024b4 <SysTick_Config+0x40>)
 80024a4:	2207      	movs	r2, #7
 80024a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	e000e010 	.word	0xe000e010

080024b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ff29 	bl	8002318 <__NVIC_SetPriorityGrouping>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	4603      	mov	r3, r0
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
 80024da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024e0:	f7ff ff3e 	bl	8002360 <__NVIC_GetPriorityGrouping>
 80024e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	6978      	ldr	r0, [r7, #20]
 80024ec:	f7ff ff8e 	bl	800240c <NVIC_EncodePriority>
 80024f0:	4602      	mov	r2, r0
 80024f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff5d 	bl	80023b8 <__NVIC_SetPriority>
}
 80024fe:	bf00      	nop
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff31 	bl	800237c <__NVIC_EnableIRQ>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ffa2 	bl	8002474 <SysTick_Config>
 8002530:	4603      	mov	r3, r0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800253c:	b480      	push	{r7}
 800253e:	b089      	sub	sp, #36	@ 0x24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	e175      	b.n	8002848 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800255c:	2201      	movs	r2, #1
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	429a      	cmp	r2, r3
 8002576:	f040 8164 	bne.w	8002842 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	2b01      	cmp	r3, #1
 8002584:	d005      	beq.n	8002592 <HAL_GPIO_Init+0x56>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d130      	bne.n	80025f4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	2203      	movs	r2, #3
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c8:	2201      	movs	r2, #1
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	f003 0201 	and.w	r2, r3, #1
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d017      	beq.n	8002630 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	2203      	movs	r2, #3
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d123      	bne.n	8002684 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	08da      	lsrs	r2, r3, #3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3208      	adds	r2, #8
 8002644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	220f      	movs	r2, #15
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	08da      	lsrs	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3208      	adds	r2, #8
 800267e:	69b9      	ldr	r1, [r7, #24]
 8002680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 0203 	and.w	r2, r3, #3
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80be 	beq.w	8002842 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	4b66      	ldr	r3, [pc, #408]	@ (8002860 <HAL_GPIO_Init+0x324>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ca:	4a65      	ldr	r2, [pc, #404]	@ (8002860 <HAL_GPIO_Init+0x324>)
 80026cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026d2:	4b63      	ldr	r3, [pc, #396]	@ (8002860 <HAL_GPIO_Init+0x324>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80026de:	4a61      	ldr	r2, [pc, #388]	@ (8002864 <HAL_GPIO_Init+0x328>)
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	089b      	lsrs	r3, r3, #2
 80026e4:	3302      	adds	r3, #2
 80026e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	220f      	movs	r2, #15
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a58      	ldr	r2, [pc, #352]	@ (8002868 <HAL_GPIO_Init+0x32c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d037      	beq.n	800277a <HAL_GPIO_Init+0x23e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a57      	ldr	r2, [pc, #348]	@ (800286c <HAL_GPIO_Init+0x330>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d031      	beq.n	8002776 <HAL_GPIO_Init+0x23a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a56      	ldr	r2, [pc, #344]	@ (8002870 <HAL_GPIO_Init+0x334>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d02b      	beq.n	8002772 <HAL_GPIO_Init+0x236>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a55      	ldr	r2, [pc, #340]	@ (8002874 <HAL_GPIO_Init+0x338>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d025      	beq.n	800276e <HAL_GPIO_Init+0x232>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a54      	ldr	r2, [pc, #336]	@ (8002878 <HAL_GPIO_Init+0x33c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d01f      	beq.n	800276a <HAL_GPIO_Init+0x22e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a53      	ldr	r2, [pc, #332]	@ (800287c <HAL_GPIO_Init+0x340>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d019      	beq.n	8002766 <HAL_GPIO_Init+0x22a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a52      	ldr	r2, [pc, #328]	@ (8002880 <HAL_GPIO_Init+0x344>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d013      	beq.n	8002762 <HAL_GPIO_Init+0x226>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a51      	ldr	r2, [pc, #324]	@ (8002884 <HAL_GPIO_Init+0x348>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00d      	beq.n	800275e <HAL_GPIO_Init+0x222>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a50      	ldr	r2, [pc, #320]	@ (8002888 <HAL_GPIO_Init+0x34c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d007      	beq.n	800275a <HAL_GPIO_Init+0x21e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4f      	ldr	r2, [pc, #316]	@ (800288c <HAL_GPIO_Init+0x350>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d101      	bne.n	8002756 <HAL_GPIO_Init+0x21a>
 8002752:	2309      	movs	r3, #9
 8002754:	e012      	b.n	800277c <HAL_GPIO_Init+0x240>
 8002756:	230a      	movs	r3, #10
 8002758:	e010      	b.n	800277c <HAL_GPIO_Init+0x240>
 800275a:	2308      	movs	r3, #8
 800275c:	e00e      	b.n	800277c <HAL_GPIO_Init+0x240>
 800275e:	2307      	movs	r3, #7
 8002760:	e00c      	b.n	800277c <HAL_GPIO_Init+0x240>
 8002762:	2306      	movs	r3, #6
 8002764:	e00a      	b.n	800277c <HAL_GPIO_Init+0x240>
 8002766:	2305      	movs	r3, #5
 8002768:	e008      	b.n	800277c <HAL_GPIO_Init+0x240>
 800276a:	2304      	movs	r3, #4
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x240>
 800276e:	2303      	movs	r3, #3
 8002770:	e004      	b.n	800277c <HAL_GPIO_Init+0x240>
 8002772:	2302      	movs	r3, #2
 8002774:	e002      	b.n	800277c <HAL_GPIO_Init+0x240>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <HAL_GPIO_Init+0x240>
 800277a:	2300      	movs	r3, #0
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	f002 0203 	and.w	r2, r2, #3
 8002782:	0092      	lsls	r2, r2, #2
 8002784:	4093      	lsls	r3, r2
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800278c:	4935      	ldr	r1, [pc, #212]	@ (8002864 <HAL_GPIO_Init+0x328>)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	089b      	lsrs	r3, r3, #2
 8002792:	3302      	adds	r3, #2
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800279a:	4b3d      	ldr	r3, [pc, #244]	@ (8002890 <HAL_GPIO_Init+0x354>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027be:	4a34      	ldr	r2, [pc, #208]	@ (8002890 <HAL_GPIO_Init+0x354>)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027c4:	4b32      	ldr	r3, [pc, #200]	@ (8002890 <HAL_GPIO_Init+0x354>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027e8:	4a29      	ldr	r2, [pc, #164]	@ (8002890 <HAL_GPIO_Init+0x354>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ee:	4b28      	ldr	r3, [pc, #160]	@ (8002890 <HAL_GPIO_Init+0x354>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002812:	4a1f      	ldr	r2, [pc, #124]	@ (8002890 <HAL_GPIO_Init+0x354>)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002818:	4b1d      	ldr	r3, [pc, #116]	@ (8002890 <HAL_GPIO_Init+0x354>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800283c:	4a14      	ldr	r2, [pc, #80]	@ (8002890 <HAL_GPIO_Init+0x354>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3301      	adds	r3, #1
 8002846:	61fb      	str	r3, [r7, #28]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2b0f      	cmp	r3, #15
 800284c:	f67f ae86 	bls.w	800255c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	3724      	adds	r7, #36	@ 0x24
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800
 8002864:	40013800 	.word	0x40013800
 8002868:	40020000 	.word	0x40020000
 800286c:	40020400 	.word	0x40020400
 8002870:	40020800 	.word	0x40020800
 8002874:	40020c00 	.word	0x40020c00
 8002878:	40021000 	.word	0x40021000
 800287c:	40021400 	.word	0x40021400
 8002880:	40021800 	.word	0x40021800
 8002884:	40021c00 	.word	0x40021c00
 8002888:	40022000 	.word	0x40022000
 800288c:	40022400 	.word	0x40022400
 8002890:	40013c00 	.word	0x40013c00

08002894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	807b      	strh	r3, [r7, #2]
 80028a0:	4613      	mov	r3, r2
 80028a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028a4:	787b      	ldrb	r3, [r7, #1]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028aa:	887a      	ldrh	r2, [r7, #2]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028b0:	e003      	b.n	80028ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028b2:	887b      	ldrh	r3, [r7, #2]
 80028b4:	041a      	lsls	r2, r3, #16
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	619a      	str	r2, [r3, #24]
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028d2:	4b08      	ldr	r3, [pc, #32]	@ (80028f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028d4:	695a      	ldr	r2, [r3, #20]
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	4013      	ands	r3, r2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d006      	beq.n	80028ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028de:	4a05      	ldr	r2, [pc, #20]	@ (80028f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028e0:	88fb      	ldrh	r3, [r7, #6]
 80028e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 f806 	bl	80028f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80028ec:	bf00      	nop
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40013c00 	.word	0x40013c00

080028f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e07f      	b.n	8002a22 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d106      	bne.n	800293c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7fe fe00 	bl	800153c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2224      	movs	r2, #36	@ 0x24
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0201 	bic.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002960:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002970:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d107      	bne.n	800298a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	e006      	b.n	8002998 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002996:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	2b02      	cmp	r3, #2
 800299e:	d104      	bne.n	80029aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6859      	ldr	r1, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a2c <HAL_I2C_Init+0x11c>)
 80029b6:	430b      	orrs	r3, r1
 80029b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69d9      	ldr	r1, [r3, #28]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1a      	ldr	r2, [r3, #32]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	02008000 	.word	0x02008000

08002a30 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	817b      	strh	r3, [r7, #10]
 8002a40:	4613      	mov	r3, r2
 8002a42:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	f040 80da 	bne.w	8002c06 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_I2C_Master_Transmit+0x30>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e0d3      	b.n	8002c08 <HAL_I2C_Master_Transmit+0x1d8>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a68:	f7ff fc26 	bl	80022b8 <HAL_GetTick>
 8002a6c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	2319      	movs	r3, #25
 8002a74:	2201      	movs	r2, #1
 8002a76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 fdc4 	bl	8003608 <I2C_WaitOnFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e0be      	b.n	8002c08 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2221      	movs	r2, #33	@ 0x21
 8002a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2210      	movs	r2, #16
 8002a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	893a      	ldrh	r2, [r7, #8]
 8002aaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2bff      	cmp	r3, #255	@ 0xff
 8002aba:	d90e      	bls.n	8002ada <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	22ff      	movs	r2, #255	@ 0xff
 8002ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	8979      	ldrh	r1, [r7, #10]
 8002aca:	4b51      	ldr	r3, [pc, #324]	@ (8002c10 <HAL_I2C_Master_Transmit+0x1e0>)
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 ffae 	bl	8003a34 <I2C_TransferConfig>
 8002ad8:	e06c      	b.n	8002bb4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	8979      	ldrh	r1, [r7, #10]
 8002aec:	4b48      	ldr	r3, [pc, #288]	@ (8002c10 <HAL_I2C_Master_Transmit+0x1e0>)
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 ff9d 	bl	8003a34 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002afa:	e05b      	b.n	8002bb4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	6a39      	ldr	r1, [r7, #32]
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 fdc1 	bl	8003688 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e07b      	b.n	8002c08 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b14:	781a      	ldrb	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d034      	beq.n	8002bb4 <HAL_I2C_Master_Transmit+0x184>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d130      	bne.n	8002bb4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2180      	movs	r1, #128	@ 0x80
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 fd53 	bl	8003608 <I2C_WaitOnFlagUntilTimeout>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e04d      	b.n	8002c08 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2bff      	cmp	r3, #255	@ 0xff
 8002b74:	d90e      	bls.n	8002b94 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	22ff      	movs	r2, #255	@ 0xff
 8002b7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	8979      	ldrh	r1, [r7, #10]
 8002b84:	2300      	movs	r3, #0
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 ff51 	bl	8003a34 <I2C_TransferConfig>
 8002b92:	e00f      	b.n	8002bb4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	8979      	ldrh	r1, [r7, #10]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 ff40 	bl	8003a34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d19e      	bne.n	8002afc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	6a39      	ldr	r1, [r7, #32]
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 fda0 	bl	8003708 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e01a      	b.n	8002c08 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c14 <HAL_I2C_Master_Transmit+0x1e4>)
 8002be6:	400b      	ands	r3, r1
 8002be8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	e000      	b.n	8002c08 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002c06:	2302      	movs	r3, #2
  }
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	80002000 	.word	0x80002000
 8002c14:	fe00e800 	.word	0xfe00e800

08002c18 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	607a      	str	r2, [r7, #4]
 8002c22:	461a      	mov	r2, r3
 8002c24:	460b      	mov	r3, r1
 8002c26:	817b      	strh	r3, [r7, #10]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	f040 80db 	bne.w	8002df0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <HAL_I2C_Master_Receive+0x30>
 8002c44:	2302      	movs	r3, #2
 8002c46:	e0d4      	b.n	8002df2 <HAL_I2C_Master_Receive+0x1da>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c50:	f7ff fb32 	bl	80022b8 <HAL_GetTick>
 8002c54:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	2319      	movs	r3, #25
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 fcd0 	bl	8003608 <I2C_WaitOnFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e0bf      	b.n	8002df2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2222      	movs	r2, #34	@ 0x22
 8002c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2210      	movs	r2, #16
 8002c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	893a      	ldrh	r2, [r7, #8]
 8002c92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	2bff      	cmp	r3, #255	@ 0xff
 8002ca2:	d90e      	bls.n	8002cc2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	22ff      	movs	r2, #255	@ 0xff
 8002ca8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	8979      	ldrh	r1, [r7, #10]
 8002cb2:	4b52      	ldr	r3, [pc, #328]	@ (8002dfc <HAL_I2C_Master_Receive+0x1e4>)
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 feba 	bl	8003a34 <I2C_TransferConfig>
 8002cc0:	e06d      	b.n	8002d9e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	8979      	ldrh	r1, [r7, #10]
 8002cd4:	4b49      	ldr	r3, [pc, #292]	@ (8002dfc <HAL_I2C_Master_Receive+0x1e4>)
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 fea9 	bl	8003a34 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002ce2:	e05c      	b.n	8002d9e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	6a39      	ldr	r1, [r7, #32]
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fd49 	bl	8003780 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e07c      	b.n	8002df2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d034      	beq.n	8002d9e <HAL_I2C_Master_Receive+0x186>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d130      	bne.n	8002d9e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	2200      	movs	r2, #0
 8002d44:	2180      	movs	r1, #128	@ 0x80
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 fc5e 	bl	8003608 <I2C_WaitOnFlagUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e04d      	b.n	8002df2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2bff      	cmp	r3, #255	@ 0xff
 8002d5e:	d90e      	bls.n	8002d7e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	22ff      	movs	r2, #255	@ 0xff
 8002d64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	8979      	ldrh	r1, [r7, #10]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 fe5c 	bl	8003a34 <I2C_TransferConfig>
 8002d7c:	e00f      	b.n	8002d9e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	8979      	ldrh	r1, [r7, #10]
 8002d90:	2300      	movs	r3, #0
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 fe4b 	bl	8003a34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d19d      	bne.n	8002ce4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	6a39      	ldr	r1, [r7, #32]
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 fcab 	bl	8003708 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e01a      	b.n	8002df2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6859      	ldr	r1, [r3, #4]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	4b0c      	ldr	r3, [pc, #48]	@ (8002e00 <HAL_I2C_Master_Receive+0x1e8>)
 8002dd0:	400b      	ands	r3, r1
 8002dd2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	e000      	b.n	8002df2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002df0:	2302      	movs	r3, #2
  }
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	80002400 	.word	0x80002400
 8002e00:	fe00e800 	.word	0xfe00e800

08002e04 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	4608      	mov	r0, r1
 8002e0e:	4611      	mov	r1, r2
 8002e10:	461a      	mov	r2, r3
 8002e12:	4603      	mov	r3, r0
 8002e14:	817b      	strh	r3, [r7, #10]
 8002e16:	460b      	mov	r3, r1
 8002e18:	813b      	strh	r3, [r7, #8]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b20      	cmp	r3, #32
 8002e28:	f040 80f9 	bne.w	800301e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <HAL_I2C_Mem_Write+0x34>
 8002e32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d105      	bne.n	8002e44 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e3e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0ed      	b.n	8003020 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_I2C_Mem_Write+0x4e>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e0e6      	b.n	8003020 <HAL_I2C_Mem_Write+0x21c>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e5a:	f7ff fa2d 	bl	80022b8 <HAL_GetTick>
 8002e5e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	2319      	movs	r3, #25
 8002e66:	2201      	movs	r2, #1
 8002e68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fbcb 	bl	8003608 <I2C_WaitOnFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0d1      	b.n	8003020 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2221      	movs	r2, #33	@ 0x21
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2240      	movs	r2, #64	@ 0x40
 8002e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a3a      	ldr	r2, [r7, #32]
 8002e96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ea4:	88f8      	ldrh	r0, [r7, #6]
 8002ea6:	893a      	ldrh	r2, [r7, #8]
 8002ea8:	8979      	ldrh	r1, [r7, #10]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	9301      	str	r3, [sp, #4]
 8002eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 fadb 	bl	8003470 <I2C_RequestMemoryWrite>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0a9      	b.n	8003020 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2bff      	cmp	r3, #255	@ 0xff
 8002ed4:	d90e      	bls.n	8002ef4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	22ff      	movs	r2, #255	@ 0xff
 8002eda:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	8979      	ldrh	r1, [r7, #10]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 fda1 	bl	8003a34 <I2C_TransferConfig>
 8002ef2:	e00f      	b.n	8002f14 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	8979      	ldrh	r1, [r7, #10]
 8002f06:	2300      	movs	r3, #0
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 fd90 	bl	8003a34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 fbb5 	bl	8003688 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e07b      	b.n	8003020 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	781a      	ldrb	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d034      	beq.n	8002fcc <HAL_I2C_Mem_Write+0x1c8>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d130      	bne.n	8002fcc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f70:	2200      	movs	r2, #0
 8002f72:	2180      	movs	r1, #128	@ 0x80
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 fb47 	bl	8003608 <I2C_WaitOnFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e04d      	b.n	8003020 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2bff      	cmp	r3, #255	@ 0xff
 8002f8c:	d90e      	bls.n	8002fac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	22ff      	movs	r2, #255	@ 0xff
 8002f92:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	8979      	ldrh	r1, [r7, #10]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 fd45 	bl	8003a34 <I2C_TransferConfig>
 8002faa:	e00f      	b.n	8002fcc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	8979      	ldrh	r1, [r7, #10]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 fd34 	bl	8003a34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d19e      	bne.n	8002f14 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 fb94 	bl	8003708 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e01a      	b.n	8003020 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8003028 <HAL_I2C_Mem_Write+0x224>)
 8002ffe:	400b      	ands	r3, r1
 8003000:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800301e:	2302      	movs	r3, #2
  }
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	fe00e800 	.word	0xfe00e800

0800302c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af02      	add	r7, sp, #8
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	4608      	mov	r0, r1
 8003036:	4611      	mov	r1, r2
 8003038:	461a      	mov	r2, r3
 800303a:	4603      	mov	r3, r0
 800303c:	817b      	strh	r3, [r7, #10]
 800303e:	460b      	mov	r3, r1
 8003040:	813b      	strh	r3, [r7, #8]
 8003042:	4613      	mov	r3, r2
 8003044:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b20      	cmp	r3, #32
 8003050:	f040 80fd 	bne.w	800324e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_I2C_Mem_Read+0x34>
 800305a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800305c:	2b00      	cmp	r3, #0
 800305e:	d105      	bne.n	800306c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003066:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e0f1      	b.n	8003250 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003072:	2b01      	cmp	r3, #1
 8003074:	d101      	bne.n	800307a <HAL_I2C_Mem_Read+0x4e>
 8003076:	2302      	movs	r3, #2
 8003078:	e0ea      	b.n	8003250 <HAL_I2C_Mem_Read+0x224>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003082:	f7ff f919 	bl	80022b8 <HAL_GetTick>
 8003086:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	2319      	movs	r3, #25
 800308e:	2201      	movs	r2, #1
 8003090:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 fab7 	bl	8003608 <I2C_WaitOnFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0d5      	b.n	8003250 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2222      	movs	r2, #34	@ 0x22
 80030a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2240      	movs	r2, #64	@ 0x40
 80030b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a3a      	ldr	r2, [r7, #32]
 80030be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80030c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030cc:	88f8      	ldrh	r0, [r7, #6]
 80030ce:	893a      	ldrh	r2, [r7, #8]
 80030d0:	8979      	ldrh	r1, [r7, #10]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	9301      	str	r3, [sp, #4]
 80030d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	4603      	mov	r3, r0
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 fa1b 	bl	8003518 <I2C_RequestMemoryRead>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0ad      	b.n	8003250 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2bff      	cmp	r3, #255	@ 0xff
 80030fc:	d90e      	bls.n	800311c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	22ff      	movs	r2, #255	@ 0xff
 8003102:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003108:	b2da      	uxtb	r2, r3
 800310a:	8979      	ldrh	r1, [r7, #10]
 800310c:	4b52      	ldr	r3, [pc, #328]	@ (8003258 <HAL_I2C_Mem_Read+0x22c>)
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 fc8d 	bl	8003a34 <I2C_TransferConfig>
 800311a:	e00f      	b.n	800313c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312a:	b2da      	uxtb	r2, r3
 800312c:	8979      	ldrh	r1, [r7, #10]
 800312e:	4b4a      	ldr	r3, [pc, #296]	@ (8003258 <HAL_I2C_Mem_Read+0x22c>)
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 fc7c 	bl	8003a34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003142:	2200      	movs	r2, #0
 8003144:	2104      	movs	r1, #4
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 fa5e 	bl	8003608 <I2C_WaitOnFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e07c      	b.n	8003250 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d034      	beq.n	80031fc <HAL_I2C_Mem_Read+0x1d0>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003196:	2b00      	cmp	r3, #0
 8003198:	d130      	bne.n	80031fc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a0:	2200      	movs	r2, #0
 80031a2:	2180      	movs	r1, #128	@ 0x80
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 fa2f 	bl	8003608 <I2C_WaitOnFlagUntilTimeout>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e04d      	b.n	8003250 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2bff      	cmp	r3, #255	@ 0xff
 80031bc:	d90e      	bls.n	80031dc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	22ff      	movs	r2, #255	@ 0xff
 80031c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	8979      	ldrh	r1, [r7, #10]
 80031cc:	2300      	movs	r3, #0
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 fc2d 	bl	8003a34 <I2C_TransferConfig>
 80031da:	e00f      	b.n	80031fc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	8979      	ldrh	r1, [r7, #10]
 80031ee:	2300      	movs	r3, #0
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 fc1c 	bl	8003a34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d19a      	bne.n	800313c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 fa7c 	bl	8003708 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e01a      	b.n	8003250 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2220      	movs	r2, #32
 8003220:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6859      	ldr	r1, [r3, #4]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4b0b      	ldr	r3, [pc, #44]	@ (800325c <HAL_I2C_Mem_Read+0x230>)
 800322e:	400b      	ands	r3, r1
 8003230:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	e000      	b.n	8003250 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800324e:	2302      	movs	r3, #2
  }
}
 8003250:	4618      	mov	r0, r3
 8003252:	3718      	adds	r7, #24
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	80002400 	.word	0x80002400
 800325c:	fe00e800 	.word	0xfe00e800

08003260 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08a      	sub	sp, #40	@ 0x28
 8003264:	af02      	add	r7, sp, #8
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	460b      	mov	r3, r1
 800326e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b20      	cmp	r3, #32
 800327e:	f040 80ef 	bne.w	8003460 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800328c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003290:	d101      	bne.n	8003296 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003292:	2302      	movs	r3, #2
 8003294:	e0e5      	b.n	8003462 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_I2C_IsDeviceReady+0x44>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e0de      	b.n	8003462 <HAL_I2C_IsDeviceReady+0x202>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2224      	movs	r2, #36	@ 0x24
 80032b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d105      	bne.n	80032ce <HAL_I2C_IsDeviceReady+0x6e>
 80032c2:	897b      	ldrh	r3, [r7, #10]
 80032c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032c8:	4b68      	ldr	r3, [pc, #416]	@ (800346c <HAL_I2C_IsDeviceReady+0x20c>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	e004      	b.n	80032d8 <HAL_I2C_IsDeviceReady+0x78>
 80032ce:	897b      	ldrh	r3, [r7, #10]
 80032d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032d4:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80032de:	f7fe ffeb 	bl	80022b8 <HAL_GetTick>
 80032e2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b20      	cmp	r3, #32
 80032f0:	bf0c      	ite	eq
 80032f2:	2301      	moveq	r3, #1
 80032f4:	2300      	movne	r3, #0
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	f003 0310 	and.w	r3, r3, #16
 8003304:	2b10      	cmp	r3, #16
 8003306:	bf0c      	ite	eq
 8003308:	2301      	moveq	r3, #1
 800330a:	2300      	movne	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003310:	e034      	b.n	800337c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003318:	d01a      	beq.n	8003350 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800331a:	f7fe ffcd 	bl	80022b8 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d302      	bcc.n	8003330 <HAL_I2C_IsDeviceReady+0xd0>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10f      	bne.n	8003350 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333c:	f043 0220 	orr.w	r2, r3, #32
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e088      	b.n	8003462 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b20      	cmp	r3, #32
 800335c:	bf0c      	ite	eq
 800335e:	2301      	moveq	r3, #1
 8003360:	2300      	movne	r3, #0
 8003362:	b2db      	uxtb	r3, r3
 8003364:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b10      	cmp	r3, #16
 8003372:	bf0c      	ite	eq
 8003374:	2301      	moveq	r3, #1
 8003376:	2300      	movne	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800337c:	7ffb      	ldrb	r3, [r7, #31]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d102      	bne.n	8003388 <HAL_I2C_IsDeviceReady+0x128>
 8003382:	7fbb      	ldrb	r3, [r7, #30]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0c4      	beq.n	8003312 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b10      	cmp	r3, #16
 8003394:	d01a      	beq.n	80033cc <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2200      	movs	r2, #0
 800339e:	2120      	movs	r1, #32
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f931 	bl	8003608 <I2C_WaitOnFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e058      	b.n	8003462 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2220      	movs	r2, #32
 80033b6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	e04a      	b.n	8003462 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2200      	movs	r2, #0
 80033d4:	2120      	movs	r1, #32
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f916 	bl	8003608 <I2C_WaitOnFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e03d      	b.n	8003462 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2210      	movs	r2, #16
 80033ec:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2220      	movs	r2, #32
 80033f4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d118      	bne.n	8003430 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800340c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2200      	movs	r2, #0
 8003416:	2120      	movs	r1, #32
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 f8f5 	bl	8003608 <I2C_WaitOnFlagUntilTimeout>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e01c      	b.n	8003462 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2220      	movs	r2, #32
 800342e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	3301      	adds	r3, #1
 8003434:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	429a      	cmp	r2, r3
 800343c:	f63f af3d 	bhi.w	80032ba <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344c:	f043 0220 	orr.w	r2, r3, #32
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8003460:	2302      	movs	r3, #2
  }
}
 8003462:	4618      	mov	r0, r3
 8003464:	3720      	adds	r7, #32
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	02002000 	.word	0x02002000

08003470 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af02      	add	r7, sp, #8
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	4608      	mov	r0, r1
 800347a:	4611      	mov	r1, r2
 800347c:	461a      	mov	r2, r3
 800347e:	4603      	mov	r3, r0
 8003480:	817b      	strh	r3, [r7, #10]
 8003482:	460b      	mov	r3, r1
 8003484:	813b      	strh	r3, [r7, #8]
 8003486:	4613      	mov	r3, r2
 8003488:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	8979      	ldrh	r1, [r7, #10]
 8003490:	4b20      	ldr	r3, [pc, #128]	@ (8003514 <I2C_RequestMemoryWrite+0xa4>)
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 facb 	bl	8003a34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	69b9      	ldr	r1, [r7, #24]
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f8f0 	bl	8003688 <I2C_WaitOnTXISFlagUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e02c      	b.n	800350c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034b2:	88fb      	ldrh	r3, [r7, #6]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d105      	bne.n	80034c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034b8:	893b      	ldrh	r3, [r7, #8]
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80034c2:	e015      	b.n	80034f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034c4:	893b      	ldrh	r3, [r7, #8]
 80034c6:	0a1b      	lsrs	r3, r3, #8
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034d2:	69fa      	ldr	r2, [r7, #28]
 80034d4:	69b9      	ldr	r1, [r7, #24]
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 f8d6 	bl	8003688 <I2C_WaitOnTXISFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e012      	b.n	800350c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034e6:	893b      	ldrh	r3, [r7, #8]
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2200      	movs	r2, #0
 80034f8:	2180      	movs	r1, #128	@ 0x80
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 f884 	bl	8003608 <I2C_WaitOnFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	80002000 	.word	0x80002000

08003518 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af02      	add	r7, sp, #8
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	4608      	mov	r0, r1
 8003522:	4611      	mov	r1, r2
 8003524:	461a      	mov	r2, r3
 8003526:	4603      	mov	r3, r0
 8003528:	817b      	strh	r3, [r7, #10]
 800352a:	460b      	mov	r3, r1
 800352c:	813b      	strh	r3, [r7, #8]
 800352e:	4613      	mov	r3, r2
 8003530:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	b2da      	uxtb	r2, r3
 8003536:	8979      	ldrh	r1, [r7, #10]
 8003538:	4b20      	ldr	r3, [pc, #128]	@ (80035bc <I2C_RequestMemoryRead+0xa4>)
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	2300      	movs	r3, #0
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 fa78 	bl	8003a34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003544:	69fa      	ldr	r2, [r7, #28]
 8003546:	69b9      	ldr	r1, [r7, #24]
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 f89d 	bl	8003688 <I2C_WaitOnTXISFlagUntilTimeout>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e02c      	b.n	80035b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003558:	88fb      	ldrh	r3, [r7, #6]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d105      	bne.n	800356a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800355e:	893b      	ldrh	r3, [r7, #8]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	629a      	str	r2, [r3, #40]	@ 0x28
 8003568:	e015      	b.n	8003596 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800356a:	893b      	ldrh	r3, [r7, #8]
 800356c:	0a1b      	lsrs	r3, r3, #8
 800356e:	b29b      	uxth	r3, r3
 8003570:	b2da      	uxtb	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003578:	69fa      	ldr	r2, [r7, #28]
 800357a:	69b9      	ldr	r1, [r7, #24]
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f883 	bl	8003688 <I2C_WaitOnTXISFlagUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e012      	b.n	80035b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800358c:	893b      	ldrh	r3, [r7, #8]
 800358e:	b2da      	uxtb	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	2200      	movs	r2, #0
 800359e:	2140      	movs	r1, #64	@ 0x40
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f831 	bl	8003608 <I2C_WaitOnFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e000      	b.n	80035b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	80002000 	.word	0x80002000

080035c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d103      	bne.n	80035de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2200      	movs	r2, #0
 80035dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d007      	beq.n	80035fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699a      	ldr	r2, [r3, #24]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	619a      	str	r2, [r3, #24]
  }
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	4613      	mov	r3, r2
 8003616:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003618:	e022      	b.n	8003660 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003620:	d01e      	beq.n	8003660 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003622:	f7fe fe49 	bl	80022b8 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d302      	bcc.n	8003638 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d113      	bne.n	8003660 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e00f      	b.n	8003680 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699a      	ldr	r2, [r3, #24]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	4013      	ands	r3, r2
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	429a      	cmp	r2, r3
 800366e:	bf0c      	ite	eq
 8003670:	2301      	moveq	r3, #1
 8003672:	2300      	movne	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	461a      	mov	r2, r3
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	429a      	cmp	r2, r3
 800367c:	d0cd      	beq.n	800361a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003694:	e02c      	b.n	80036f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	68b9      	ldr	r1, [r7, #8]
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f8ea 	bl	8003874 <I2C_IsErrorOccurred>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e02a      	b.n	8003700 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d01e      	beq.n	80036f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b2:	f7fe fe01 	bl	80022b8 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d302      	bcc.n	80036c8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d113      	bne.n	80036f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036cc:	f043 0220 	orr.w	r2, r3, #32
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e007      	b.n	8003700 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d1cb      	bne.n	8003696 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003714:	e028      	b.n	8003768 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	68b9      	ldr	r1, [r7, #8]
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 f8aa 	bl	8003874 <I2C_IsErrorOccurred>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e026      	b.n	8003778 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372a:	f7fe fdc5 	bl	80022b8 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	429a      	cmp	r2, r3
 8003738:	d302      	bcc.n	8003740 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d113      	bne.n	8003768 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003744:	f043 0220 	orr.w	r2, r3, #32
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e007      	b.n	8003778 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	f003 0320 	and.w	r3, r3, #32
 8003772:	2b20      	cmp	r3, #32
 8003774:	d1cf      	bne.n	8003716 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800378c:	e064      	b.n	8003858 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	68b9      	ldr	r1, [r7, #8]
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 f86e 	bl	8003874 <I2C_IsErrorOccurred>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e062      	b.n	8003868 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	f003 0320 	and.w	r3, r3, #32
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d138      	bne.n	8003822 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	f003 0304 	and.w	r3, r3, #4
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d105      	bne.n	80037ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e04e      	b.n	8003868 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b10      	cmp	r3, #16
 80037d6:	d107      	bne.n	80037e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2210      	movs	r2, #16
 80037de:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2204      	movs	r2, #4
 80037e4:	645a      	str	r2, [r3, #68]	@ 0x44
 80037e6:	e002      	b.n	80037ee <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2220      	movs	r2, #32
 80037f4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6859      	ldr	r1, [r3, #4]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	4b1b      	ldr	r3, [pc, #108]	@ (8003870 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003802:	400b      	ands	r3, r1
 8003804:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e022      	b.n	8003868 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003822:	f7fe fd49 	bl	80022b8 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	429a      	cmp	r2, r3
 8003830:	d302      	bcc.n	8003838 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10f      	bne.n	8003858 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383c:	f043 0220 	orr.w	r2, r3, #32
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e007      	b.n	8003868 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	2b04      	cmp	r3, #4
 8003864:	d193      	bne.n	800378e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	fe00e800 	.word	0xfe00e800

08003874 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08a      	sub	sp, #40	@ 0x28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b00      	cmp	r3, #0
 800389e:	d068      	beq.n	8003972 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2210      	movs	r2, #16
 80038a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038a8:	e049      	b.n	800393e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b0:	d045      	beq.n	800393e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038b2:	f7fe fd01 	bl	80022b8 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d302      	bcc.n	80038c8 <I2C_IsErrorOccurred+0x54>
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d13a      	bne.n	800393e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038ea:	d121      	bne.n	8003930 <I2C_IsErrorOccurred+0xbc>
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038f2:	d01d      	beq.n	8003930 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	2b20      	cmp	r3, #32
 80038f8:	d01a      	beq.n	8003930 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003908:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800390a:	f7fe fcd5 	bl	80022b8 <HAL_GetTick>
 800390e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003910:	e00e      	b.n	8003930 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003912:	f7fe fcd1 	bl	80022b8 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b19      	cmp	r3, #25
 800391e:	d907      	bls.n	8003930 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	f043 0320 	orr.w	r3, r3, #32
 8003926:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800392e:	e006      	b.n	800393e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b20      	cmp	r3, #32
 800393c:	d1e9      	bne.n	8003912 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b20      	cmp	r3, #32
 800394a:	d003      	beq.n	8003954 <I2C_IsErrorOccurred+0xe0>
 800394c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0aa      	beq.n	80038aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003958:	2b00      	cmp	r3, #0
 800395a:	d103      	bne.n	8003964 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2220      	movs	r2, #32
 8003962:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	f043 0304 	orr.w	r3, r3, #4
 800396a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00b      	beq.n	800399c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003994:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00b      	beq.n	80039be <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	f043 0308 	orr.w	r3, r3, #8
 80039ac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00b      	beq.n	80039e0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	f043 0302 	orr.w	r3, r3, #2
 80039ce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80039e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01c      	beq.n	8003a22 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f7ff fde9 	bl	80035c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6859      	ldr	r1, [r3, #4]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003a30 <I2C_IsErrorOccurred+0x1bc>)
 80039fa:	400b      	ands	r3, r1
 80039fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	431a      	orrs	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003a22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3728      	adds	r7, #40	@ 0x28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	fe00e800 	.word	0xfe00e800

08003a34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	607b      	str	r3, [r7, #4]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	817b      	strh	r3, [r7, #10]
 8003a42:	4613      	mov	r3, r2
 8003a44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a46:	897b      	ldrh	r3, [r7, #10]
 8003a48:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a4c:	7a7b      	ldrb	r3, [r7, #9]
 8003a4e:	041b      	lsls	r3, r3, #16
 8003a50:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a54:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a62:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	0d5b      	lsrs	r3, r3, #21
 8003a6e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003a72:	4b08      	ldr	r3, [pc, #32]	@ (8003a94 <I2C_TransferConfig+0x60>)
 8003a74:	430b      	orrs	r3, r1
 8003a76:	43db      	mvns	r3, r3
 8003a78:	ea02 0103 	and.w	r1, r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a86:	bf00      	nop
 8003a88:	371c      	adds	r7, #28
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	03ff63ff 	.word	0x03ff63ff

08003a98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d138      	bne.n	8003b20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e032      	b.n	8003b22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2224      	movs	r2, #36	@ 0x24
 8003ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0201 	bic.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003aea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6819      	ldr	r1, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e000      	b.n	8003b22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b20:	2302      	movs	r3, #2
  }
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b085      	sub	sp, #20
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d139      	bne.n	8003bb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e033      	b.n	8003bba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2224      	movs	r2, #36	@ 0x24
 8003b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0201 	bic.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003b80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	021b      	lsls	r3, r3, #8
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	e000      	b.n	8003bba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003bb8:	2302      	movs	r3, #2
  }
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bcc:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a04      	ldr	r2, [pc, #16]	@ (8003be4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bd6:	6013      	str	r3, [r2, #0]
}
 8003bd8:	bf00      	nop
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40007000 	.word	0x40007000

08003be8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003bf2:	4b23      	ldr	r3, [pc, #140]	@ (8003c80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf6:	4a22      	ldr	r2, [pc, #136]	@ (8003c80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bfe:	4b20      	ldr	r3, [pc, #128]	@ (8003c80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c06:	603b      	str	r3, [r7, #0]
 8003c08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003c84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a1d      	ldr	r2, [pc, #116]	@ (8003c84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c14:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c16:	f7fe fb4f 	bl	80022b8 <HAL_GetTick>
 8003c1a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c1c:	e009      	b.n	8003c32 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c1e:	f7fe fb4b 	bl	80022b8 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c2c:	d901      	bls.n	8003c32 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e022      	b.n	8003c78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c32:	4b14      	ldr	r3, [pc, #80]	@ (8003c84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c3e:	d1ee      	bne.n	8003c1e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c40:	4b10      	ldr	r3, [pc, #64]	@ (8003c84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a0f      	ldr	r2, [pc, #60]	@ (8003c84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c4c:	f7fe fb34 	bl	80022b8 <HAL_GetTick>
 8003c50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c52:	e009      	b.n	8003c68 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c54:	f7fe fb30 	bl	80022b8 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c62:	d901      	bls.n	8003c68 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e007      	b.n	8003c78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c68:	4b06      	ldr	r3, [pc, #24]	@ (8003c84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c74:	d1ee      	bne.n	8003c54 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40023800 	.word	0x40023800
 8003c84:	40007000 	.word	0x40007000

08003c88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c90:	2300      	movs	r3, #0
 8003c92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e291      	b.n	80041c2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 8087 	beq.w	8003dba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cac:	4b96      	ldr	r3, [pc, #600]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 030c 	and.w	r3, r3, #12
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d00c      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cb8:	4b93      	ldr	r3, [pc, #588]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 030c 	and.w	r3, r3, #12
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d112      	bne.n	8003cea <HAL_RCC_OscConfig+0x62>
 8003cc4:	4b90      	ldr	r3, [pc, #576]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ccc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cd0:	d10b      	bne.n	8003cea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd2:	4b8d      	ldr	r3, [pc, #564]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d06c      	beq.n	8003db8 <HAL_RCC_OscConfig+0x130>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d168      	bne.n	8003db8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e26b      	b.n	80041c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cf2:	d106      	bne.n	8003d02 <HAL_RCC_OscConfig+0x7a>
 8003cf4:	4b84      	ldr	r3, [pc, #528]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a83      	ldr	r2, [pc, #524]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003cfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	e02e      	b.n	8003d60 <HAL_RCC_OscConfig+0xd8>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10c      	bne.n	8003d24 <HAL_RCC_OscConfig+0x9c>
 8003d0a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a7e      	ldr	r2, [pc, #504]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003d10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	4b7c      	ldr	r3, [pc, #496]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a7b      	ldr	r2, [pc, #492]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003d1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	e01d      	b.n	8003d60 <HAL_RCC_OscConfig+0xd8>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d2c:	d10c      	bne.n	8003d48 <HAL_RCC_OscConfig+0xc0>
 8003d2e:	4b76      	ldr	r3, [pc, #472]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a75      	ldr	r2, [pc, #468]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003d34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	4b73      	ldr	r3, [pc, #460]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a72      	ldr	r2, [pc, #456]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	e00b      	b.n	8003d60 <HAL_RCC_OscConfig+0xd8>
 8003d48:	4b6f      	ldr	r3, [pc, #444]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a6e      	ldr	r2, [pc, #440]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003d4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	4b6c      	ldr	r3, [pc, #432]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a6b      	ldr	r2, [pc, #428]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003d5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d013      	beq.n	8003d90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d68:	f7fe faa6 	bl	80022b8 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d70:	f7fe faa2 	bl	80022b8 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b64      	cmp	r3, #100	@ 0x64
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e21f      	b.n	80041c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d82:	4b61      	ldr	r3, [pc, #388]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0xe8>
 8003d8e:	e014      	b.n	8003dba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d90:	f7fe fa92 	bl	80022b8 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d98:	f7fe fa8e 	bl	80022b8 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b64      	cmp	r3, #100	@ 0x64
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e20b      	b.n	80041c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003daa:	4b57      	ldr	r3, [pc, #348]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x110>
 8003db6:	e000      	b.n	8003dba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d069      	beq.n	8003e9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dc6:	4b50      	ldr	r3, [pc, #320]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00b      	beq.n	8003dea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dd2:	4b4d      	ldr	r3, [pc, #308]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 030c 	and.w	r3, r3, #12
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d11c      	bne.n	8003e18 <HAL_RCC_OscConfig+0x190>
 8003dde:	4b4a      	ldr	r3, [pc, #296]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d116      	bne.n	8003e18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dea:	4b47      	ldr	r3, [pc, #284]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d005      	beq.n	8003e02 <HAL_RCC_OscConfig+0x17a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d001      	beq.n	8003e02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e1df      	b.n	80041c2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e02:	4b41      	ldr	r3, [pc, #260]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	493d      	ldr	r1, [pc, #244]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e16:	e040      	b.n	8003e9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d023      	beq.n	8003e68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e20:	4b39      	ldr	r3, [pc, #228]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a38      	ldr	r2, [pc, #224]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2c:	f7fe fa44 	bl	80022b8 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e34:	f7fe fa40 	bl	80022b8 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e1bd      	b.n	80041c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e46:	4b30      	ldr	r3, [pc, #192]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f0      	beq.n	8003e34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e52:	4b2d      	ldr	r3, [pc, #180]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4929      	ldr	r1, [pc, #164]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	600b      	str	r3, [r1, #0]
 8003e66:	e018      	b.n	8003e9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e68:	4b27      	ldr	r3, [pc, #156]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a26      	ldr	r2, [pc, #152]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
 8003e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e74:	f7fe fa20 	bl	80022b8 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e7c:	f7fe fa1c 	bl	80022b8 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e199      	b.n	80041c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f0      	bne.n	8003e7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d038      	beq.n	8003f18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d019      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eae:	4b16      	ldr	r3, [pc, #88]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eb2:	4a15      	ldr	r2, [pc, #84]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003eb4:	f043 0301 	orr.w	r3, r3, #1
 8003eb8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eba:	f7fe f9fd 	bl	80022b8 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ec2:	f7fe f9f9 	bl	80022b8 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e176      	b.n	80041c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003ed6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0f0      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x23a>
 8003ee0:	e01a      	b.n	8003f18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ee2:	4b09      	ldr	r3, [pc, #36]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ee6:	4a08      	ldr	r2, [pc, #32]	@ (8003f08 <HAL_RCC_OscConfig+0x280>)
 8003ee8:	f023 0301 	bic.w	r3, r3, #1
 8003eec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eee:	f7fe f9e3 	bl	80022b8 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef4:	e00a      	b.n	8003f0c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ef6:	f7fe f9df 	bl	80022b8 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d903      	bls.n	8003f0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e15c      	b.n	80041c2 <HAL_RCC_OscConfig+0x53a>
 8003f08:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f0c:	4b91      	ldr	r3, [pc, #580]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8003f0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1ee      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 80a4 	beq.w	800406e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f26:	4b8b      	ldr	r3, [pc, #556]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10d      	bne.n	8003f4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f32:	4b88      	ldr	r3, [pc, #544]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f36:	4a87      	ldr	r2, [pc, #540]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8003f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f3e:	4b85      	ldr	r3, [pc, #532]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f46:	60bb      	str	r3, [r7, #8]
 8003f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f4e:	4b82      	ldr	r3, [pc, #520]	@ (8004158 <HAL_RCC_OscConfig+0x4d0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d118      	bne.n	8003f8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f5a:	4b7f      	ldr	r3, [pc, #508]	@ (8004158 <HAL_RCC_OscConfig+0x4d0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a7e      	ldr	r2, [pc, #504]	@ (8004158 <HAL_RCC_OscConfig+0x4d0>)
 8003f60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f66:	f7fe f9a7 	bl	80022b8 <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f6c:	e008      	b.n	8003f80 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f6e:	f7fe f9a3 	bl	80022b8 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b64      	cmp	r3, #100	@ 0x64
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e120      	b.n	80041c2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f80:	4b75      	ldr	r3, [pc, #468]	@ (8004158 <HAL_RCC_OscConfig+0x4d0>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0f0      	beq.n	8003f6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d106      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x31a>
 8003f94:	4b6f      	ldr	r3, [pc, #444]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8003f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f98:	4a6e      	ldr	r2, [pc, #440]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8003f9a:	f043 0301 	orr.w	r3, r3, #1
 8003f9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fa0:	e02d      	b.n	8003ffe <HAL_RCC_OscConfig+0x376>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x33c>
 8003faa:	4b6a      	ldr	r3, [pc, #424]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8003fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fae:	4a69      	ldr	r2, [pc, #420]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8003fb0:	f023 0301 	bic.w	r3, r3, #1
 8003fb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fb6:	4b67      	ldr	r3, [pc, #412]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fba:	4a66      	ldr	r2, [pc, #408]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8003fbc:	f023 0304 	bic.w	r3, r3, #4
 8003fc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fc2:	e01c      	b.n	8003ffe <HAL_RCC_OscConfig+0x376>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	2b05      	cmp	r3, #5
 8003fca:	d10c      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x35e>
 8003fcc:	4b61      	ldr	r3, [pc, #388]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd0:	4a60      	ldr	r2, [pc, #384]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8003fd2:	f043 0304 	orr.w	r3, r3, #4
 8003fd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fd8:	4b5e      	ldr	r3, [pc, #376]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8003fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fdc:	4a5d      	ldr	r2, [pc, #372]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8003fde:	f043 0301 	orr.w	r3, r3, #1
 8003fe2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fe4:	e00b      	b.n	8003ffe <HAL_RCC_OscConfig+0x376>
 8003fe6:	4b5b      	ldr	r3, [pc, #364]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fea:	4a5a      	ldr	r2, [pc, #360]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8003fec:	f023 0301 	bic.w	r3, r3, #1
 8003ff0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ff2:	4b58      	ldr	r3, [pc, #352]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff6:	4a57      	ldr	r2, [pc, #348]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8003ff8:	f023 0304 	bic.w	r3, r3, #4
 8003ffc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d015      	beq.n	8004032 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004006:	f7fe f957 	bl	80022b8 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400c:	e00a      	b.n	8004024 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400e:	f7fe f953 	bl	80022b8 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	f241 3288 	movw	r2, #5000	@ 0x1388
 800401c:	4293      	cmp	r3, r2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e0ce      	b.n	80041c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004024:	4b4b      	ldr	r3, [pc, #300]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0ee      	beq.n	800400e <HAL_RCC_OscConfig+0x386>
 8004030:	e014      	b.n	800405c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004032:	f7fe f941 	bl	80022b8 <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004038:	e00a      	b.n	8004050 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403a:	f7fe f93d 	bl	80022b8 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004048:	4293      	cmp	r3, r2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e0b8      	b.n	80041c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004050:	4b40      	ldr	r3, [pc, #256]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8004052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1ee      	bne.n	800403a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800405c:	7dfb      	ldrb	r3, [r7, #23]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d105      	bne.n	800406e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004062:	4b3c      	ldr	r3, [pc, #240]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004066:	4a3b      	ldr	r2, [pc, #236]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8004068:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800406c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 80a4 	beq.w	80041c0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004078:	4b36      	ldr	r3, [pc, #216]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 030c 	and.w	r3, r3, #12
 8004080:	2b08      	cmp	r3, #8
 8004082:	d06b      	beq.n	800415c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	2b02      	cmp	r3, #2
 800408a:	d149      	bne.n	8004120 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800408c:	4b31      	ldr	r3, [pc, #196]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a30      	ldr	r2, [pc, #192]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8004092:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004098:	f7fe f90e 	bl	80022b8 <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a0:	f7fe f90a 	bl	80022b8 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e087      	b.n	80041c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b2:	4b28      	ldr	r3, [pc, #160]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f0      	bne.n	80040a0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69da      	ldr	r2, [r3, #28]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040cc:	019b      	lsls	r3, r3, #6
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d4:	085b      	lsrs	r3, r3, #1
 80040d6:	3b01      	subs	r3, #1
 80040d8:	041b      	lsls	r3, r3, #16
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e0:	061b      	lsls	r3, r3, #24
 80040e2:	4313      	orrs	r3, r2
 80040e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 80040e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80040ea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040ec:	4b19      	ldr	r3, [pc, #100]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a18      	ldr	r2, [pc, #96]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 80040f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f8:	f7fe f8de 	bl	80022b8 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004100:	f7fe f8da 	bl	80022b8 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e057      	b.n	80041c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004112:	4b10      	ldr	r3, [pc, #64]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0f0      	beq.n	8004100 <HAL_RCC_OscConfig+0x478>
 800411e:	e04f      	b.n	80041c0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004120:	4b0c      	ldr	r3, [pc, #48]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a0b      	ldr	r2, [pc, #44]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8004126:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800412a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412c:	f7fe f8c4 	bl	80022b8 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004134:	f7fe f8c0 	bl	80022b8 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e03d      	b.n	80041c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004146:	4b03      	ldr	r3, [pc, #12]	@ (8004154 <HAL_RCC_OscConfig+0x4cc>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_OscConfig+0x4ac>
 8004152:	e035      	b.n	80041c0 <HAL_RCC_OscConfig+0x538>
 8004154:	40023800 	.word	0x40023800
 8004158:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800415c:	4b1b      	ldr	r3, [pc, #108]	@ (80041cc <HAL_RCC_OscConfig+0x544>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d028      	beq.n	80041bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004174:	429a      	cmp	r2, r3
 8004176:	d121      	bne.n	80041bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004182:	429a      	cmp	r2, r3
 8004184:	d11a      	bne.n	80041bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800418c:	4013      	ands	r3, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004192:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004194:	4293      	cmp	r3, r2
 8004196:	d111      	bne.n	80041bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a2:	085b      	lsrs	r3, r3, #1
 80041a4:	3b01      	subs	r3, #1
 80041a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d107      	bne.n	80041bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d001      	beq.n	80041c0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e000      	b.n	80041c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	40023800 	.word	0x40023800

080041d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80041da:	2300      	movs	r3, #0
 80041dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0d0      	b.n	800438a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041e8:	4b6a      	ldr	r3, [pc, #424]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d910      	bls.n	8004218 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f6:	4b67      	ldr	r3, [pc, #412]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f023 020f 	bic.w	r2, r3, #15
 80041fe:	4965      	ldr	r1, [pc, #404]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	4313      	orrs	r3, r2
 8004204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004206:	4b63      	ldr	r3, [pc, #396]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d001      	beq.n	8004218 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e0b8      	b.n	800438a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d020      	beq.n	8004266 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004230:	4b59      	ldr	r3, [pc, #356]	@ (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4a58      	ldr	r2, [pc, #352]	@ (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 8004236:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800423a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0308 	and.w	r3, r3, #8
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004248:	4b53      	ldr	r3, [pc, #332]	@ (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	4a52      	ldr	r2, [pc, #328]	@ (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 800424e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004252:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004254:	4b50      	ldr	r3, [pc, #320]	@ (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	494d      	ldr	r1, [pc, #308]	@ (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 8004262:	4313      	orrs	r3, r2
 8004264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d040      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d107      	bne.n	800428a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427a:	4b47      	ldr	r3, [pc, #284]	@ (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d115      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e07f      	b.n	800438a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d107      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004292:	4b41      	ldr	r3, [pc, #260]	@ (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d109      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e073      	b.n	800438a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a2:	4b3d      	ldr	r3, [pc, #244]	@ (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e06b      	b.n	800438a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042b2:	4b39      	ldr	r3, [pc, #228]	@ (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f023 0203 	bic.w	r2, r3, #3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4936      	ldr	r1, [pc, #216]	@ (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c4:	f7fd fff8 	bl	80022b8 <HAL_GetTick>
 80042c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ca:	e00a      	b.n	80042e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042cc:	f7fd fff4 	bl	80022b8 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042da:	4293      	cmp	r3, r2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e053      	b.n	800438a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e2:	4b2d      	ldr	r3, [pc, #180]	@ (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 020c 	and.w	r2, r3, #12
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d1eb      	bne.n	80042cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042f4:	4b27      	ldr	r3, [pc, #156]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 030f 	and.w	r3, r3, #15
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d210      	bcs.n	8004324 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004302:	4b24      	ldr	r3, [pc, #144]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f023 020f 	bic.w	r2, r3, #15
 800430a:	4922      	ldr	r1, [pc, #136]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004312:	4b20      	ldr	r3, [pc, #128]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d001      	beq.n	8004324 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e032      	b.n	800438a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d008      	beq.n	8004342 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004330:	4b19      	ldr	r3, [pc, #100]	@ (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	4916      	ldr	r1, [pc, #88]	@ (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 800433e:	4313      	orrs	r3, r2
 8004340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d009      	beq.n	8004362 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800434e:	4b12      	ldr	r3, [pc, #72]	@ (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	490e      	ldr	r1, [pc, #56]	@ (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 800435e:	4313      	orrs	r3, r2
 8004360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004362:	f000 f821 	bl	80043a8 <HAL_RCC_GetSysClockFreq>
 8004366:	4602      	mov	r2, r0
 8004368:	4b0b      	ldr	r3, [pc, #44]	@ (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	091b      	lsrs	r3, r3, #4
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	490a      	ldr	r1, [pc, #40]	@ (800439c <HAL_RCC_ClockConfig+0x1cc>)
 8004374:	5ccb      	ldrb	r3, [r1, r3]
 8004376:	fa22 f303 	lsr.w	r3, r2, r3
 800437a:	4a09      	ldr	r2, [pc, #36]	@ (80043a0 <HAL_RCC_ClockConfig+0x1d0>)
 800437c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800437e:	4b09      	ldr	r3, [pc, #36]	@ (80043a4 <HAL_RCC_ClockConfig+0x1d4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f7fd ff54 	bl	8002230 <HAL_InitTick>

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40023c00 	.word	0x40023c00
 8004398:	40023800 	.word	0x40023800
 800439c:	0800865c 	.word	0x0800865c
 80043a0:	20000004 	.word	0x20000004
 80043a4:	20000008 	.word	0x20000008

080043a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043ac:	b094      	sub	sp, #80	@ 0x50
 80043ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80043b0:	2300      	movs	r3, #0
 80043b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80043b4:	2300      	movs	r3, #0
 80043b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043b8:	2300      	movs	r3, #0
 80043ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043c0:	4b79      	ldr	r3, [pc, #484]	@ (80045a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 030c 	and.w	r3, r3, #12
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d00d      	beq.n	80043e8 <HAL_RCC_GetSysClockFreq+0x40>
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	f200 80e1 	bhi.w	8004594 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <HAL_RCC_GetSysClockFreq+0x34>
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d003      	beq.n	80043e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80043da:	e0db      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043dc:	4b73      	ldr	r3, [pc, #460]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x204>)
 80043de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043e0:	e0db      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043e2:	4b73      	ldr	r3, [pc, #460]	@ (80045b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80043e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043e6:	e0d8      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043e8:	4b6f      	ldr	r3, [pc, #444]	@ (80045a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043f2:	4b6d      	ldr	r3, [pc, #436]	@ (80045a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d063      	beq.n	80044c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043fe:	4b6a      	ldr	r3, [pc, #424]	@ (80045a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	099b      	lsrs	r3, r3, #6
 8004404:	2200      	movs	r2, #0
 8004406:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004408:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800440a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800440c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004410:	633b      	str	r3, [r7, #48]	@ 0x30
 8004412:	2300      	movs	r3, #0
 8004414:	637b      	str	r3, [r7, #52]	@ 0x34
 8004416:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800441a:	4622      	mov	r2, r4
 800441c:	462b      	mov	r3, r5
 800441e:	f04f 0000 	mov.w	r0, #0
 8004422:	f04f 0100 	mov.w	r1, #0
 8004426:	0159      	lsls	r1, r3, #5
 8004428:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800442c:	0150      	lsls	r0, r2, #5
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4621      	mov	r1, r4
 8004434:	1a51      	subs	r1, r2, r1
 8004436:	6139      	str	r1, [r7, #16]
 8004438:	4629      	mov	r1, r5
 800443a:	eb63 0301 	sbc.w	r3, r3, r1
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800444c:	4659      	mov	r1, fp
 800444e:	018b      	lsls	r3, r1, #6
 8004450:	4651      	mov	r1, sl
 8004452:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004456:	4651      	mov	r1, sl
 8004458:	018a      	lsls	r2, r1, #6
 800445a:	4651      	mov	r1, sl
 800445c:	ebb2 0801 	subs.w	r8, r2, r1
 8004460:	4659      	mov	r1, fp
 8004462:	eb63 0901 	sbc.w	r9, r3, r1
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	f04f 0300 	mov.w	r3, #0
 800446e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004472:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004476:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800447a:	4690      	mov	r8, r2
 800447c:	4699      	mov	r9, r3
 800447e:	4623      	mov	r3, r4
 8004480:	eb18 0303 	adds.w	r3, r8, r3
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	462b      	mov	r3, r5
 8004488:	eb49 0303 	adc.w	r3, r9, r3
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	f04f 0300 	mov.w	r3, #0
 8004496:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800449a:	4629      	mov	r1, r5
 800449c:	024b      	lsls	r3, r1, #9
 800449e:	4621      	mov	r1, r4
 80044a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044a4:	4621      	mov	r1, r4
 80044a6:	024a      	lsls	r2, r1, #9
 80044a8:	4610      	mov	r0, r2
 80044aa:	4619      	mov	r1, r3
 80044ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ae:	2200      	movs	r2, #0
 80044b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044b8:	f7fc fb96 	bl	8000be8 <__aeabi_uldivmod>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	4613      	mov	r3, r2
 80044c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044c4:	e058      	b.n	8004578 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044c6:	4b38      	ldr	r3, [pc, #224]	@ (80045a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	099b      	lsrs	r3, r3, #6
 80044cc:	2200      	movs	r2, #0
 80044ce:	4618      	mov	r0, r3
 80044d0:	4611      	mov	r1, r2
 80044d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044d6:	623b      	str	r3, [r7, #32]
 80044d8:	2300      	movs	r3, #0
 80044da:	627b      	str	r3, [r7, #36]	@ 0x24
 80044dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044e0:	4642      	mov	r2, r8
 80044e2:	464b      	mov	r3, r9
 80044e4:	f04f 0000 	mov.w	r0, #0
 80044e8:	f04f 0100 	mov.w	r1, #0
 80044ec:	0159      	lsls	r1, r3, #5
 80044ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044f2:	0150      	lsls	r0, r2, #5
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4641      	mov	r1, r8
 80044fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80044fe:	4649      	mov	r1, r9
 8004500:	eb63 0b01 	sbc.w	fp, r3, r1
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004510:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004514:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004518:	ebb2 040a 	subs.w	r4, r2, sl
 800451c:	eb63 050b 	sbc.w	r5, r3, fp
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	00eb      	lsls	r3, r5, #3
 800452a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800452e:	00e2      	lsls	r2, r4, #3
 8004530:	4614      	mov	r4, r2
 8004532:	461d      	mov	r5, r3
 8004534:	4643      	mov	r3, r8
 8004536:	18e3      	adds	r3, r4, r3
 8004538:	603b      	str	r3, [r7, #0]
 800453a:	464b      	mov	r3, r9
 800453c:	eb45 0303 	adc.w	r3, r5, r3
 8004540:	607b      	str	r3, [r7, #4]
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800454e:	4629      	mov	r1, r5
 8004550:	028b      	lsls	r3, r1, #10
 8004552:	4621      	mov	r1, r4
 8004554:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004558:	4621      	mov	r1, r4
 800455a:	028a      	lsls	r2, r1, #10
 800455c:	4610      	mov	r0, r2
 800455e:	4619      	mov	r1, r3
 8004560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004562:	2200      	movs	r2, #0
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	61fa      	str	r2, [r7, #28]
 8004568:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800456c:	f7fc fb3c 	bl	8000be8 <__aeabi_uldivmod>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4613      	mov	r3, r2
 8004576:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004578:	4b0b      	ldr	r3, [pc, #44]	@ (80045a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	0c1b      	lsrs	r3, r3, #16
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	3301      	adds	r3, #1
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004588:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800458a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800458c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004590:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004592:	e002      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004594:	4b05      	ldr	r3, [pc, #20]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x204>)
 8004596:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800459a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800459c:	4618      	mov	r0, r3
 800459e:	3750      	adds	r7, #80	@ 0x50
 80045a0:	46bd      	mov	sp, r7
 80045a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045a6:	bf00      	nop
 80045a8:	40023800 	.word	0x40023800
 80045ac:	00f42400 	.word	0x00f42400
 80045b0:	007a1200 	.word	0x007a1200

080045b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045b8:	4b03      	ldr	r3, [pc, #12]	@ (80045c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045ba:	681b      	ldr	r3, [r3, #0]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	20000004 	.word	0x20000004

080045cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045d0:	f7ff fff0 	bl	80045b4 <HAL_RCC_GetHCLKFreq>
 80045d4:	4602      	mov	r2, r0
 80045d6:	4b05      	ldr	r3, [pc, #20]	@ (80045ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	0a9b      	lsrs	r3, r3, #10
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	4903      	ldr	r1, [pc, #12]	@ (80045f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045e2:	5ccb      	ldrb	r3, [r1, r3]
 80045e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40023800 	.word	0x40023800
 80045f0:	0800866c 	.word	0x0800866c

080045f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045f8:	f7ff ffdc 	bl	80045b4 <HAL_RCC_GetHCLKFreq>
 80045fc:	4602      	mov	r2, r0
 80045fe:	4b05      	ldr	r3, [pc, #20]	@ (8004614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	0b5b      	lsrs	r3, r3, #13
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	4903      	ldr	r1, [pc, #12]	@ (8004618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800460a:	5ccb      	ldrb	r3, [r1, r3]
 800460c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004610:	4618      	mov	r0, r3
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40023800 	.word	0x40023800
 8004618:	0800866c 	.word	0x0800866c

0800461c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b088      	sub	sp, #32
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004628:	2300      	movs	r3, #0
 800462a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d012      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004644:	4b69      	ldr	r3, [pc, #420]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	4a68      	ldr	r2, [pc, #416]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800464e:	6093      	str	r3, [r2, #8]
 8004650:	4b66      	ldr	r3, [pc, #408]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004658:	4964      	ldr	r1, [pc, #400]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465a:	4313      	orrs	r3, r2
 800465c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004666:	2301      	movs	r3, #1
 8004668:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d017      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004676:	4b5d      	ldr	r3, [pc, #372]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004678:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800467c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004684:	4959      	ldr	r1, [pc, #356]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004690:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004694:	d101      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004696:	2301      	movs	r3, #1
 8004698:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80046a2:	2301      	movs	r3, #1
 80046a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d017      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046b2:	4b4e      	ldr	r3, [pc, #312]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046b8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c0:	494a      	ldr	r1, [pc, #296]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046d0:	d101      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80046d2:	2301      	movs	r3, #1
 80046d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80046de:	2301      	movs	r3, #1
 80046e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80046ee:	2301      	movs	r3, #1
 80046f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 808b 	beq.w	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004700:	4b3a      	ldr	r3, [pc, #232]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004704:	4a39      	ldr	r2, [pc, #228]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800470a:	6413      	str	r3, [r2, #64]	@ 0x40
 800470c:	4b37      	ldr	r3, [pc, #220]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004714:	60bb      	str	r3, [r7, #8]
 8004716:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004718:	4b35      	ldr	r3, [pc, #212]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a34      	ldr	r2, [pc, #208]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800471e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004722:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004724:	f7fd fdc8 	bl	80022b8 <HAL_GetTick>
 8004728:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800472a:	e008      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800472c:	f7fd fdc4 	bl	80022b8 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b64      	cmp	r3, #100	@ 0x64
 8004738:	d901      	bls.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e357      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800473e:	4b2c      	ldr	r3, [pc, #176]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f0      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800474a:	4b28      	ldr	r3, [pc, #160]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800474e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004752:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d035      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	429a      	cmp	r2, r3
 8004766:	d02e      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004768:	4b20      	ldr	r3, [pc, #128]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800476a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800476c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004770:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004772:	4b1e      	ldr	r3, [pc, #120]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004776:	4a1d      	ldr	r2, [pc, #116]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800477c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800477e:	4b1b      	ldr	r3, [pc, #108]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004782:	4a1a      	ldr	r2, [pc, #104]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004784:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004788:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800478a:	4a18      	ldr	r2, [pc, #96]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004790:	4b16      	ldr	r3, [pc, #88]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b01      	cmp	r3, #1
 800479a:	d114      	bne.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479c:	f7fd fd8c 	bl	80022b8 <HAL_GetTick>
 80047a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a2:	e00a      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047a4:	f7fd fd88 	bl	80022b8 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d901      	bls.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e319      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ba:	4b0c      	ldr	r3, [pc, #48]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0ee      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047d2:	d111      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80047d4:	4b05      	ldr	r3, [pc, #20]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80047e0:	4b04      	ldr	r3, [pc, #16]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80047e2:	400b      	ands	r3, r1
 80047e4:	4901      	ldr	r1, [pc, #4]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	608b      	str	r3, [r1, #8]
 80047ea:	e00b      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80047ec:	40023800 	.word	0x40023800
 80047f0:	40007000 	.word	0x40007000
 80047f4:	0ffffcff 	.word	0x0ffffcff
 80047f8:	4baa      	ldr	r3, [pc, #680]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	4aa9      	ldr	r2, [pc, #676]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047fe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004802:	6093      	str	r3, [r2, #8]
 8004804:	4ba7      	ldr	r3, [pc, #668]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004806:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004810:	49a4      	ldr	r1, [pc, #656]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004812:	4313      	orrs	r3, r2
 8004814:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0310 	and.w	r3, r3, #16
 800481e:	2b00      	cmp	r3, #0
 8004820:	d010      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004822:	4ba0      	ldr	r3, [pc, #640]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004828:	4a9e      	ldr	r2, [pc, #632]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800482a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800482e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004832:	4b9c      	ldr	r3, [pc, #624]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004834:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483c:	4999      	ldr	r1, [pc, #612]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00a      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004850:	4b94      	ldr	r3, [pc, #592]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004856:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800485e:	4991      	ldr	r1, [pc, #580]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004872:	4b8c      	ldr	r3, [pc, #560]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004878:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004880:	4988      	ldr	r1, [pc, #544]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00a      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004894:	4b83      	ldr	r3, [pc, #524]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800489a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048a2:	4980      	ldr	r1, [pc, #512]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048b6:	4b7b      	ldr	r3, [pc, #492]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048bc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c4:	4977      	ldr	r1, [pc, #476]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048d8:	4b72      	ldr	r3, [pc, #456]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048de:	f023 0203 	bic.w	r2, r3, #3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e6:	496f      	ldr	r1, [pc, #444]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048fa:	4b6a      	ldr	r3, [pc, #424]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004900:	f023 020c 	bic.w	r2, r3, #12
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004908:	4966      	ldr	r1, [pc, #408]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800491c:	4b61      	ldr	r3, [pc, #388]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004922:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800492a:	495e      	ldr	r1, [pc, #376]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800493e:	4b59      	ldr	r3, [pc, #356]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004944:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800494c:	4955      	ldr	r1, [pc, #340]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004960:	4b50      	ldr	r3, [pc, #320]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004966:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496e:	494d      	ldr	r1, [pc, #308]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004982:	4b48      	ldr	r3, [pc, #288]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004988:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004990:	4944      	ldr	r1, [pc, #272]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80049a4:	4b3f      	ldr	r3, [pc, #252]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049aa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b2:	493c      	ldr	r1, [pc, #240]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80049c6:	4b37      	ldr	r3, [pc, #220]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049d4:	4933      	ldr	r1, [pc, #204]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049e8:	4b2e      	ldr	r3, [pc, #184]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ee:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049f6:	492b      	ldr	r1, [pc, #172]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d011      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a0a:	4b26      	ldr	r3, [pc, #152]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a10:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a18:	4922      	ldr	r1, [pc, #136]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a28:	d101      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a4a:	4b16      	ldr	r3, [pc, #88]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a50:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a58:	4912      	ldr	r1, [pc, #72]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00b      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a72:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a7c:	4909      	ldr	r1, [pc, #36]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d006      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 80d9 	beq.w	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a98:	4b02      	ldr	r3, [pc, #8]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a01      	ldr	r2, [pc, #4]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004aa2:	e001      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aaa:	f7fd fc05 	bl	80022b8 <HAL_GetTick>
 8004aae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ab2:	f7fd fc01 	bl	80022b8 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b64      	cmp	r3, #100	@ 0x64
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e194      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ac4:	4b6c      	ldr	r3, [pc, #432]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1f0      	bne.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d021      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d11d      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ae4:	4b64      	ldr	r3, [pc, #400]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aea:	0c1b      	lsrs	r3, r3, #16
 8004aec:	f003 0303 	and.w	r3, r3, #3
 8004af0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004af2:	4b61      	ldr	r3, [pc, #388]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004af8:	0e1b      	lsrs	r3, r3, #24
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	019a      	lsls	r2, r3, #6
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	041b      	lsls	r3, r3, #16
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	061b      	lsls	r3, r3, #24
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	071b      	lsls	r3, r3, #28
 8004b18:	4957      	ldr	r1, [pc, #348]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d004      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d02e      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b4a:	d129      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b4c:	4b4a      	ldr	r3, [pc, #296]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b52:	0c1b      	lsrs	r3, r3, #16
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b5a:	4b47      	ldr	r3, [pc, #284]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b60:	0f1b      	lsrs	r3, r3, #28
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	019a      	lsls	r2, r3, #6
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	041b      	lsls	r3, r3, #16
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	061b      	lsls	r3, r3, #24
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	071b      	lsls	r3, r3, #28
 8004b80:	493d      	ldr	r1, [pc, #244]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b88:	4b3b      	ldr	r3, [pc, #236]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b8e:	f023 021f 	bic.w	r2, r3, #31
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b96:	3b01      	subs	r3, #1
 8004b98:	4937      	ldr	r1, [pc, #220]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d01d      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004bac:	4b32      	ldr	r3, [pc, #200]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bb2:	0e1b      	lsrs	r3, r3, #24
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004bba:	4b2f      	ldr	r3, [pc, #188]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bc0:	0f1b      	lsrs	r3, r3, #28
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	019a      	lsls	r2, r3, #6
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	041b      	lsls	r3, r3, #16
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	061b      	lsls	r3, r3, #24
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	071b      	lsls	r3, r3, #28
 8004be0:	4925      	ldr	r1, [pc, #148]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d011      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	019a      	lsls	r2, r3, #6
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	041b      	lsls	r3, r3, #16
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	061b      	lsls	r3, r3, #24
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	071b      	lsls	r3, r3, #28
 8004c10:	4919      	ldr	r1, [pc, #100]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c18:	4b17      	ldr	r3, [pc, #92]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a16      	ldr	r2, [pc, #88]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c24:	f7fd fb48 	bl	80022b8 <HAL_GetTick>
 8004c28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c2c:	f7fd fb44 	bl	80022b8 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b64      	cmp	r3, #100	@ 0x64
 8004c38:	d901      	bls.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e0d7      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d0f0      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	f040 80cd 	bne.w	8004dec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c52:	4b09      	ldr	r3, [pc, #36]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a08      	ldr	r2, [pc, #32]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c5e:	f7fd fb2b 	bl	80022b8 <HAL_GetTick>
 8004c62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c64:	e00a      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c66:	f7fd fb27 	bl	80022b8 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b64      	cmp	r3, #100	@ 0x64
 8004c72:	d903      	bls.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e0ba      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004c78:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c7c:	4b5e      	ldr	r3, [pc, #376]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c88:	d0ed      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d009      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d02e      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d12a      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004cb2:	4b51      	ldr	r3, [pc, #324]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb8:	0c1b      	lsrs	r3, r3, #16
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004cc0:	4b4d      	ldr	r3, [pc, #308]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc6:	0f1b      	lsrs	r3, r3, #28
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	019a      	lsls	r2, r3, #6
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	041b      	lsls	r3, r3, #16
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	061b      	lsls	r3, r3, #24
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	071b      	lsls	r3, r3, #28
 8004ce6:	4944      	ldr	r1, [pc, #272]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004cee:	4b42      	ldr	r3, [pc, #264]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cf4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	021b      	lsls	r3, r3, #8
 8004d00:	493d      	ldr	r1, [pc, #244]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d022      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d1c:	d11d      	bne.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d1e:	4b36      	ldr	r3, [pc, #216]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d24:	0e1b      	lsrs	r3, r3, #24
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d2c:	4b32      	ldr	r3, [pc, #200]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d32:	0f1b      	lsrs	r3, r3, #28
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	019a      	lsls	r2, r3, #6
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	041b      	lsls	r3, r3, #16
 8004d46:	431a      	orrs	r2, r3
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	061b      	lsls	r3, r3, #24
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	071b      	lsls	r3, r3, #28
 8004d52:	4929      	ldr	r1, [pc, #164]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d028      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d66:	4b24      	ldr	r3, [pc, #144]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d6c:	0e1b      	lsrs	r3, r3, #24
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d74:	4b20      	ldr	r3, [pc, #128]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d7a:	0c1b      	lsrs	r3, r3, #16
 8004d7c:	f003 0303 	and.w	r3, r3, #3
 8004d80:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	019a      	lsls	r2, r3, #6
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	041b      	lsls	r3, r3, #16
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	061b      	lsls	r3, r3, #24
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	071b      	lsls	r3, r3, #28
 8004d9a:	4917      	ldr	r1, [pc, #92]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004da2:	4b15      	ldr	r3, [pc, #84]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004da8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db0:	4911      	ldr	r1, [pc, #68]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004db8:	4b0f      	ldr	r3, [pc, #60]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a0e      	ldr	r2, [pc, #56]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc4:	f7fd fa78 	bl	80022b8 <HAL_GetTick>
 8004dc8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dca:	e008      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004dcc:	f7fd fa74 	bl	80022b8 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b64      	cmp	r3, #100	@ 0x64
 8004dd8:	d901      	bls.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e007      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dde:	4b06      	ldr	r3, [pc, #24]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004de6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dea:	d1ef      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3720      	adds	r7, #32
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40023800 	.word	0x40023800

08004dfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e040      	b.n	8004e90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7fd f970 	bl	8002104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2224      	movs	r2, #36	@ 0x24
 8004e28:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0201 	bic.w	r2, r2, #1
 8004e38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f8b0 	bl	8004fa0 <UART_SetConfig>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e022      	b.n	8004e90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d002      	beq.n	8004e58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fb08 	bl	8005468 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0201 	orr.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 fb8f 	bl	80055ac <UART_CheckIdleState>
 8004e8e:	4603      	mov	r3, r0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08a      	sub	sp, #40	@ 0x28
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	603b      	str	r3, [r7, #0]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004eac:	2b20      	cmp	r3, #32
 8004eae:	d171      	bne.n	8004f94 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <HAL_UART_Transmit+0x24>
 8004eb6:	88fb      	ldrh	r3, [r7, #6]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e06a      	b.n	8004f96 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2221      	movs	r2, #33	@ 0x21
 8004ecc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ece:	f7fd f9f3 	bl	80022b8 <HAL_GetTick>
 8004ed2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	88fa      	ldrh	r2, [r7, #6]
 8004ed8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	88fa      	ldrh	r2, [r7, #6]
 8004ee0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eec:	d108      	bne.n	8004f00 <HAL_UART_Transmit+0x68>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d104      	bne.n	8004f00 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	61bb      	str	r3, [r7, #24]
 8004efe:	e003      	b.n	8004f08 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f04:	2300      	movs	r3, #0
 8004f06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f08:	e02c      	b.n	8004f64 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	2200      	movs	r2, #0
 8004f12:	2180      	movs	r1, #128	@ 0x80
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 fb80 	bl	800561a <UART_WaitOnFlagUntilTimeout>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e038      	b.n	8004f96 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10b      	bne.n	8004f42 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f38:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	3302      	adds	r3, #2
 8004f3e:	61bb      	str	r3, [r7, #24]
 8004f40:	e007      	b.n	8004f52 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	781a      	ldrb	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1cc      	bne.n	8004f0a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2200      	movs	r2, #0
 8004f78:	2140      	movs	r1, #64	@ 0x40
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f000 fb4d 	bl	800561a <UART_WaitOnFlagUntilTimeout>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e005      	b.n	8004f96 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	e000      	b.n	8004f96 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004f94:	2302      	movs	r3, #2
  }
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3720      	adds	r7, #32
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b088      	sub	sp, #32
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	4ba6      	ldr	r3, [pc, #664]	@ (8005264 <UART_SetConfig+0x2c4>)
 8004fcc:	4013      	ands	r3, r2
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6812      	ldr	r2, [r2, #0]
 8004fd2:	6979      	ldr	r1, [r7, #20]
 8004fd4:	430b      	orrs	r3, r1
 8004fd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	430a      	orrs	r2, r1
 8005010:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a94      	ldr	r2, [pc, #592]	@ (8005268 <UART_SetConfig+0x2c8>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d120      	bne.n	800505e <UART_SetConfig+0xbe>
 800501c:	4b93      	ldr	r3, [pc, #588]	@ (800526c <UART_SetConfig+0x2cc>)
 800501e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	2b03      	cmp	r3, #3
 8005028:	d816      	bhi.n	8005058 <UART_SetConfig+0xb8>
 800502a:	a201      	add	r2, pc, #4	@ (adr r2, 8005030 <UART_SetConfig+0x90>)
 800502c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005030:	08005041 	.word	0x08005041
 8005034:	0800504d 	.word	0x0800504d
 8005038:	08005047 	.word	0x08005047
 800503c:	08005053 	.word	0x08005053
 8005040:	2301      	movs	r3, #1
 8005042:	77fb      	strb	r3, [r7, #31]
 8005044:	e150      	b.n	80052e8 <UART_SetConfig+0x348>
 8005046:	2302      	movs	r3, #2
 8005048:	77fb      	strb	r3, [r7, #31]
 800504a:	e14d      	b.n	80052e8 <UART_SetConfig+0x348>
 800504c:	2304      	movs	r3, #4
 800504e:	77fb      	strb	r3, [r7, #31]
 8005050:	e14a      	b.n	80052e8 <UART_SetConfig+0x348>
 8005052:	2308      	movs	r3, #8
 8005054:	77fb      	strb	r3, [r7, #31]
 8005056:	e147      	b.n	80052e8 <UART_SetConfig+0x348>
 8005058:	2310      	movs	r3, #16
 800505a:	77fb      	strb	r3, [r7, #31]
 800505c:	e144      	b.n	80052e8 <UART_SetConfig+0x348>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a83      	ldr	r2, [pc, #524]	@ (8005270 <UART_SetConfig+0x2d0>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d132      	bne.n	80050ce <UART_SetConfig+0x12e>
 8005068:	4b80      	ldr	r3, [pc, #512]	@ (800526c <UART_SetConfig+0x2cc>)
 800506a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800506e:	f003 030c 	and.w	r3, r3, #12
 8005072:	2b0c      	cmp	r3, #12
 8005074:	d828      	bhi.n	80050c8 <UART_SetConfig+0x128>
 8005076:	a201      	add	r2, pc, #4	@ (adr r2, 800507c <UART_SetConfig+0xdc>)
 8005078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507c:	080050b1 	.word	0x080050b1
 8005080:	080050c9 	.word	0x080050c9
 8005084:	080050c9 	.word	0x080050c9
 8005088:	080050c9 	.word	0x080050c9
 800508c:	080050bd 	.word	0x080050bd
 8005090:	080050c9 	.word	0x080050c9
 8005094:	080050c9 	.word	0x080050c9
 8005098:	080050c9 	.word	0x080050c9
 800509c:	080050b7 	.word	0x080050b7
 80050a0:	080050c9 	.word	0x080050c9
 80050a4:	080050c9 	.word	0x080050c9
 80050a8:	080050c9 	.word	0x080050c9
 80050ac:	080050c3 	.word	0x080050c3
 80050b0:	2300      	movs	r3, #0
 80050b2:	77fb      	strb	r3, [r7, #31]
 80050b4:	e118      	b.n	80052e8 <UART_SetConfig+0x348>
 80050b6:	2302      	movs	r3, #2
 80050b8:	77fb      	strb	r3, [r7, #31]
 80050ba:	e115      	b.n	80052e8 <UART_SetConfig+0x348>
 80050bc:	2304      	movs	r3, #4
 80050be:	77fb      	strb	r3, [r7, #31]
 80050c0:	e112      	b.n	80052e8 <UART_SetConfig+0x348>
 80050c2:	2308      	movs	r3, #8
 80050c4:	77fb      	strb	r3, [r7, #31]
 80050c6:	e10f      	b.n	80052e8 <UART_SetConfig+0x348>
 80050c8:	2310      	movs	r3, #16
 80050ca:	77fb      	strb	r3, [r7, #31]
 80050cc:	e10c      	b.n	80052e8 <UART_SetConfig+0x348>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a68      	ldr	r2, [pc, #416]	@ (8005274 <UART_SetConfig+0x2d4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d120      	bne.n	800511a <UART_SetConfig+0x17a>
 80050d8:	4b64      	ldr	r3, [pc, #400]	@ (800526c <UART_SetConfig+0x2cc>)
 80050da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050de:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80050e2:	2b30      	cmp	r3, #48	@ 0x30
 80050e4:	d013      	beq.n	800510e <UART_SetConfig+0x16e>
 80050e6:	2b30      	cmp	r3, #48	@ 0x30
 80050e8:	d814      	bhi.n	8005114 <UART_SetConfig+0x174>
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	d009      	beq.n	8005102 <UART_SetConfig+0x162>
 80050ee:	2b20      	cmp	r3, #32
 80050f0:	d810      	bhi.n	8005114 <UART_SetConfig+0x174>
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <UART_SetConfig+0x15c>
 80050f6:	2b10      	cmp	r3, #16
 80050f8:	d006      	beq.n	8005108 <UART_SetConfig+0x168>
 80050fa:	e00b      	b.n	8005114 <UART_SetConfig+0x174>
 80050fc:	2300      	movs	r3, #0
 80050fe:	77fb      	strb	r3, [r7, #31]
 8005100:	e0f2      	b.n	80052e8 <UART_SetConfig+0x348>
 8005102:	2302      	movs	r3, #2
 8005104:	77fb      	strb	r3, [r7, #31]
 8005106:	e0ef      	b.n	80052e8 <UART_SetConfig+0x348>
 8005108:	2304      	movs	r3, #4
 800510a:	77fb      	strb	r3, [r7, #31]
 800510c:	e0ec      	b.n	80052e8 <UART_SetConfig+0x348>
 800510e:	2308      	movs	r3, #8
 8005110:	77fb      	strb	r3, [r7, #31]
 8005112:	e0e9      	b.n	80052e8 <UART_SetConfig+0x348>
 8005114:	2310      	movs	r3, #16
 8005116:	77fb      	strb	r3, [r7, #31]
 8005118:	e0e6      	b.n	80052e8 <UART_SetConfig+0x348>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a56      	ldr	r2, [pc, #344]	@ (8005278 <UART_SetConfig+0x2d8>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d120      	bne.n	8005166 <UART_SetConfig+0x1c6>
 8005124:	4b51      	ldr	r3, [pc, #324]	@ (800526c <UART_SetConfig+0x2cc>)
 8005126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800512a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800512e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005130:	d013      	beq.n	800515a <UART_SetConfig+0x1ba>
 8005132:	2bc0      	cmp	r3, #192	@ 0xc0
 8005134:	d814      	bhi.n	8005160 <UART_SetConfig+0x1c0>
 8005136:	2b80      	cmp	r3, #128	@ 0x80
 8005138:	d009      	beq.n	800514e <UART_SetConfig+0x1ae>
 800513a:	2b80      	cmp	r3, #128	@ 0x80
 800513c:	d810      	bhi.n	8005160 <UART_SetConfig+0x1c0>
 800513e:	2b00      	cmp	r3, #0
 8005140:	d002      	beq.n	8005148 <UART_SetConfig+0x1a8>
 8005142:	2b40      	cmp	r3, #64	@ 0x40
 8005144:	d006      	beq.n	8005154 <UART_SetConfig+0x1b4>
 8005146:	e00b      	b.n	8005160 <UART_SetConfig+0x1c0>
 8005148:	2300      	movs	r3, #0
 800514a:	77fb      	strb	r3, [r7, #31]
 800514c:	e0cc      	b.n	80052e8 <UART_SetConfig+0x348>
 800514e:	2302      	movs	r3, #2
 8005150:	77fb      	strb	r3, [r7, #31]
 8005152:	e0c9      	b.n	80052e8 <UART_SetConfig+0x348>
 8005154:	2304      	movs	r3, #4
 8005156:	77fb      	strb	r3, [r7, #31]
 8005158:	e0c6      	b.n	80052e8 <UART_SetConfig+0x348>
 800515a:	2308      	movs	r3, #8
 800515c:	77fb      	strb	r3, [r7, #31]
 800515e:	e0c3      	b.n	80052e8 <UART_SetConfig+0x348>
 8005160:	2310      	movs	r3, #16
 8005162:	77fb      	strb	r3, [r7, #31]
 8005164:	e0c0      	b.n	80052e8 <UART_SetConfig+0x348>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a44      	ldr	r2, [pc, #272]	@ (800527c <UART_SetConfig+0x2dc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d125      	bne.n	80051bc <UART_SetConfig+0x21c>
 8005170:	4b3e      	ldr	r3, [pc, #248]	@ (800526c <UART_SetConfig+0x2cc>)
 8005172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005176:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800517a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800517e:	d017      	beq.n	80051b0 <UART_SetConfig+0x210>
 8005180:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005184:	d817      	bhi.n	80051b6 <UART_SetConfig+0x216>
 8005186:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800518a:	d00b      	beq.n	80051a4 <UART_SetConfig+0x204>
 800518c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005190:	d811      	bhi.n	80051b6 <UART_SetConfig+0x216>
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <UART_SetConfig+0x1fe>
 8005196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800519a:	d006      	beq.n	80051aa <UART_SetConfig+0x20a>
 800519c:	e00b      	b.n	80051b6 <UART_SetConfig+0x216>
 800519e:	2300      	movs	r3, #0
 80051a0:	77fb      	strb	r3, [r7, #31]
 80051a2:	e0a1      	b.n	80052e8 <UART_SetConfig+0x348>
 80051a4:	2302      	movs	r3, #2
 80051a6:	77fb      	strb	r3, [r7, #31]
 80051a8:	e09e      	b.n	80052e8 <UART_SetConfig+0x348>
 80051aa:	2304      	movs	r3, #4
 80051ac:	77fb      	strb	r3, [r7, #31]
 80051ae:	e09b      	b.n	80052e8 <UART_SetConfig+0x348>
 80051b0:	2308      	movs	r3, #8
 80051b2:	77fb      	strb	r3, [r7, #31]
 80051b4:	e098      	b.n	80052e8 <UART_SetConfig+0x348>
 80051b6:	2310      	movs	r3, #16
 80051b8:	77fb      	strb	r3, [r7, #31]
 80051ba:	e095      	b.n	80052e8 <UART_SetConfig+0x348>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a2f      	ldr	r2, [pc, #188]	@ (8005280 <UART_SetConfig+0x2e0>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d125      	bne.n	8005212 <UART_SetConfig+0x272>
 80051c6:	4b29      	ldr	r3, [pc, #164]	@ (800526c <UART_SetConfig+0x2cc>)
 80051c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80051d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051d4:	d017      	beq.n	8005206 <UART_SetConfig+0x266>
 80051d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80051da:	d817      	bhi.n	800520c <UART_SetConfig+0x26c>
 80051dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051e0:	d00b      	beq.n	80051fa <UART_SetConfig+0x25a>
 80051e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051e6:	d811      	bhi.n	800520c <UART_SetConfig+0x26c>
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <UART_SetConfig+0x254>
 80051ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051f0:	d006      	beq.n	8005200 <UART_SetConfig+0x260>
 80051f2:	e00b      	b.n	800520c <UART_SetConfig+0x26c>
 80051f4:	2301      	movs	r3, #1
 80051f6:	77fb      	strb	r3, [r7, #31]
 80051f8:	e076      	b.n	80052e8 <UART_SetConfig+0x348>
 80051fa:	2302      	movs	r3, #2
 80051fc:	77fb      	strb	r3, [r7, #31]
 80051fe:	e073      	b.n	80052e8 <UART_SetConfig+0x348>
 8005200:	2304      	movs	r3, #4
 8005202:	77fb      	strb	r3, [r7, #31]
 8005204:	e070      	b.n	80052e8 <UART_SetConfig+0x348>
 8005206:	2308      	movs	r3, #8
 8005208:	77fb      	strb	r3, [r7, #31]
 800520a:	e06d      	b.n	80052e8 <UART_SetConfig+0x348>
 800520c:	2310      	movs	r3, #16
 800520e:	77fb      	strb	r3, [r7, #31]
 8005210:	e06a      	b.n	80052e8 <UART_SetConfig+0x348>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1b      	ldr	r2, [pc, #108]	@ (8005284 <UART_SetConfig+0x2e4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d138      	bne.n	800528e <UART_SetConfig+0x2ee>
 800521c:	4b13      	ldr	r3, [pc, #76]	@ (800526c <UART_SetConfig+0x2cc>)
 800521e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005222:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005226:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800522a:	d017      	beq.n	800525c <UART_SetConfig+0x2bc>
 800522c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005230:	d82a      	bhi.n	8005288 <UART_SetConfig+0x2e8>
 8005232:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005236:	d00b      	beq.n	8005250 <UART_SetConfig+0x2b0>
 8005238:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800523c:	d824      	bhi.n	8005288 <UART_SetConfig+0x2e8>
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <UART_SetConfig+0x2aa>
 8005242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005246:	d006      	beq.n	8005256 <UART_SetConfig+0x2b6>
 8005248:	e01e      	b.n	8005288 <UART_SetConfig+0x2e8>
 800524a:	2300      	movs	r3, #0
 800524c:	77fb      	strb	r3, [r7, #31]
 800524e:	e04b      	b.n	80052e8 <UART_SetConfig+0x348>
 8005250:	2302      	movs	r3, #2
 8005252:	77fb      	strb	r3, [r7, #31]
 8005254:	e048      	b.n	80052e8 <UART_SetConfig+0x348>
 8005256:	2304      	movs	r3, #4
 8005258:	77fb      	strb	r3, [r7, #31]
 800525a:	e045      	b.n	80052e8 <UART_SetConfig+0x348>
 800525c:	2308      	movs	r3, #8
 800525e:	77fb      	strb	r3, [r7, #31]
 8005260:	e042      	b.n	80052e8 <UART_SetConfig+0x348>
 8005262:	bf00      	nop
 8005264:	efff69f3 	.word	0xefff69f3
 8005268:	40011000 	.word	0x40011000
 800526c:	40023800 	.word	0x40023800
 8005270:	40004400 	.word	0x40004400
 8005274:	40004800 	.word	0x40004800
 8005278:	40004c00 	.word	0x40004c00
 800527c:	40005000 	.word	0x40005000
 8005280:	40011400 	.word	0x40011400
 8005284:	40007800 	.word	0x40007800
 8005288:	2310      	movs	r3, #16
 800528a:	77fb      	strb	r3, [r7, #31]
 800528c:	e02c      	b.n	80052e8 <UART_SetConfig+0x348>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a72      	ldr	r2, [pc, #456]	@ (800545c <UART_SetConfig+0x4bc>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d125      	bne.n	80052e4 <UART_SetConfig+0x344>
 8005298:	4b71      	ldr	r3, [pc, #452]	@ (8005460 <UART_SetConfig+0x4c0>)
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800529e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80052a2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80052a6:	d017      	beq.n	80052d8 <UART_SetConfig+0x338>
 80052a8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80052ac:	d817      	bhi.n	80052de <UART_SetConfig+0x33e>
 80052ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052b2:	d00b      	beq.n	80052cc <UART_SetConfig+0x32c>
 80052b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052b8:	d811      	bhi.n	80052de <UART_SetConfig+0x33e>
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <UART_SetConfig+0x326>
 80052be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052c2:	d006      	beq.n	80052d2 <UART_SetConfig+0x332>
 80052c4:	e00b      	b.n	80052de <UART_SetConfig+0x33e>
 80052c6:	2300      	movs	r3, #0
 80052c8:	77fb      	strb	r3, [r7, #31]
 80052ca:	e00d      	b.n	80052e8 <UART_SetConfig+0x348>
 80052cc:	2302      	movs	r3, #2
 80052ce:	77fb      	strb	r3, [r7, #31]
 80052d0:	e00a      	b.n	80052e8 <UART_SetConfig+0x348>
 80052d2:	2304      	movs	r3, #4
 80052d4:	77fb      	strb	r3, [r7, #31]
 80052d6:	e007      	b.n	80052e8 <UART_SetConfig+0x348>
 80052d8:	2308      	movs	r3, #8
 80052da:	77fb      	strb	r3, [r7, #31]
 80052dc:	e004      	b.n	80052e8 <UART_SetConfig+0x348>
 80052de:	2310      	movs	r3, #16
 80052e0:	77fb      	strb	r3, [r7, #31]
 80052e2:	e001      	b.n	80052e8 <UART_SetConfig+0x348>
 80052e4:	2310      	movs	r3, #16
 80052e6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052f0:	d15b      	bne.n	80053aa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80052f2:	7ffb      	ldrb	r3, [r7, #31]
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d828      	bhi.n	800534a <UART_SetConfig+0x3aa>
 80052f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005300 <UART_SetConfig+0x360>)
 80052fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fe:	bf00      	nop
 8005300:	08005325 	.word	0x08005325
 8005304:	0800532d 	.word	0x0800532d
 8005308:	08005335 	.word	0x08005335
 800530c:	0800534b 	.word	0x0800534b
 8005310:	0800533b 	.word	0x0800533b
 8005314:	0800534b 	.word	0x0800534b
 8005318:	0800534b 	.word	0x0800534b
 800531c:	0800534b 	.word	0x0800534b
 8005320:	08005343 	.word	0x08005343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005324:	f7ff f952 	bl	80045cc <HAL_RCC_GetPCLK1Freq>
 8005328:	61b8      	str	r0, [r7, #24]
        break;
 800532a:	e013      	b.n	8005354 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800532c:	f7ff f962 	bl	80045f4 <HAL_RCC_GetPCLK2Freq>
 8005330:	61b8      	str	r0, [r7, #24]
        break;
 8005332:	e00f      	b.n	8005354 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005334:	4b4b      	ldr	r3, [pc, #300]	@ (8005464 <UART_SetConfig+0x4c4>)
 8005336:	61bb      	str	r3, [r7, #24]
        break;
 8005338:	e00c      	b.n	8005354 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800533a:	f7ff f835 	bl	80043a8 <HAL_RCC_GetSysClockFreq>
 800533e:	61b8      	str	r0, [r7, #24]
        break;
 8005340:	e008      	b.n	8005354 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005346:	61bb      	str	r3, [r7, #24]
        break;
 8005348:	e004      	b.n	8005354 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	77bb      	strb	r3, [r7, #30]
        break;
 8005352:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d074      	beq.n	8005444 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	005a      	lsls	r2, r3, #1
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	085b      	lsrs	r3, r3, #1
 8005364:	441a      	add	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	fbb2 f3f3 	udiv	r3, r2, r3
 800536e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	2b0f      	cmp	r3, #15
 8005374:	d916      	bls.n	80053a4 <UART_SetConfig+0x404>
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800537c:	d212      	bcs.n	80053a4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	b29b      	uxth	r3, r3
 8005382:	f023 030f 	bic.w	r3, r3, #15
 8005386:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	085b      	lsrs	r3, r3, #1
 800538c:	b29b      	uxth	r3, r3
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	b29a      	uxth	r2, r3
 8005394:	89fb      	ldrh	r3, [r7, #14]
 8005396:	4313      	orrs	r3, r2
 8005398:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	89fa      	ldrh	r2, [r7, #14]
 80053a0:	60da      	str	r2, [r3, #12]
 80053a2:	e04f      	b.n	8005444 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	77bb      	strb	r3, [r7, #30]
 80053a8:	e04c      	b.n	8005444 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053aa:	7ffb      	ldrb	r3, [r7, #31]
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d828      	bhi.n	8005402 <UART_SetConfig+0x462>
 80053b0:	a201      	add	r2, pc, #4	@ (adr r2, 80053b8 <UART_SetConfig+0x418>)
 80053b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b6:	bf00      	nop
 80053b8:	080053dd 	.word	0x080053dd
 80053bc:	080053e5 	.word	0x080053e5
 80053c0:	080053ed 	.word	0x080053ed
 80053c4:	08005403 	.word	0x08005403
 80053c8:	080053f3 	.word	0x080053f3
 80053cc:	08005403 	.word	0x08005403
 80053d0:	08005403 	.word	0x08005403
 80053d4:	08005403 	.word	0x08005403
 80053d8:	080053fb 	.word	0x080053fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053dc:	f7ff f8f6 	bl	80045cc <HAL_RCC_GetPCLK1Freq>
 80053e0:	61b8      	str	r0, [r7, #24]
        break;
 80053e2:	e013      	b.n	800540c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053e4:	f7ff f906 	bl	80045f4 <HAL_RCC_GetPCLK2Freq>
 80053e8:	61b8      	str	r0, [r7, #24]
        break;
 80053ea:	e00f      	b.n	800540c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005464 <UART_SetConfig+0x4c4>)
 80053ee:	61bb      	str	r3, [r7, #24]
        break;
 80053f0:	e00c      	b.n	800540c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053f2:	f7fe ffd9 	bl	80043a8 <HAL_RCC_GetSysClockFreq>
 80053f6:	61b8      	str	r0, [r7, #24]
        break;
 80053f8:	e008      	b.n	800540c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053fe:	61bb      	str	r3, [r7, #24]
        break;
 8005400:	e004      	b.n	800540c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	77bb      	strb	r3, [r7, #30]
        break;
 800540a:	bf00      	nop
    }

    if (pclk != 0U)
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d018      	beq.n	8005444 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	085a      	lsrs	r2, r3, #1
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	441a      	add	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	fbb2 f3f3 	udiv	r3, r2, r3
 8005424:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	2b0f      	cmp	r3, #15
 800542a:	d909      	bls.n	8005440 <UART_SetConfig+0x4a0>
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005432:	d205      	bcs.n	8005440 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	b29a      	uxth	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	60da      	str	r2, [r3, #12]
 800543e:	e001      	b.n	8005444 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005450:	7fbb      	ldrb	r3, [r7, #30]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3720      	adds	r7, #32
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	40007c00 	.word	0x40007c00
 8005460:	40023800 	.word	0x40023800
 8005464:	00f42400 	.word	0x00f42400

08005468 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00a      	beq.n	8005492 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00a      	beq.n	80054d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fc:	f003 0310 	and.w	r3, r3, #16
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00a      	beq.n	800551a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551e:	f003 0320 	and.w	r3, r3, #32
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005544:	2b00      	cmp	r3, #0
 8005546:	d01a      	beq.n	800557e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005562:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005566:	d10a      	bne.n	800557e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	605a      	str	r2, [r3, #4]
  }
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af02      	add	r7, sp, #8
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055bc:	f7fc fe7c 	bl	80022b8 <HAL_GetTick>
 80055c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0308 	and.w	r3, r3, #8
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d10e      	bne.n	80055ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f81b 	bl	800561a <UART_WaitOnFlagUntilTimeout>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e011      	b.n	8005612 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2220      	movs	r2, #32
 80055f2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2220      	movs	r2, #32
 80055f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b09c      	sub	sp, #112	@ 0x70
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	603b      	str	r3, [r7, #0]
 8005626:	4613      	mov	r3, r2
 8005628:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800562a:	e0a7      	b.n	800577c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800562c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800562e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005632:	f000 80a3 	beq.w	800577c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005636:	f7fc fe3f 	bl	80022b8 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005642:	429a      	cmp	r2, r3
 8005644:	d302      	bcc.n	800564c <UART_WaitOnFlagUntilTimeout+0x32>
 8005646:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005648:	2b00      	cmp	r3, #0
 800564a:	d13f      	bne.n	80056cc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005652:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005654:	e853 3f00 	ldrex	r3, [r3]
 8005658:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800565a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800565c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005660:	667b      	str	r3, [r7, #100]	@ 0x64
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800566a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800566c:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005670:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005672:	e841 2300 	strex	r3, r2, [r1]
 8005676:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1e6      	bne.n	800564c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3308      	adds	r3, #8
 8005684:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005688:	e853 3f00 	ldrex	r3, [r3]
 800568c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800568e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005690:	f023 0301 	bic.w	r3, r3, #1
 8005694:	663b      	str	r3, [r7, #96]	@ 0x60
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3308      	adds	r3, #8
 800569c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800569e:	64ba      	str	r2, [r7, #72]	@ 0x48
 80056a0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80056a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80056ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1e5      	bne.n	800567e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2220      	movs	r2, #32
 80056b6:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e068      	b.n	800579e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0304 	and.w	r3, r3, #4
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d050      	beq.n	800577c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056e8:	d148      	bne.n	800577c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056f2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fc:	e853 3f00 	ldrex	r3, [r3]
 8005700:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005704:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005708:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005712:	637b      	str	r3, [r7, #52]	@ 0x34
 8005714:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005716:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005718:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800571a:	e841 2300 	strex	r3, r2, [r1]
 800571e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1e6      	bne.n	80056f4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3308      	adds	r3, #8
 800572c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	e853 3f00 	ldrex	r3, [r3]
 8005734:	613b      	str	r3, [r7, #16]
   return(result);
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f023 0301 	bic.w	r3, r3, #1
 800573c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3308      	adds	r3, #8
 8005744:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005746:	623a      	str	r2, [r7, #32]
 8005748:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574a:	69f9      	ldr	r1, [r7, #28]
 800574c:	6a3a      	ldr	r2, [r7, #32]
 800574e:	e841 2300 	strex	r3, r2, [r1]
 8005752:	61bb      	str	r3, [r7, #24]
   return(result);
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1e5      	bne.n	8005726 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2220      	movs	r2, #32
 800575e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2220      	movs	r2, #32
 8005764:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2220      	movs	r2, #32
 800576c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e010      	b.n	800579e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	69da      	ldr	r2, [r3, #28]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	4013      	ands	r3, r2
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	429a      	cmp	r2, r3
 800578a:	bf0c      	ite	eq
 800578c:	2301      	moveq	r3, #1
 800578e:	2300      	movne	r3, #0
 8005790:	b2db      	uxtb	r3, r3
 8005792:	461a      	mov	r2, r3
 8005794:	79fb      	ldrb	r3, [r7, #7]
 8005796:	429a      	cmp	r2, r3
 8005798:	f43f af48 	beq.w	800562c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3770      	adds	r7, #112	@ 0x70
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <__cvt>:
 80057a6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057aa:	ec57 6b10 	vmov	r6, r7, d0
 80057ae:	2f00      	cmp	r7, #0
 80057b0:	460c      	mov	r4, r1
 80057b2:	4619      	mov	r1, r3
 80057b4:	463b      	mov	r3, r7
 80057b6:	bfbb      	ittet	lt
 80057b8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80057bc:	461f      	movlt	r7, r3
 80057be:	2300      	movge	r3, #0
 80057c0:	232d      	movlt	r3, #45	@ 0x2d
 80057c2:	700b      	strb	r3, [r1, #0]
 80057c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057c6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80057ca:	4691      	mov	r9, r2
 80057cc:	f023 0820 	bic.w	r8, r3, #32
 80057d0:	bfbc      	itt	lt
 80057d2:	4632      	movlt	r2, r6
 80057d4:	4616      	movlt	r6, r2
 80057d6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80057da:	d005      	beq.n	80057e8 <__cvt+0x42>
 80057dc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80057e0:	d100      	bne.n	80057e4 <__cvt+0x3e>
 80057e2:	3401      	adds	r4, #1
 80057e4:	2102      	movs	r1, #2
 80057e6:	e000      	b.n	80057ea <__cvt+0x44>
 80057e8:	2103      	movs	r1, #3
 80057ea:	ab03      	add	r3, sp, #12
 80057ec:	9301      	str	r3, [sp, #4]
 80057ee:	ab02      	add	r3, sp, #8
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	ec47 6b10 	vmov	d0, r6, r7
 80057f6:	4653      	mov	r3, sl
 80057f8:	4622      	mov	r2, r4
 80057fa:	f000 fe9d 	bl	8006538 <_dtoa_r>
 80057fe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005802:	4605      	mov	r5, r0
 8005804:	d119      	bne.n	800583a <__cvt+0x94>
 8005806:	f019 0f01 	tst.w	r9, #1
 800580a:	d00e      	beq.n	800582a <__cvt+0x84>
 800580c:	eb00 0904 	add.w	r9, r0, r4
 8005810:	2200      	movs	r2, #0
 8005812:	2300      	movs	r3, #0
 8005814:	4630      	mov	r0, r6
 8005816:	4639      	mov	r1, r7
 8005818:	f7fb f976 	bl	8000b08 <__aeabi_dcmpeq>
 800581c:	b108      	cbz	r0, 8005822 <__cvt+0x7c>
 800581e:	f8cd 900c 	str.w	r9, [sp, #12]
 8005822:	2230      	movs	r2, #48	@ 0x30
 8005824:	9b03      	ldr	r3, [sp, #12]
 8005826:	454b      	cmp	r3, r9
 8005828:	d31e      	bcc.n	8005868 <__cvt+0xc2>
 800582a:	9b03      	ldr	r3, [sp, #12]
 800582c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800582e:	1b5b      	subs	r3, r3, r5
 8005830:	4628      	mov	r0, r5
 8005832:	6013      	str	r3, [r2, #0]
 8005834:	b004      	add	sp, #16
 8005836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800583a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800583e:	eb00 0904 	add.w	r9, r0, r4
 8005842:	d1e5      	bne.n	8005810 <__cvt+0x6a>
 8005844:	7803      	ldrb	r3, [r0, #0]
 8005846:	2b30      	cmp	r3, #48	@ 0x30
 8005848:	d10a      	bne.n	8005860 <__cvt+0xba>
 800584a:	2200      	movs	r2, #0
 800584c:	2300      	movs	r3, #0
 800584e:	4630      	mov	r0, r6
 8005850:	4639      	mov	r1, r7
 8005852:	f7fb f959 	bl	8000b08 <__aeabi_dcmpeq>
 8005856:	b918      	cbnz	r0, 8005860 <__cvt+0xba>
 8005858:	f1c4 0401 	rsb	r4, r4, #1
 800585c:	f8ca 4000 	str.w	r4, [sl]
 8005860:	f8da 3000 	ldr.w	r3, [sl]
 8005864:	4499      	add	r9, r3
 8005866:	e7d3      	b.n	8005810 <__cvt+0x6a>
 8005868:	1c59      	adds	r1, r3, #1
 800586a:	9103      	str	r1, [sp, #12]
 800586c:	701a      	strb	r2, [r3, #0]
 800586e:	e7d9      	b.n	8005824 <__cvt+0x7e>

08005870 <__exponent>:
 8005870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005872:	2900      	cmp	r1, #0
 8005874:	bfba      	itte	lt
 8005876:	4249      	neglt	r1, r1
 8005878:	232d      	movlt	r3, #45	@ 0x2d
 800587a:	232b      	movge	r3, #43	@ 0x2b
 800587c:	2909      	cmp	r1, #9
 800587e:	7002      	strb	r2, [r0, #0]
 8005880:	7043      	strb	r3, [r0, #1]
 8005882:	dd29      	ble.n	80058d8 <__exponent+0x68>
 8005884:	f10d 0307 	add.w	r3, sp, #7
 8005888:	461d      	mov	r5, r3
 800588a:	270a      	movs	r7, #10
 800588c:	461a      	mov	r2, r3
 800588e:	fbb1 f6f7 	udiv	r6, r1, r7
 8005892:	fb07 1416 	mls	r4, r7, r6, r1
 8005896:	3430      	adds	r4, #48	@ 0x30
 8005898:	f802 4c01 	strb.w	r4, [r2, #-1]
 800589c:	460c      	mov	r4, r1
 800589e:	2c63      	cmp	r4, #99	@ 0x63
 80058a0:	f103 33ff 	add.w	r3, r3, #4294967295
 80058a4:	4631      	mov	r1, r6
 80058a6:	dcf1      	bgt.n	800588c <__exponent+0x1c>
 80058a8:	3130      	adds	r1, #48	@ 0x30
 80058aa:	1e94      	subs	r4, r2, #2
 80058ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 80058b0:	1c41      	adds	r1, r0, #1
 80058b2:	4623      	mov	r3, r4
 80058b4:	42ab      	cmp	r3, r5
 80058b6:	d30a      	bcc.n	80058ce <__exponent+0x5e>
 80058b8:	f10d 0309 	add.w	r3, sp, #9
 80058bc:	1a9b      	subs	r3, r3, r2
 80058be:	42ac      	cmp	r4, r5
 80058c0:	bf88      	it	hi
 80058c2:	2300      	movhi	r3, #0
 80058c4:	3302      	adds	r3, #2
 80058c6:	4403      	add	r3, r0
 80058c8:	1a18      	subs	r0, r3, r0
 80058ca:	b003      	add	sp, #12
 80058cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058ce:	f813 6b01 	ldrb.w	r6, [r3], #1
 80058d2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80058d6:	e7ed      	b.n	80058b4 <__exponent+0x44>
 80058d8:	2330      	movs	r3, #48	@ 0x30
 80058da:	3130      	adds	r1, #48	@ 0x30
 80058dc:	7083      	strb	r3, [r0, #2]
 80058de:	70c1      	strb	r1, [r0, #3]
 80058e0:	1d03      	adds	r3, r0, #4
 80058e2:	e7f1      	b.n	80058c8 <__exponent+0x58>

080058e4 <_printf_float>:
 80058e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e8:	b08d      	sub	sp, #52	@ 0x34
 80058ea:	460c      	mov	r4, r1
 80058ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80058f0:	4616      	mov	r6, r2
 80058f2:	461f      	mov	r7, r3
 80058f4:	4605      	mov	r5, r0
 80058f6:	f000 fd1f 	bl	8006338 <_localeconv_r>
 80058fa:	6803      	ldr	r3, [r0, #0]
 80058fc:	9304      	str	r3, [sp, #16]
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fa fcd6 	bl	80002b0 <strlen>
 8005904:	2300      	movs	r3, #0
 8005906:	930a      	str	r3, [sp, #40]	@ 0x28
 8005908:	f8d8 3000 	ldr.w	r3, [r8]
 800590c:	9005      	str	r0, [sp, #20]
 800590e:	3307      	adds	r3, #7
 8005910:	f023 0307 	bic.w	r3, r3, #7
 8005914:	f103 0208 	add.w	r2, r3, #8
 8005918:	f894 a018 	ldrb.w	sl, [r4, #24]
 800591c:	f8d4 b000 	ldr.w	fp, [r4]
 8005920:	f8c8 2000 	str.w	r2, [r8]
 8005924:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005928:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800592c:	9307      	str	r3, [sp, #28]
 800592e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005932:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005936:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800593a:	4b9c      	ldr	r3, [pc, #624]	@ (8005bac <_printf_float+0x2c8>)
 800593c:	f04f 32ff 	mov.w	r2, #4294967295
 8005940:	f7fb f914 	bl	8000b6c <__aeabi_dcmpun>
 8005944:	bb70      	cbnz	r0, 80059a4 <_printf_float+0xc0>
 8005946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800594a:	4b98      	ldr	r3, [pc, #608]	@ (8005bac <_printf_float+0x2c8>)
 800594c:	f04f 32ff 	mov.w	r2, #4294967295
 8005950:	f7fb f8ee 	bl	8000b30 <__aeabi_dcmple>
 8005954:	bb30      	cbnz	r0, 80059a4 <_printf_float+0xc0>
 8005956:	2200      	movs	r2, #0
 8005958:	2300      	movs	r3, #0
 800595a:	4640      	mov	r0, r8
 800595c:	4649      	mov	r1, r9
 800595e:	f7fb f8dd 	bl	8000b1c <__aeabi_dcmplt>
 8005962:	b110      	cbz	r0, 800596a <_printf_float+0x86>
 8005964:	232d      	movs	r3, #45	@ 0x2d
 8005966:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800596a:	4a91      	ldr	r2, [pc, #580]	@ (8005bb0 <_printf_float+0x2cc>)
 800596c:	4b91      	ldr	r3, [pc, #580]	@ (8005bb4 <_printf_float+0x2d0>)
 800596e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005972:	bf8c      	ite	hi
 8005974:	4690      	movhi	r8, r2
 8005976:	4698      	movls	r8, r3
 8005978:	2303      	movs	r3, #3
 800597a:	6123      	str	r3, [r4, #16]
 800597c:	f02b 0304 	bic.w	r3, fp, #4
 8005980:	6023      	str	r3, [r4, #0]
 8005982:	f04f 0900 	mov.w	r9, #0
 8005986:	9700      	str	r7, [sp, #0]
 8005988:	4633      	mov	r3, r6
 800598a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800598c:	4621      	mov	r1, r4
 800598e:	4628      	mov	r0, r5
 8005990:	f000 f9d2 	bl	8005d38 <_printf_common>
 8005994:	3001      	adds	r0, #1
 8005996:	f040 808d 	bne.w	8005ab4 <_printf_float+0x1d0>
 800599a:	f04f 30ff 	mov.w	r0, #4294967295
 800599e:	b00d      	add	sp, #52	@ 0x34
 80059a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059a4:	4642      	mov	r2, r8
 80059a6:	464b      	mov	r3, r9
 80059a8:	4640      	mov	r0, r8
 80059aa:	4649      	mov	r1, r9
 80059ac:	f7fb f8de 	bl	8000b6c <__aeabi_dcmpun>
 80059b0:	b140      	cbz	r0, 80059c4 <_printf_float+0xe0>
 80059b2:	464b      	mov	r3, r9
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	bfbc      	itt	lt
 80059b8:	232d      	movlt	r3, #45	@ 0x2d
 80059ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80059be:	4a7e      	ldr	r2, [pc, #504]	@ (8005bb8 <_printf_float+0x2d4>)
 80059c0:	4b7e      	ldr	r3, [pc, #504]	@ (8005bbc <_printf_float+0x2d8>)
 80059c2:	e7d4      	b.n	800596e <_printf_float+0x8a>
 80059c4:	6863      	ldr	r3, [r4, #4]
 80059c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80059ca:	9206      	str	r2, [sp, #24]
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	d13b      	bne.n	8005a48 <_printf_float+0x164>
 80059d0:	2306      	movs	r3, #6
 80059d2:	6063      	str	r3, [r4, #4]
 80059d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80059d8:	2300      	movs	r3, #0
 80059da:	6022      	str	r2, [r4, #0]
 80059dc:	9303      	str	r3, [sp, #12]
 80059de:	ab0a      	add	r3, sp, #40	@ 0x28
 80059e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80059e4:	ab09      	add	r3, sp, #36	@ 0x24
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	6861      	ldr	r1, [r4, #4]
 80059ea:	ec49 8b10 	vmov	d0, r8, r9
 80059ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80059f2:	4628      	mov	r0, r5
 80059f4:	f7ff fed7 	bl	80057a6 <__cvt>
 80059f8:	9b06      	ldr	r3, [sp, #24]
 80059fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80059fc:	2b47      	cmp	r3, #71	@ 0x47
 80059fe:	4680      	mov	r8, r0
 8005a00:	d129      	bne.n	8005a56 <_printf_float+0x172>
 8005a02:	1cc8      	adds	r0, r1, #3
 8005a04:	db02      	blt.n	8005a0c <_printf_float+0x128>
 8005a06:	6863      	ldr	r3, [r4, #4]
 8005a08:	4299      	cmp	r1, r3
 8005a0a:	dd41      	ble.n	8005a90 <_printf_float+0x1ac>
 8005a0c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005a10:	fa5f fa8a 	uxtb.w	sl, sl
 8005a14:	3901      	subs	r1, #1
 8005a16:	4652      	mov	r2, sl
 8005a18:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005a1c:	9109      	str	r1, [sp, #36]	@ 0x24
 8005a1e:	f7ff ff27 	bl	8005870 <__exponent>
 8005a22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a24:	1813      	adds	r3, r2, r0
 8005a26:	2a01      	cmp	r2, #1
 8005a28:	4681      	mov	r9, r0
 8005a2a:	6123      	str	r3, [r4, #16]
 8005a2c:	dc02      	bgt.n	8005a34 <_printf_float+0x150>
 8005a2e:	6822      	ldr	r2, [r4, #0]
 8005a30:	07d2      	lsls	r2, r2, #31
 8005a32:	d501      	bpl.n	8005a38 <_printf_float+0x154>
 8005a34:	3301      	adds	r3, #1
 8005a36:	6123      	str	r3, [r4, #16]
 8005a38:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0a2      	beq.n	8005986 <_printf_float+0xa2>
 8005a40:	232d      	movs	r3, #45	@ 0x2d
 8005a42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a46:	e79e      	b.n	8005986 <_printf_float+0xa2>
 8005a48:	9a06      	ldr	r2, [sp, #24]
 8005a4a:	2a47      	cmp	r2, #71	@ 0x47
 8005a4c:	d1c2      	bne.n	80059d4 <_printf_float+0xf0>
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1c0      	bne.n	80059d4 <_printf_float+0xf0>
 8005a52:	2301      	movs	r3, #1
 8005a54:	e7bd      	b.n	80059d2 <_printf_float+0xee>
 8005a56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a5a:	d9db      	bls.n	8005a14 <_printf_float+0x130>
 8005a5c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005a60:	d118      	bne.n	8005a94 <_printf_float+0x1b0>
 8005a62:	2900      	cmp	r1, #0
 8005a64:	6863      	ldr	r3, [r4, #4]
 8005a66:	dd0b      	ble.n	8005a80 <_printf_float+0x19c>
 8005a68:	6121      	str	r1, [r4, #16]
 8005a6a:	b913      	cbnz	r3, 8005a72 <_printf_float+0x18e>
 8005a6c:	6822      	ldr	r2, [r4, #0]
 8005a6e:	07d0      	lsls	r0, r2, #31
 8005a70:	d502      	bpl.n	8005a78 <_printf_float+0x194>
 8005a72:	3301      	adds	r3, #1
 8005a74:	440b      	add	r3, r1
 8005a76:	6123      	str	r3, [r4, #16]
 8005a78:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005a7a:	f04f 0900 	mov.w	r9, #0
 8005a7e:	e7db      	b.n	8005a38 <_printf_float+0x154>
 8005a80:	b913      	cbnz	r3, 8005a88 <_printf_float+0x1a4>
 8005a82:	6822      	ldr	r2, [r4, #0]
 8005a84:	07d2      	lsls	r2, r2, #31
 8005a86:	d501      	bpl.n	8005a8c <_printf_float+0x1a8>
 8005a88:	3302      	adds	r3, #2
 8005a8a:	e7f4      	b.n	8005a76 <_printf_float+0x192>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e7f2      	b.n	8005a76 <_printf_float+0x192>
 8005a90:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005a94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a96:	4299      	cmp	r1, r3
 8005a98:	db05      	blt.n	8005aa6 <_printf_float+0x1c2>
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	6121      	str	r1, [r4, #16]
 8005a9e:	07d8      	lsls	r0, r3, #31
 8005aa0:	d5ea      	bpl.n	8005a78 <_printf_float+0x194>
 8005aa2:	1c4b      	adds	r3, r1, #1
 8005aa4:	e7e7      	b.n	8005a76 <_printf_float+0x192>
 8005aa6:	2900      	cmp	r1, #0
 8005aa8:	bfd4      	ite	le
 8005aaa:	f1c1 0202 	rsble	r2, r1, #2
 8005aae:	2201      	movgt	r2, #1
 8005ab0:	4413      	add	r3, r2
 8005ab2:	e7e0      	b.n	8005a76 <_printf_float+0x192>
 8005ab4:	6823      	ldr	r3, [r4, #0]
 8005ab6:	055a      	lsls	r2, r3, #21
 8005ab8:	d407      	bmi.n	8005aca <_printf_float+0x1e6>
 8005aba:	6923      	ldr	r3, [r4, #16]
 8005abc:	4642      	mov	r2, r8
 8005abe:	4631      	mov	r1, r6
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	47b8      	blx	r7
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	d12b      	bne.n	8005b20 <_printf_float+0x23c>
 8005ac8:	e767      	b.n	800599a <_printf_float+0xb6>
 8005aca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ace:	f240 80dd 	bls.w	8005c8c <_printf_float+0x3a8>
 8005ad2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f7fb f815 	bl	8000b08 <__aeabi_dcmpeq>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	d033      	beq.n	8005b4a <_printf_float+0x266>
 8005ae2:	4a37      	ldr	r2, [pc, #220]	@ (8005bc0 <_printf_float+0x2dc>)
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	4631      	mov	r1, r6
 8005ae8:	4628      	mov	r0, r5
 8005aea:	47b8      	blx	r7
 8005aec:	3001      	adds	r0, #1
 8005aee:	f43f af54 	beq.w	800599a <_printf_float+0xb6>
 8005af2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005af6:	4543      	cmp	r3, r8
 8005af8:	db02      	blt.n	8005b00 <_printf_float+0x21c>
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	07d8      	lsls	r0, r3, #31
 8005afe:	d50f      	bpl.n	8005b20 <_printf_float+0x23c>
 8005b00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b04:	4631      	mov	r1, r6
 8005b06:	4628      	mov	r0, r5
 8005b08:	47b8      	blx	r7
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	f43f af45 	beq.w	800599a <_printf_float+0xb6>
 8005b10:	f04f 0900 	mov.w	r9, #0
 8005b14:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b18:	f104 0a1a 	add.w	sl, r4, #26
 8005b1c:	45c8      	cmp	r8, r9
 8005b1e:	dc09      	bgt.n	8005b34 <_printf_float+0x250>
 8005b20:	6823      	ldr	r3, [r4, #0]
 8005b22:	079b      	lsls	r3, r3, #30
 8005b24:	f100 8103 	bmi.w	8005d2e <_printf_float+0x44a>
 8005b28:	68e0      	ldr	r0, [r4, #12]
 8005b2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b2c:	4298      	cmp	r0, r3
 8005b2e:	bfb8      	it	lt
 8005b30:	4618      	movlt	r0, r3
 8005b32:	e734      	b.n	800599e <_printf_float+0xba>
 8005b34:	2301      	movs	r3, #1
 8005b36:	4652      	mov	r2, sl
 8005b38:	4631      	mov	r1, r6
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	47b8      	blx	r7
 8005b3e:	3001      	adds	r0, #1
 8005b40:	f43f af2b 	beq.w	800599a <_printf_float+0xb6>
 8005b44:	f109 0901 	add.w	r9, r9, #1
 8005b48:	e7e8      	b.n	8005b1c <_printf_float+0x238>
 8005b4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	dc39      	bgt.n	8005bc4 <_printf_float+0x2e0>
 8005b50:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc0 <_printf_float+0x2dc>)
 8005b52:	2301      	movs	r3, #1
 8005b54:	4631      	mov	r1, r6
 8005b56:	4628      	mov	r0, r5
 8005b58:	47b8      	blx	r7
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	f43f af1d 	beq.w	800599a <_printf_float+0xb6>
 8005b60:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005b64:	ea59 0303 	orrs.w	r3, r9, r3
 8005b68:	d102      	bne.n	8005b70 <_printf_float+0x28c>
 8005b6a:	6823      	ldr	r3, [r4, #0]
 8005b6c:	07d9      	lsls	r1, r3, #31
 8005b6e:	d5d7      	bpl.n	8005b20 <_printf_float+0x23c>
 8005b70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b74:	4631      	mov	r1, r6
 8005b76:	4628      	mov	r0, r5
 8005b78:	47b8      	blx	r7
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	f43f af0d 	beq.w	800599a <_printf_float+0xb6>
 8005b80:	f04f 0a00 	mov.w	sl, #0
 8005b84:	f104 0b1a 	add.w	fp, r4, #26
 8005b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b8a:	425b      	negs	r3, r3
 8005b8c:	4553      	cmp	r3, sl
 8005b8e:	dc01      	bgt.n	8005b94 <_printf_float+0x2b0>
 8005b90:	464b      	mov	r3, r9
 8005b92:	e793      	b.n	8005abc <_printf_float+0x1d8>
 8005b94:	2301      	movs	r3, #1
 8005b96:	465a      	mov	r2, fp
 8005b98:	4631      	mov	r1, r6
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	47b8      	blx	r7
 8005b9e:	3001      	adds	r0, #1
 8005ba0:	f43f aefb 	beq.w	800599a <_printf_float+0xb6>
 8005ba4:	f10a 0a01 	add.w	sl, sl, #1
 8005ba8:	e7ee      	b.n	8005b88 <_printf_float+0x2a4>
 8005baa:	bf00      	nop
 8005bac:	7fefffff 	.word	0x7fefffff
 8005bb0:	08008678 	.word	0x08008678
 8005bb4:	08008674 	.word	0x08008674
 8005bb8:	08008680 	.word	0x08008680
 8005bbc:	0800867c 	.word	0x0800867c
 8005bc0:	08008684 	.word	0x08008684
 8005bc4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005bc6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005bca:	4553      	cmp	r3, sl
 8005bcc:	bfa8      	it	ge
 8005bce:	4653      	movge	r3, sl
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	4699      	mov	r9, r3
 8005bd4:	dc36      	bgt.n	8005c44 <_printf_float+0x360>
 8005bd6:	f04f 0b00 	mov.w	fp, #0
 8005bda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bde:	f104 021a 	add.w	r2, r4, #26
 8005be2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005be4:	9306      	str	r3, [sp, #24]
 8005be6:	eba3 0309 	sub.w	r3, r3, r9
 8005bea:	455b      	cmp	r3, fp
 8005bec:	dc31      	bgt.n	8005c52 <_printf_float+0x36e>
 8005bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bf0:	459a      	cmp	sl, r3
 8005bf2:	dc3a      	bgt.n	8005c6a <_printf_float+0x386>
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	07da      	lsls	r2, r3, #31
 8005bf8:	d437      	bmi.n	8005c6a <_printf_float+0x386>
 8005bfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bfc:	ebaa 0903 	sub.w	r9, sl, r3
 8005c00:	9b06      	ldr	r3, [sp, #24]
 8005c02:	ebaa 0303 	sub.w	r3, sl, r3
 8005c06:	4599      	cmp	r9, r3
 8005c08:	bfa8      	it	ge
 8005c0a:	4699      	movge	r9, r3
 8005c0c:	f1b9 0f00 	cmp.w	r9, #0
 8005c10:	dc33      	bgt.n	8005c7a <_printf_float+0x396>
 8005c12:	f04f 0800 	mov.w	r8, #0
 8005c16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c1a:	f104 0b1a 	add.w	fp, r4, #26
 8005c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c20:	ebaa 0303 	sub.w	r3, sl, r3
 8005c24:	eba3 0309 	sub.w	r3, r3, r9
 8005c28:	4543      	cmp	r3, r8
 8005c2a:	f77f af79 	ble.w	8005b20 <_printf_float+0x23c>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	465a      	mov	r2, fp
 8005c32:	4631      	mov	r1, r6
 8005c34:	4628      	mov	r0, r5
 8005c36:	47b8      	blx	r7
 8005c38:	3001      	adds	r0, #1
 8005c3a:	f43f aeae 	beq.w	800599a <_printf_float+0xb6>
 8005c3e:	f108 0801 	add.w	r8, r8, #1
 8005c42:	e7ec      	b.n	8005c1e <_printf_float+0x33a>
 8005c44:	4642      	mov	r2, r8
 8005c46:	4631      	mov	r1, r6
 8005c48:	4628      	mov	r0, r5
 8005c4a:	47b8      	blx	r7
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	d1c2      	bne.n	8005bd6 <_printf_float+0x2f2>
 8005c50:	e6a3      	b.n	800599a <_printf_float+0xb6>
 8005c52:	2301      	movs	r3, #1
 8005c54:	4631      	mov	r1, r6
 8005c56:	4628      	mov	r0, r5
 8005c58:	9206      	str	r2, [sp, #24]
 8005c5a:	47b8      	blx	r7
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	f43f ae9c 	beq.w	800599a <_printf_float+0xb6>
 8005c62:	9a06      	ldr	r2, [sp, #24]
 8005c64:	f10b 0b01 	add.w	fp, fp, #1
 8005c68:	e7bb      	b.n	8005be2 <_printf_float+0x2fe>
 8005c6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c6e:	4631      	mov	r1, r6
 8005c70:	4628      	mov	r0, r5
 8005c72:	47b8      	blx	r7
 8005c74:	3001      	adds	r0, #1
 8005c76:	d1c0      	bne.n	8005bfa <_printf_float+0x316>
 8005c78:	e68f      	b.n	800599a <_printf_float+0xb6>
 8005c7a:	9a06      	ldr	r2, [sp, #24]
 8005c7c:	464b      	mov	r3, r9
 8005c7e:	4442      	add	r2, r8
 8005c80:	4631      	mov	r1, r6
 8005c82:	4628      	mov	r0, r5
 8005c84:	47b8      	blx	r7
 8005c86:	3001      	adds	r0, #1
 8005c88:	d1c3      	bne.n	8005c12 <_printf_float+0x32e>
 8005c8a:	e686      	b.n	800599a <_printf_float+0xb6>
 8005c8c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c90:	f1ba 0f01 	cmp.w	sl, #1
 8005c94:	dc01      	bgt.n	8005c9a <_printf_float+0x3b6>
 8005c96:	07db      	lsls	r3, r3, #31
 8005c98:	d536      	bpl.n	8005d08 <_printf_float+0x424>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	4642      	mov	r2, r8
 8005c9e:	4631      	mov	r1, r6
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	47b8      	blx	r7
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	f43f ae78 	beq.w	800599a <_printf_float+0xb6>
 8005caa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cae:	4631      	mov	r1, r6
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	47b8      	blx	r7
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	f43f ae70 	beq.w	800599a <_printf_float+0xb6>
 8005cba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cc6:	f7fa ff1f 	bl	8000b08 <__aeabi_dcmpeq>
 8005cca:	b9c0      	cbnz	r0, 8005cfe <_printf_float+0x41a>
 8005ccc:	4653      	mov	r3, sl
 8005cce:	f108 0201 	add.w	r2, r8, #1
 8005cd2:	4631      	mov	r1, r6
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	47b8      	blx	r7
 8005cd8:	3001      	adds	r0, #1
 8005cda:	d10c      	bne.n	8005cf6 <_printf_float+0x412>
 8005cdc:	e65d      	b.n	800599a <_printf_float+0xb6>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	465a      	mov	r2, fp
 8005ce2:	4631      	mov	r1, r6
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	47b8      	blx	r7
 8005ce8:	3001      	adds	r0, #1
 8005cea:	f43f ae56 	beq.w	800599a <_printf_float+0xb6>
 8005cee:	f108 0801 	add.w	r8, r8, #1
 8005cf2:	45d0      	cmp	r8, sl
 8005cf4:	dbf3      	blt.n	8005cde <_printf_float+0x3fa>
 8005cf6:	464b      	mov	r3, r9
 8005cf8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005cfc:	e6df      	b.n	8005abe <_printf_float+0x1da>
 8005cfe:	f04f 0800 	mov.w	r8, #0
 8005d02:	f104 0b1a 	add.w	fp, r4, #26
 8005d06:	e7f4      	b.n	8005cf2 <_printf_float+0x40e>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	4642      	mov	r2, r8
 8005d0c:	e7e1      	b.n	8005cd2 <_printf_float+0x3ee>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	464a      	mov	r2, r9
 8005d12:	4631      	mov	r1, r6
 8005d14:	4628      	mov	r0, r5
 8005d16:	47b8      	blx	r7
 8005d18:	3001      	adds	r0, #1
 8005d1a:	f43f ae3e 	beq.w	800599a <_printf_float+0xb6>
 8005d1e:	f108 0801 	add.w	r8, r8, #1
 8005d22:	68e3      	ldr	r3, [r4, #12]
 8005d24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005d26:	1a5b      	subs	r3, r3, r1
 8005d28:	4543      	cmp	r3, r8
 8005d2a:	dcf0      	bgt.n	8005d0e <_printf_float+0x42a>
 8005d2c:	e6fc      	b.n	8005b28 <_printf_float+0x244>
 8005d2e:	f04f 0800 	mov.w	r8, #0
 8005d32:	f104 0919 	add.w	r9, r4, #25
 8005d36:	e7f4      	b.n	8005d22 <_printf_float+0x43e>

08005d38 <_printf_common>:
 8005d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d3c:	4616      	mov	r6, r2
 8005d3e:	4698      	mov	r8, r3
 8005d40:	688a      	ldr	r2, [r1, #8]
 8005d42:	690b      	ldr	r3, [r1, #16]
 8005d44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	bfb8      	it	lt
 8005d4c:	4613      	movlt	r3, r2
 8005d4e:	6033      	str	r3, [r6, #0]
 8005d50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d54:	4607      	mov	r7, r0
 8005d56:	460c      	mov	r4, r1
 8005d58:	b10a      	cbz	r2, 8005d5e <_printf_common+0x26>
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	6033      	str	r3, [r6, #0]
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	0699      	lsls	r1, r3, #26
 8005d62:	bf42      	ittt	mi
 8005d64:	6833      	ldrmi	r3, [r6, #0]
 8005d66:	3302      	addmi	r3, #2
 8005d68:	6033      	strmi	r3, [r6, #0]
 8005d6a:	6825      	ldr	r5, [r4, #0]
 8005d6c:	f015 0506 	ands.w	r5, r5, #6
 8005d70:	d106      	bne.n	8005d80 <_printf_common+0x48>
 8005d72:	f104 0a19 	add.w	sl, r4, #25
 8005d76:	68e3      	ldr	r3, [r4, #12]
 8005d78:	6832      	ldr	r2, [r6, #0]
 8005d7a:	1a9b      	subs	r3, r3, r2
 8005d7c:	42ab      	cmp	r3, r5
 8005d7e:	dc26      	bgt.n	8005dce <_printf_common+0x96>
 8005d80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d84:	6822      	ldr	r2, [r4, #0]
 8005d86:	3b00      	subs	r3, #0
 8005d88:	bf18      	it	ne
 8005d8a:	2301      	movne	r3, #1
 8005d8c:	0692      	lsls	r2, r2, #26
 8005d8e:	d42b      	bmi.n	8005de8 <_printf_common+0xb0>
 8005d90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d94:	4641      	mov	r1, r8
 8005d96:	4638      	mov	r0, r7
 8005d98:	47c8      	blx	r9
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	d01e      	beq.n	8005ddc <_printf_common+0xa4>
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	6922      	ldr	r2, [r4, #16]
 8005da2:	f003 0306 	and.w	r3, r3, #6
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	bf02      	ittt	eq
 8005daa:	68e5      	ldreq	r5, [r4, #12]
 8005dac:	6833      	ldreq	r3, [r6, #0]
 8005dae:	1aed      	subeq	r5, r5, r3
 8005db0:	68a3      	ldr	r3, [r4, #8]
 8005db2:	bf0c      	ite	eq
 8005db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005db8:	2500      	movne	r5, #0
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	bfc4      	itt	gt
 8005dbe:	1a9b      	subgt	r3, r3, r2
 8005dc0:	18ed      	addgt	r5, r5, r3
 8005dc2:	2600      	movs	r6, #0
 8005dc4:	341a      	adds	r4, #26
 8005dc6:	42b5      	cmp	r5, r6
 8005dc8:	d11a      	bne.n	8005e00 <_printf_common+0xc8>
 8005dca:	2000      	movs	r0, #0
 8005dcc:	e008      	b.n	8005de0 <_printf_common+0xa8>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	4652      	mov	r2, sl
 8005dd2:	4641      	mov	r1, r8
 8005dd4:	4638      	mov	r0, r7
 8005dd6:	47c8      	blx	r9
 8005dd8:	3001      	adds	r0, #1
 8005dda:	d103      	bne.n	8005de4 <_printf_common+0xac>
 8005ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8005de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de4:	3501      	adds	r5, #1
 8005de6:	e7c6      	b.n	8005d76 <_printf_common+0x3e>
 8005de8:	18e1      	adds	r1, r4, r3
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	2030      	movs	r0, #48	@ 0x30
 8005dee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005df2:	4422      	add	r2, r4
 8005df4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005df8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005dfc:	3302      	adds	r3, #2
 8005dfe:	e7c7      	b.n	8005d90 <_printf_common+0x58>
 8005e00:	2301      	movs	r3, #1
 8005e02:	4622      	mov	r2, r4
 8005e04:	4641      	mov	r1, r8
 8005e06:	4638      	mov	r0, r7
 8005e08:	47c8      	blx	r9
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	d0e6      	beq.n	8005ddc <_printf_common+0xa4>
 8005e0e:	3601      	adds	r6, #1
 8005e10:	e7d9      	b.n	8005dc6 <_printf_common+0x8e>
	...

08005e14 <_printf_i>:
 8005e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e18:	7e0f      	ldrb	r7, [r1, #24]
 8005e1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e1c:	2f78      	cmp	r7, #120	@ 0x78
 8005e1e:	4691      	mov	r9, r2
 8005e20:	4680      	mov	r8, r0
 8005e22:	460c      	mov	r4, r1
 8005e24:	469a      	mov	sl, r3
 8005e26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e2a:	d807      	bhi.n	8005e3c <_printf_i+0x28>
 8005e2c:	2f62      	cmp	r7, #98	@ 0x62
 8005e2e:	d80a      	bhi.n	8005e46 <_printf_i+0x32>
 8005e30:	2f00      	cmp	r7, #0
 8005e32:	f000 80d1 	beq.w	8005fd8 <_printf_i+0x1c4>
 8005e36:	2f58      	cmp	r7, #88	@ 0x58
 8005e38:	f000 80b8 	beq.w	8005fac <_printf_i+0x198>
 8005e3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e44:	e03a      	b.n	8005ebc <_printf_i+0xa8>
 8005e46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e4a:	2b15      	cmp	r3, #21
 8005e4c:	d8f6      	bhi.n	8005e3c <_printf_i+0x28>
 8005e4e:	a101      	add	r1, pc, #4	@ (adr r1, 8005e54 <_printf_i+0x40>)
 8005e50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e54:	08005ead 	.word	0x08005ead
 8005e58:	08005ec1 	.word	0x08005ec1
 8005e5c:	08005e3d 	.word	0x08005e3d
 8005e60:	08005e3d 	.word	0x08005e3d
 8005e64:	08005e3d 	.word	0x08005e3d
 8005e68:	08005e3d 	.word	0x08005e3d
 8005e6c:	08005ec1 	.word	0x08005ec1
 8005e70:	08005e3d 	.word	0x08005e3d
 8005e74:	08005e3d 	.word	0x08005e3d
 8005e78:	08005e3d 	.word	0x08005e3d
 8005e7c:	08005e3d 	.word	0x08005e3d
 8005e80:	08005fbf 	.word	0x08005fbf
 8005e84:	08005eeb 	.word	0x08005eeb
 8005e88:	08005f79 	.word	0x08005f79
 8005e8c:	08005e3d 	.word	0x08005e3d
 8005e90:	08005e3d 	.word	0x08005e3d
 8005e94:	08005fe1 	.word	0x08005fe1
 8005e98:	08005e3d 	.word	0x08005e3d
 8005e9c:	08005eeb 	.word	0x08005eeb
 8005ea0:	08005e3d 	.word	0x08005e3d
 8005ea4:	08005e3d 	.word	0x08005e3d
 8005ea8:	08005f81 	.word	0x08005f81
 8005eac:	6833      	ldr	r3, [r6, #0]
 8005eae:	1d1a      	adds	r2, r3, #4
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6032      	str	r2, [r6, #0]
 8005eb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005eb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e09c      	b.n	8005ffa <_printf_i+0x1e6>
 8005ec0:	6833      	ldr	r3, [r6, #0]
 8005ec2:	6820      	ldr	r0, [r4, #0]
 8005ec4:	1d19      	adds	r1, r3, #4
 8005ec6:	6031      	str	r1, [r6, #0]
 8005ec8:	0606      	lsls	r6, r0, #24
 8005eca:	d501      	bpl.n	8005ed0 <_printf_i+0xbc>
 8005ecc:	681d      	ldr	r5, [r3, #0]
 8005ece:	e003      	b.n	8005ed8 <_printf_i+0xc4>
 8005ed0:	0645      	lsls	r5, r0, #25
 8005ed2:	d5fb      	bpl.n	8005ecc <_printf_i+0xb8>
 8005ed4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ed8:	2d00      	cmp	r5, #0
 8005eda:	da03      	bge.n	8005ee4 <_printf_i+0xd0>
 8005edc:	232d      	movs	r3, #45	@ 0x2d
 8005ede:	426d      	negs	r5, r5
 8005ee0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ee4:	4858      	ldr	r0, [pc, #352]	@ (8006048 <_printf_i+0x234>)
 8005ee6:	230a      	movs	r3, #10
 8005ee8:	e011      	b.n	8005f0e <_printf_i+0xfa>
 8005eea:	6821      	ldr	r1, [r4, #0]
 8005eec:	6833      	ldr	r3, [r6, #0]
 8005eee:	0608      	lsls	r0, r1, #24
 8005ef0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ef4:	d402      	bmi.n	8005efc <_printf_i+0xe8>
 8005ef6:	0649      	lsls	r1, r1, #25
 8005ef8:	bf48      	it	mi
 8005efa:	b2ad      	uxthmi	r5, r5
 8005efc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005efe:	4852      	ldr	r0, [pc, #328]	@ (8006048 <_printf_i+0x234>)
 8005f00:	6033      	str	r3, [r6, #0]
 8005f02:	bf14      	ite	ne
 8005f04:	230a      	movne	r3, #10
 8005f06:	2308      	moveq	r3, #8
 8005f08:	2100      	movs	r1, #0
 8005f0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f0e:	6866      	ldr	r6, [r4, #4]
 8005f10:	60a6      	str	r6, [r4, #8]
 8005f12:	2e00      	cmp	r6, #0
 8005f14:	db05      	blt.n	8005f22 <_printf_i+0x10e>
 8005f16:	6821      	ldr	r1, [r4, #0]
 8005f18:	432e      	orrs	r6, r5
 8005f1a:	f021 0104 	bic.w	r1, r1, #4
 8005f1e:	6021      	str	r1, [r4, #0]
 8005f20:	d04b      	beq.n	8005fba <_printf_i+0x1a6>
 8005f22:	4616      	mov	r6, r2
 8005f24:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f28:	fb03 5711 	mls	r7, r3, r1, r5
 8005f2c:	5dc7      	ldrb	r7, [r0, r7]
 8005f2e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f32:	462f      	mov	r7, r5
 8005f34:	42bb      	cmp	r3, r7
 8005f36:	460d      	mov	r5, r1
 8005f38:	d9f4      	bls.n	8005f24 <_printf_i+0x110>
 8005f3a:	2b08      	cmp	r3, #8
 8005f3c:	d10b      	bne.n	8005f56 <_printf_i+0x142>
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	07df      	lsls	r7, r3, #31
 8005f42:	d508      	bpl.n	8005f56 <_printf_i+0x142>
 8005f44:	6923      	ldr	r3, [r4, #16]
 8005f46:	6861      	ldr	r1, [r4, #4]
 8005f48:	4299      	cmp	r1, r3
 8005f4a:	bfde      	ittt	le
 8005f4c:	2330      	movle	r3, #48	@ 0x30
 8005f4e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f52:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f56:	1b92      	subs	r2, r2, r6
 8005f58:	6122      	str	r2, [r4, #16]
 8005f5a:	f8cd a000 	str.w	sl, [sp]
 8005f5e:	464b      	mov	r3, r9
 8005f60:	aa03      	add	r2, sp, #12
 8005f62:	4621      	mov	r1, r4
 8005f64:	4640      	mov	r0, r8
 8005f66:	f7ff fee7 	bl	8005d38 <_printf_common>
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	d14a      	bne.n	8006004 <_printf_i+0x1f0>
 8005f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f72:	b004      	add	sp, #16
 8005f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f78:	6823      	ldr	r3, [r4, #0]
 8005f7a:	f043 0320 	orr.w	r3, r3, #32
 8005f7e:	6023      	str	r3, [r4, #0]
 8005f80:	4832      	ldr	r0, [pc, #200]	@ (800604c <_printf_i+0x238>)
 8005f82:	2778      	movs	r7, #120	@ 0x78
 8005f84:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f88:	6823      	ldr	r3, [r4, #0]
 8005f8a:	6831      	ldr	r1, [r6, #0]
 8005f8c:	061f      	lsls	r7, r3, #24
 8005f8e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f92:	d402      	bmi.n	8005f9a <_printf_i+0x186>
 8005f94:	065f      	lsls	r7, r3, #25
 8005f96:	bf48      	it	mi
 8005f98:	b2ad      	uxthmi	r5, r5
 8005f9a:	6031      	str	r1, [r6, #0]
 8005f9c:	07d9      	lsls	r1, r3, #31
 8005f9e:	bf44      	itt	mi
 8005fa0:	f043 0320 	orrmi.w	r3, r3, #32
 8005fa4:	6023      	strmi	r3, [r4, #0]
 8005fa6:	b11d      	cbz	r5, 8005fb0 <_printf_i+0x19c>
 8005fa8:	2310      	movs	r3, #16
 8005faa:	e7ad      	b.n	8005f08 <_printf_i+0xf4>
 8005fac:	4826      	ldr	r0, [pc, #152]	@ (8006048 <_printf_i+0x234>)
 8005fae:	e7e9      	b.n	8005f84 <_printf_i+0x170>
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	f023 0320 	bic.w	r3, r3, #32
 8005fb6:	6023      	str	r3, [r4, #0]
 8005fb8:	e7f6      	b.n	8005fa8 <_printf_i+0x194>
 8005fba:	4616      	mov	r6, r2
 8005fbc:	e7bd      	b.n	8005f3a <_printf_i+0x126>
 8005fbe:	6833      	ldr	r3, [r6, #0]
 8005fc0:	6825      	ldr	r5, [r4, #0]
 8005fc2:	6961      	ldr	r1, [r4, #20]
 8005fc4:	1d18      	adds	r0, r3, #4
 8005fc6:	6030      	str	r0, [r6, #0]
 8005fc8:	062e      	lsls	r6, r5, #24
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	d501      	bpl.n	8005fd2 <_printf_i+0x1be>
 8005fce:	6019      	str	r1, [r3, #0]
 8005fd0:	e002      	b.n	8005fd8 <_printf_i+0x1c4>
 8005fd2:	0668      	lsls	r0, r5, #25
 8005fd4:	d5fb      	bpl.n	8005fce <_printf_i+0x1ba>
 8005fd6:	8019      	strh	r1, [r3, #0]
 8005fd8:	2300      	movs	r3, #0
 8005fda:	6123      	str	r3, [r4, #16]
 8005fdc:	4616      	mov	r6, r2
 8005fde:	e7bc      	b.n	8005f5a <_printf_i+0x146>
 8005fe0:	6833      	ldr	r3, [r6, #0]
 8005fe2:	1d1a      	adds	r2, r3, #4
 8005fe4:	6032      	str	r2, [r6, #0]
 8005fe6:	681e      	ldr	r6, [r3, #0]
 8005fe8:	6862      	ldr	r2, [r4, #4]
 8005fea:	2100      	movs	r1, #0
 8005fec:	4630      	mov	r0, r6
 8005fee:	f7fa f90f 	bl	8000210 <memchr>
 8005ff2:	b108      	cbz	r0, 8005ff8 <_printf_i+0x1e4>
 8005ff4:	1b80      	subs	r0, r0, r6
 8005ff6:	6060      	str	r0, [r4, #4]
 8005ff8:	6863      	ldr	r3, [r4, #4]
 8005ffa:	6123      	str	r3, [r4, #16]
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006002:	e7aa      	b.n	8005f5a <_printf_i+0x146>
 8006004:	6923      	ldr	r3, [r4, #16]
 8006006:	4632      	mov	r2, r6
 8006008:	4649      	mov	r1, r9
 800600a:	4640      	mov	r0, r8
 800600c:	47d0      	blx	sl
 800600e:	3001      	adds	r0, #1
 8006010:	d0ad      	beq.n	8005f6e <_printf_i+0x15a>
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	079b      	lsls	r3, r3, #30
 8006016:	d413      	bmi.n	8006040 <_printf_i+0x22c>
 8006018:	68e0      	ldr	r0, [r4, #12]
 800601a:	9b03      	ldr	r3, [sp, #12]
 800601c:	4298      	cmp	r0, r3
 800601e:	bfb8      	it	lt
 8006020:	4618      	movlt	r0, r3
 8006022:	e7a6      	b.n	8005f72 <_printf_i+0x15e>
 8006024:	2301      	movs	r3, #1
 8006026:	4632      	mov	r2, r6
 8006028:	4649      	mov	r1, r9
 800602a:	4640      	mov	r0, r8
 800602c:	47d0      	blx	sl
 800602e:	3001      	adds	r0, #1
 8006030:	d09d      	beq.n	8005f6e <_printf_i+0x15a>
 8006032:	3501      	adds	r5, #1
 8006034:	68e3      	ldr	r3, [r4, #12]
 8006036:	9903      	ldr	r1, [sp, #12]
 8006038:	1a5b      	subs	r3, r3, r1
 800603a:	42ab      	cmp	r3, r5
 800603c:	dcf2      	bgt.n	8006024 <_printf_i+0x210>
 800603e:	e7eb      	b.n	8006018 <_printf_i+0x204>
 8006040:	2500      	movs	r5, #0
 8006042:	f104 0619 	add.w	r6, r4, #25
 8006046:	e7f5      	b.n	8006034 <_printf_i+0x220>
 8006048:	08008686 	.word	0x08008686
 800604c:	08008697 	.word	0x08008697

08006050 <std>:
 8006050:	2300      	movs	r3, #0
 8006052:	b510      	push	{r4, lr}
 8006054:	4604      	mov	r4, r0
 8006056:	e9c0 3300 	strd	r3, r3, [r0]
 800605a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800605e:	6083      	str	r3, [r0, #8]
 8006060:	8181      	strh	r1, [r0, #12]
 8006062:	6643      	str	r3, [r0, #100]	@ 0x64
 8006064:	81c2      	strh	r2, [r0, #14]
 8006066:	6183      	str	r3, [r0, #24]
 8006068:	4619      	mov	r1, r3
 800606a:	2208      	movs	r2, #8
 800606c:	305c      	adds	r0, #92	@ 0x5c
 800606e:	f000 f94c 	bl	800630a <memset>
 8006072:	4b0d      	ldr	r3, [pc, #52]	@ (80060a8 <std+0x58>)
 8006074:	6263      	str	r3, [r4, #36]	@ 0x24
 8006076:	4b0d      	ldr	r3, [pc, #52]	@ (80060ac <std+0x5c>)
 8006078:	62a3      	str	r3, [r4, #40]	@ 0x28
 800607a:	4b0d      	ldr	r3, [pc, #52]	@ (80060b0 <std+0x60>)
 800607c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800607e:	4b0d      	ldr	r3, [pc, #52]	@ (80060b4 <std+0x64>)
 8006080:	6323      	str	r3, [r4, #48]	@ 0x30
 8006082:	4b0d      	ldr	r3, [pc, #52]	@ (80060b8 <std+0x68>)
 8006084:	6224      	str	r4, [r4, #32]
 8006086:	429c      	cmp	r4, r3
 8006088:	d006      	beq.n	8006098 <std+0x48>
 800608a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800608e:	4294      	cmp	r4, r2
 8006090:	d002      	beq.n	8006098 <std+0x48>
 8006092:	33d0      	adds	r3, #208	@ 0xd0
 8006094:	429c      	cmp	r4, r3
 8006096:	d105      	bne.n	80060a4 <std+0x54>
 8006098:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800609c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060a0:	f000 b9be 	b.w	8006420 <__retarget_lock_init_recursive>
 80060a4:	bd10      	pop	{r4, pc}
 80060a6:	bf00      	nop
 80060a8:	08006285 	.word	0x08006285
 80060ac:	080062a7 	.word	0x080062a7
 80060b0:	080062df 	.word	0x080062df
 80060b4:	08006303 	.word	0x08006303
 80060b8:	200004dc 	.word	0x200004dc

080060bc <stdio_exit_handler>:
 80060bc:	4a02      	ldr	r2, [pc, #8]	@ (80060c8 <stdio_exit_handler+0xc>)
 80060be:	4903      	ldr	r1, [pc, #12]	@ (80060cc <stdio_exit_handler+0x10>)
 80060c0:	4803      	ldr	r0, [pc, #12]	@ (80060d0 <stdio_exit_handler+0x14>)
 80060c2:	f000 b869 	b.w	8006198 <_fwalk_sglue>
 80060c6:	bf00      	nop
 80060c8:	20000010 	.word	0x20000010
 80060cc:	08007d85 	.word	0x08007d85
 80060d0:	20000020 	.word	0x20000020

080060d4 <cleanup_stdio>:
 80060d4:	6841      	ldr	r1, [r0, #4]
 80060d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006108 <cleanup_stdio+0x34>)
 80060d8:	4299      	cmp	r1, r3
 80060da:	b510      	push	{r4, lr}
 80060dc:	4604      	mov	r4, r0
 80060de:	d001      	beq.n	80060e4 <cleanup_stdio+0x10>
 80060e0:	f001 fe50 	bl	8007d84 <_fflush_r>
 80060e4:	68a1      	ldr	r1, [r4, #8]
 80060e6:	4b09      	ldr	r3, [pc, #36]	@ (800610c <cleanup_stdio+0x38>)
 80060e8:	4299      	cmp	r1, r3
 80060ea:	d002      	beq.n	80060f2 <cleanup_stdio+0x1e>
 80060ec:	4620      	mov	r0, r4
 80060ee:	f001 fe49 	bl	8007d84 <_fflush_r>
 80060f2:	68e1      	ldr	r1, [r4, #12]
 80060f4:	4b06      	ldr	r3, [pc, #24]	@ (8006110 <cleanup_stdio+0x3c>)
 80060f6:	4299      	cmp	r1, r3
 80060f8:	d004      	beq.n	8006104 <cleanup_stdio+0x30>
 80060fa:	4620      	mov	r0, r4
 80060fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006100:	f001 be40 	b.w	8007d84 <_fflush_r>
 8006104:	bd10      	pop	{r4, pc}
 8006106:	bf00      	nop
 8006108:	200004dc 	.word	0x200004dc
 800610c:	20000544 	.word	0x20000544
 8006110:	200005ac 	.word	0x200005ac

08006114 <global_stdio_init.part.0>:
 8006114:	b510      	push	{r4, lr}
 8006116:	4b0b      	ldr	r3, [pc, #44]	@ (8006144 <global_stdio_init.part.0+0x30>)
 8006118:	4c0b      	ldr	r4, [pc, #44]	@ (8006148 <global_stdio_init.part.0+0x34>)
 800611a:	4a0c      	ldr	r2, [pc, #48]	@ (800614c <global_stdio_init.part.0+0x38>)
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	4620      	mov	r0, r4
 8006120:	2200      	movs	r2, #0
 8006122:	2104      	movs	r1, #4
 8006124:	f7ff ff94 	bl	8006050 <std>
 8006128:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800612c:	2201      	movs	r2, #1
 800612e:	2109      	movs	r1, #9
 8006130:	f7ff ff8e 	bl	8006050 <std>
 8006134:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006138:	2202      	movs	r2, #2
 800613a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800613e:	2112      	movs	r1, #18
 8006140:	f7ff bf86 	b.w	8006050 <std>
 8006144:	20000614 	.word	0x20000614
 8006148:	200004dc 	.word	0x200004dc
 800614c:	080060bd 	.word	0x080060bd

08006150 <__sfp_lock_acquire>:
 8006150:	4801      	ldr	r0, [pc, #4]	@ (8006158 <__sfp_lock_acquire+0x8>)
 8006152:	f000 b966 	b.w	8006422 <__retarget_lock_acquire_recursive>
 8006156:	bf00      	nop
 8006158:	2000061d 	.word	0x2000061d

0800615c <__sfp_lock_release>:
 800615c:	4801      	ldr	r0, [pc, #4]	@ (8006164 <__sfp_lock_release+0x8>)
 800615e:	f000 b961 	b.w	8006424 <__retarget_lock_release_recursive>
 8006162:	bf00      	nop
 8006164:	2000061d 	.word	0x2000061d

08006168 <__sinit>:
 8006168:	b510      	push	{r4, lr}
 800616a:	4604      	mov	r4, r0
 800616c:	f7ff fff0 	bl	8006150 <__sfp_lock_acquire>
 8006170:	6a23      	ldr	r3, [r4, #32]
 8006172:	b11b      	cbz	r3, 800617c <__sinit+0x14>
 8006174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006178:	f7ff bff0 	b.w	800615c <__sfp_lock_release>
 800617c:	4b04      	ldr	r3, [pc, #16]	@ (8006190 <__sinit+0x28>)
 800617e:	6223      	str	r3, [r4, #32]
 8006180:	4b04      	ldr	r3, [pc, #16]	@ (8006194 <__sinit+0x2c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1f5      	bne.n	8006174 <__sinit+0xc>
 8006188:	f7ff ffc4 	bl	8006114 <global_stdio_init.part.0>
 800618c:	e7f2      	b.n	8006174 <__sinit+0xc>
 800618e:	bf00      	nop
 8006190:	080060d5 	.word	0x080060d5
 8006194:	20000614 	.word	0x20000614

08006198 <_fwalk_sglue>:
 8006198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800619c:	4607      	mov	r7, r0
 800619e:	4688      	mov	r8, r1
 80061a0:	4614      	mov	r4, r2
 80061a2:	2600      	movs	r6, #0
 80061a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061a8:	f1b9 0901 	subs.w	r9, r9, #1
 80061ac:	d505      	bpl.n	80061ba <_fwalk_sglue+0x22>
 80061ae:	6824      	ldr	r4, [r4, #0]
 80061b0:	2c00      	cmp	r4, #0
 80061b2:	d1f7      	bne.n	80061a4 <_fwalk_sglue+0xc>
 80061b4:	4630      	mov	r0, r6
 80061b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061ba:	89ab      	ldrh	r3, [r5, #12]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d907      	bls.n	80061d0 <_fwalk_sglue+0x38>
 80061c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061c4:	3301      	adds	r3, #1
 80061c6:	d003      	beq.n	80061d0 <_fwalk_sglue+0x38>
 80061c8:	4629      	mov	r1, r5
 80061ca:	4638      	mov	r0, r7
 80061cc:	47c0      	blx	r8
 80061ce:	4306      	orrs	r6, r0
 80061d0:	3568      	adds	r5, #104	@ 0x68
 80061d2:	e7e9      	b.n	80061a8 <_fwalk_sglue+0x10>

080061d4 <sniprintf>:
 80061d4:	b40c      	push	{r2, r3}
 80061d6:	b530      	push	{r4, r5, lr}
 80061d8:	4b18      	ldr	r3, [pc, #96]	@ (800623c <sniprintf+0x68>)
 80061da:	1e0c      	subs	r4, r1, #0
 80061dc:	681d      	ldr	r5, [r3, #0]
 80061de:	b09d      	sub	sp, #116	@ 0x74
 80061e0:	da08      	bge.n	80061f4 <sniprintf+0x20>
 80061e2:	238b      	movs	r3, #139	@ 0x8b
 80061e4:	602b      	str	r3, [r5, #0]
 80061e6:	f04f 30ff 	mov.w	r0, #4294967295
 80061ea:	b01d      	add	sp, #116	@ 0x74
 80061ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061f0:	b002      	add	sp, #8
 80061f2:	4770      	bx	lr
 80061f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80061f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80061fc:	f04f 0300 	mov.w	r3, #0
 8006200:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006202:	bf14      	ite	ne
 8006204:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006208:	4623      	moveq	r3, r4
 800620a:	9304      	str	r3, [sp, #16]
 800620c:	9307      	str	r3, [sp, #28]
 800620e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006212:	9002      	str	r0, [sp, #8]
 8006214:	9006      	str	r0, [sp, #24]
 8006216:	f8ad 3016 	strh.w	r3, [sp, #22]
 800621a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800621c:	ab21      	add	r3, sp, #132	@ 0x84
 800621e:	a902      	add	r1, sp, #8
 8006220:	4628      	mov	r0, r5
 8006222:	9301      	str	r3, [sp, #4]
 8006224:	f001 fc2e 	bl	8007a84 <_svfiprintf_r>
 8006228:	1c43      	adds	r3, r0, #1
 800622a:	bfbc      	itt	lt
 800622c:	238b      	movlt	r3, #139	@ 0x8b
 800622e:	602b      	strlt	r3, [r5, #0]
 8006230:	2c00      	cmp	r4, #0
 8006232:	d0da      	beq.n	80061ea <sniprintf+0x16>
 8006234:	9b02      	ldr	r3, [sp, #8]
 8006236:	2200      	movs	r2, #0
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	e7d6      	b.n	80061ea <sniprintf+0x16>
 800623c:	2000001c 	.word	0x2000001c

08006240 <siprintf>:
 8006240:	b40e      	push	{r1, r2, r3}
 8006242:	b510      	push	{r4, lr}
 8006244:	b09d      	sub	sp, #116	@ 0x74
 8006246:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006248:	9002      	str	r0, [sp, #8]
 800624a:	9006      	str	r0, [sp, #24]
 800624c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006250:	480a      	ldr	r0, [pc, #40]	@ (800627c <siprintf+0x3c>)
 8006252:	9107      	str	r1, [sp, #28]
 8006254:	9104      	str	r1, [sp, #16]
 8006256:	490a      	ldr	r1, [pc, #40]	@ (8006280 <siprintf+0x40>)
 8006258:	f853 2b04 	ldr.w	r2, [r3], #4
 800625c:	9105      	str	r1, [sp, #20]
 800625e:	2400      	movs	r4, #0
 8006260:	a902      	add	r1, sp, #8
 8006262:	6800      	ldr	r0, [r0, #0]
 8006264:	9301      	str	r3, [sp, #4]
 8006266:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006268:	f001 fc0c 	bl	8007a84 <_svfiprintf_r>
 800626c:	9b02      	ldr	r3, [sp, #8]
 800626e:	701c      	strb	r4, [r3, #0]
 8006270:	b01d      	add	sp, #116	@ 0x74
 8006272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006276:	b003      	add	sp, #12
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	2000001c 	.word	0x2000001c
 8006280:	ffff0208 	.word	0xffff0208

08006284 <__sread>:
 8006284:	b510      	push	{r4, lr}
 8006286:	460c      	mov	r4, r1
 8006288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800628c:	f000 f87a 	bl	8006384 <_read_r>
 8006290:	2800      	cmp	r0, #0
 8006292:	bfab      	itete	ge
 8006294:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006296:	89a3      	ldrhlt	r3, [r4, #12]
 8006298:	181b      	addge	r3, r3, r0
 800629a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800629e:	bfac      	ite	ge
 80062a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80062a2:	81a3      	strhlt	r3, [r4, #12]
 80062a4:	bd10      	pop	{r4, pc}

080062a6 <__swrite>:
 80062a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062aa:	461f      	mov	r7, r3
 80062ac:	898b      	ldrh	r3, [r1, #12]
 80062ae:	05db      	lsls	r3, r3, #23
 80062b0:	4605      	mov	r5, r0
 80062b2:	460c      	mov	r4, r1
 80062b4:	4616      	mov	r6, r2
 80062b6:	d505      	bpl.n	80062c4 <__swrite+0x1e>
 80062b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062bc:	2302      	movs	r3, #2
 80062be:	2200      	movs	r2, #0
 80062c0:	f000 f84e 	bl	8006360 <_lseek_r>
 80062c4:	89a3      	ldrh	r3, [r4, #12]
 80062c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062ce:	81a3      	strh	r3, [r4, #12]
 80062d0:	4632      	mov	r2, r6
 80062d2:	463b      	mov	r3, r7
 80062d4:	4628      	mov	r0, r5
 80062d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062da:	f000 b865 	b.w	80063a8 <_write_r>

080062de <__sseek>:
 80062de:	b510      	push	{r4, lr}
 80062e0:	460c      	mov	r4, r1
 80062e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062e6:	f000 f83b 	bl	8006360 <_lseek_r>
 80062ea:	1c43      	adds	r3, r0, #1
 80062ec:	89a3      	ldrh	r3, [r4, #12]
 80062ee:	bf15      	itete	ne
 80062f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80062f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80062f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80062fa:	81a3      	strheq	r3, [r4, #12]
 80062fc:	bf18      	it	ne
 80062fe:	81a3      	strhne	r3, [r4, #12]
 8006300:	bd10      	pop	{r4, pc}

08006302 <__sclose>:
 8006302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006306:	f000 b81b 	b.w	8006340 <_close_r>

0800630a <memset>:
 800630a:	4402      	add	r2, r0
 800630c:	4603      	mov	r3, r0
 800630e:	4293      	cmp	r3, r2
 8006310:	d100      	bne.n	8006314 <memset+0xa>
 8006312:	4770      	bx	lr
 8006314:	f803 1b01 	strb.w	r1, [r3], #1
 8006318:	e7f9      	b.n	800630e <memset+0x4>

0800631a <strcat>:
 800631a:	b510      	push	{r4, lr}
 800631c:	4602      	mov	r2, r0
 800631e:	7814      	ldrb	r4, [r2, #0]
 8006320:	4613      	mov	r3, r2
 8006322:	3201      	adds	r2, #1
 8006324:	2c00      	cmp	r4, #0
 8006326:	d1fa      	bne.n	800631e <strcat+0x4>
 8006328:	3b01      	subs	r3, #1
 800632a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800632e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006332:	2a00      	cmp	r2, #0
 8006334:	d1f9      	bne.n	800632a <strcat+0x10>
 8006336:	bd10      	pop	{r4, pc}

08006338 <_localeconv_r>:
 8006338:	4800      	ldr	r0, [pc, #0]	@ (800633c <_localeconv_r+0x4>)
 800633a:	4770      	bx	lr
 800633c:	2000015c 	.word	0x2000015c

08006340 <_close_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	4d06      	ldr	r5, [pc, #24]	@ (800635c <_close_r+0x1c>)
 8006344:	2300      	movs	r3, #0
 8006346:	4604      	mov	r4, r0
 8006348:	4608      	mov	r0, r1
 800634a:	602b      	str	r3, [r5, #0]
 800634c:	f7fb fe2d 	bl	8001faa <_close>
 8006350:	1c43      	adds	r3, r0, #1
 8006352:	d102      	bne.n	800635a <_close_r+0x1a>
 8006354:	682b      	ldr	r3, [r5, #0]
 8006356:	b103      	cbz	r3, 800635a <_close_r+0x1a>
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	bd38      	pop	{r3, r4, r5, pc}
 800635c:	20000618 	.word	0x20000618

08006360 <_lseek_r>:
 8006360:	b538      	push	{r3, r4, r5, lr}
 8006362:	4d07      	ldr	r5, [pc, #28]	@ (8006380 <_lseek_r+0x20>)
 8006364:	4604      	mov	r4, r0
 8006366:	4608      	mov	r0, r1
 8006368:	4611      	mov	r1, r2
 800636a:	2200      	movs	r2, #0
 800636c:	602a      	str	r2, [r5, #0]
 800636e:	461a      	mov	r2, r3
 8006370:	f7fb fe42 	bl	8001ff8 <_lseek>
 8006374:	1c43      	adds	r3, r0, #1
 8006376:	d102      	bne.n	800637e <_lseek_r+0x1e>
 8006378:	682b      	ldr	r3, [r5, #0]
 800637a:	b103      	cbz	r3, 800637e <_lseek_r+0x1e>
 800637c:	6023      	str	r3, [r4, #0]
 800637e:	bd38      	pop	{r3, r4, r5, pc}
 8006380:	20000618 	.word	0x20000618

08006384 <_read_r>:
 8006384:	b538      	push	{r3, r4, r5, lr}
 8006386:	4d07      	ldr	r5, [pc, #28]	@ (80063a4 <_read_r+0x20>)
 8006388:	4604      	mov	r4, r0
 800638a:	4608      	mov	r0, r1
 800638c:	4611      	mov	r1, r2
 800638e:	2200      	movs	r2, #0
 8006390:	602a      	str	r2, [r5, #0]
 8006392:	461a      	mov	r2, r3
 8006394:	f7fb fdd0 	bl	8001f38 <_read>
 8006398:	1c43      	adds	r3, r0, #1
 800639a:	d102      	bne.n	80063a2 <_read_r+0x1e>
 800639c:	682b      	ldr	r3, [r5, #0]
 800639e:	b103      	cbz	r3, 80063a2 <_read_r+0x1e>
 80063a0:	6023      	str	r3, [r4, #0]
 80063a2:	bd38      	pop	{r3, r4, r5, pc}
 80063a4:	20000618 	.word	0x20000618

080063a8 <_write_r>:
 80063a8:	b538      	push	{r3, r4, r5, lr}
 80063aa:	4d07      	ldr	r5, [pc, #28]	@ (80063c8 <_write_r+0x20>)
 80063ac:	4604      	mov	r4, r0
 80063ae:	4608      	mov	r0, r1
 80063b0:	4611      	mov	r1, r2
 80063b2:	2200      	movs	r2, #0
 80063b4:	602a      	str	r2, [r5, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	f7fb fddb 	bl	8001f72 <_write>
 80063bc:	1c43      	adds	r3, r0, #1
 80063be:	d102      	bne.n	80063c6 <_write_r+0x1e>
 80063c0:	682b      	ldr	r3, [r5, #0]
 80063c2:	b103      	cbz	r3, 80063c6 <_write_r+0x1e>
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	bd38      	pop	{r3, r4, r5, pc}
 80063c8:	20000618 	.word	0x20000618

080063cc <__errno>:
 80063cc:	4b01      	ldr	r3, [pc, #4]	@ (80063d4 <__errno+0x8>)
 80063ce:	6818      	ldr	r0, [r3, #0]
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	2000001c 	.word	0x2000001c

080063d8 <__libc_init_array>:
 80063d8:	b570      	push	{r4, r5, r6, lr}
 80063da:	4d0d      	ldr	r5, [pc, #52]	@ (8006410 <__libc_init_array+0x38>)
 80063dc:	4c0d      	ldr	r4, [pc, #52]	@ (8006414 <__libc_init_array+0x3c>)
 80063de:	1b64      	subs	r4, r4, r5
 80063e0:	10a4      	asrs	r4, r4, #2
 80063e2:	2600      	movs	r6, #0
 80063e4:	42a6      	cmp	r6, r4
 80063e6:	d109      	bne.n	80063fc <__libc_init_array+0x24>
 80063e8:	4d0b      	ldr	r5, [pc, #44]	@ (8006418 <__libc_init_array+0x40>)
 80063ea:	4c0c      	ldr	r4, [pc, #48]	@ (800641c <__libc_init_array+0x44>)
 80063ec:	f002 f868 	bl	80084c0 <_init>
 80063f0:	1b64      	subs	r4, r4, r5
 80063f2:	10a4      	asrs	r4, r4, #2
 80063f4:	2600      	movs	r6, #0
 80063f6:	42a6      	cmp	r6, r4
 80063f8:	d105      	bne.n	8006406 <__libc_init_array+0x2e>
 80063fa:	bd70      	pop	{r4, r5, r6, pc}
 80063fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006400:	4798      	blx	r3
 8006402:	3601      	adds	r6, #1
 8006404:	e7ee      	b.n	80063e4 <__libc_init_array+0xc>
 8006406:	f855 3b04 	ldr.w	r3, [r5], #4
 800640a:	4798      	blx	r3
 800640c:	3601      	adds	r6, #1
 800640e:	e7f2      	b.n	80063f6 <__libc_init_array+0x1e>
 8006410:	080089f4 	.word	0x080089f4
 8006414:	080089f4 	.word	0x080089f4
 8006418:	080089f4 	.word	0x080089f4
 800641c:	080089f8 	.word	0x080089f8

08006420 <__retarget_lock_init_recursive>:
 8006420:	4770      	bx	lr

08006422 <__retarget_lock_acquire_recursive>:
 8006422:	4770      	bx	lr

08006424 <__retarget_lock_release_recursive>:
 8006424:	4770      	bx	lr

08006426 <quorem>:
 8006426:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	6903      	ldr	r3, [r0, #16]
 800642c:	690c      	ldr	r4, [r1, #16]
 800642e:	42a3      	cmp	r3, r4
 8006430:	4607      	mov	r7, r0
 8006432:	db7e      	blt.n	8006532 <quorem+0x10c>
 8006434:	3c01      	subs	r4, #1
 8006436:	f101 0814 	add.w	r8, r1, #20
 800643a:	00a3      	lsls	r3, r4, #2
 800643c:	f100 0514 	add.w	r5, r0, #20
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006446:	9301      	str	r3, [sp, #4]
 8006448:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800644c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006450:	3301      	adds	r3, #1
 8006452:	429a      	cmp	r2, r3
 8006454:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006458:	fbb2 f6f3 	udiv	r6, r2, r3
 800645c:	d32e      	bcc.n	80064bc <quorem+0x96>
 800645e:	f04f 0a00 	mov.w	sl, #0
 8006462:	46c4      	mov	ip, r8
 8006464:	46ae      	mov	lr, r5
 8006466:	46d3      	mov	fp, sl
 8006468:	f85c 3b04 	ldr.w	r3, [ip], #4
 800646c:	b298      	uxth	r0, r3
 800646e:	fb06 a000 	mla	r0, r6, r0, sl
 8006472:	0c02      	lsrs	r2, r0, #16
 8006474:	0c1b      	lsrs	r3, r3, #16
 8006476:	fb06 2303 	mla	r3, r6, r3, r2
 800647a:	f8de 2000 	ldr.w	r2, [lr]
 800647e:	b280      	uxth	r0, r0
 8006480:	b292      	uxth	r2, r2
 8006482:	1a12      	subs	r2, r2, r0
 8006484:	445a      	add	r2, fp
 8006486:	f8de 0000 	ldr.w	r0, [lr]
 800648a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800648e:	b29b      	uxth	r3, r3
 8006490:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006494:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006498:	b292      	uxth	r2, r2
 800649a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800649e:	45e1      	cmp	r9, ip
 80064a0:	f84e 2b04 	str.w	r2, [lr], #4
 80064a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80064a8:	d2de      	bcs.n	8006468 <quorem+0x42>
 80064aa:	9b00      	ldr	r3, [sp, #0]
 80064ac:	58eb      	ldr	r3, [r5, r3]
 80064ae:	b92b      	cbnz	r3, 80064bc <quorem+0x96>
 80064b0:	9b01      	ldr	r3, [sp, #4]
 80064b2:	3b04      	subs	r3, #4
 80064b4:	429d      	cmp	r5, r3
 80064b6:	461a      	mov	r2, r3
 80064b8:	d32f      	bcc.n	800651a <quorem+0xf4>
 80064ba:	613c      	str	r4, [r7, #16]
 80064bc:	4638      	mov	r0, r7
 80064be:	f001 f97d 	bl	80077bc <__mcmp>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	db25      	blt.n	8006512 <quorem+0xec>
 80064c6:	4629      	mov	r1, r5
 80064c8:	2000      	movs	r0, #0
 80064ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80064ce:	f8d1 c000 	ldr.w	ip, [r1]
 80064d2:	fa1f fe82 	uxth.w	lr, r2
 80064d6:	fa1f f38c 	uxth.w	r3, ip
 80064da:	eba3 030e 	sub.w	r3, r3, lr
 80064de:	4403      	add	r3, r0
 80064e0:	0c12      	lsrs	r2, r2, #16
 80064e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80064e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064f0:	45c1      	cmp	r9, r8
 80064f2:	f841 3b04 	str.w	r3, [r1], #4
 80064f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80064fa:	d2e6      	bcs.n	80064ca <quorem+0xa4>
 80064fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006500:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006504:	b922      	cbnz	r2, 8006510 <quorem+0xea>
 8006506:	3b04      	subs	r3, #4
 8006508:	429d      	cmp	r5, r3
 800650a:	461a      	mov	r2, r3
 800650c:	d30b      	bcc.n	8006526 <quorem+0x100>
 800650e:	613c      	str	r4, [r7, #16]
 8006510:	3601      	adds	r6, #1
 8006512:	4630      	mov	r0, r6
 8006514:	b003      	add	sp, #12
 8006516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800651a:	6812      	ldr	r2, [r2, #0]
 800651c:	3b04      	subs	r3, #4
 800651e:	2a00      	cmp	r2, #0
 8006520:	d1cb      	bne.n	80064ba <quorem+0x94>
 8006522:	3c01      	subs	r4, #1
 8006524:	e7c6      	b.n	80064b4 <quorem+0x8e>
 8006526:	6812      	ldr	r2, [r2, #0]
 8006528:	3b04      	subs	r3, #4
 800652a:	2a00      	cmp	r2, #0
 800652c:	d1ef      	bne.n	800650e <quorem+0xe8>
 800652e:	3c01      	subs	r4, #1
 8006530:	e7ea      	b.n	8006508 <quorem+0xe2>
 8006532:	2000      	movs	r0, #0
 8006534:	e7ee      	b.n	8006514 <quorem+0xee>
	...

08006538 <_dtoa_r>:
 8006538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800653c:	69c7      	ldr	r7, [r0, #28]
 800653e:	b097      	sub	sp, #92	@ 0x5c
 8006540:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006544:	ec55 4b10 	vmov	r4, r5, d0
 8006548:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800654a:	9107      	str	r1, [sp, #28]
 800654c:	4681      	mov	r9, r0
 800654e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006550:	9311      	str	r3, [sp, #68]	@ 0x44
 8006552:	b97f      	cbnz	r7, 8006574 <_dtoa_r+0x3c>
 8006554:	2010      	movs	r0, #16
 8006556:	f000 fe09 	bl	800716c <malloc>
 800655a:	4602      	mov	r2, r0
 800655c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006560:	b920      	cbnz	r0, 800656c <_dtoa_r+0x34>
 8006562:	4ba9      	ldr	r3, [pc, #676]	@ (8006808 <_dtoa_r+0x2d0>)
 8006564:	21ef      	movs	r1, #239	@ 0xef
 8006566:	48a9      	ldr	r0, [pc, #676]	@ (800680c <_dtoa_r+0x2d4>)
 8006568:	f001 fc6c 	bl	8007e44 <__assert_func>
 800656c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006570:	6007      	str	r7, [r0, #0]
 8006572:	60c7      	str	r7, [r0, #12]
 8006574:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006578:	6819      	ldr	r1, [r3, #0]
 800657a:	b159      	cbz	r1, 8006594 <_dtoa_r+0x5c>
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	604a      	str	r2, [r1, #4]
 8006580:	2301      	movs	r3, #1
 8006582:	4093      	lsls	r3, r2
 8006584:	608b      	str	r3, [r1, #8]
 8006586:	4648      	mov	r0, r9
 8006588:	f000 fee6 	bl	8007358 <_Bfree>
 800658c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	1e2b      	subs	r3, r5, #0
 8006596:	bfb9      	ittee	lt
 8006598:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800659c:	9305      	strlt	r3, [sp, #20]
 800659e:	2300      	movge	r3, #0
 80065a0:	6033      	strge	r3, [r6, #0]
 80065a2:	9f05      	ldr	r7, [sp, #20]
 80065a4:	4b9a      	ldr	r3, [pc, #616]	@ (8006810 <_dtoa_r+0x2d8>)
 80065a6:	bfbc      	itt	lt
 80065a8:	2201      	movlt	r2, #1
 80065aa:	6032      	strlt	r2, [r6, #0]
 80065ac:	43bb      	bics	r3, r7
 80065ae:	d112      	bne.n	80065d6 <_dtoa_r+0x9e>
 80065b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80065b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80065b6:	6013      	str	r3, [r2, #0]
 80065b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80065bc:	4323      	orrs	r3, r4
 80065be:	f000 855a 	beq.w	8007076 <_dtoa_r+0xb3e>
 80065c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80065c4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006824 <_dtoa_r+0x2ec>
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 855c 	beq.w	8007086 <_dtoa_r+0xb4e>
 80065ce:	f10a 0303 	add.w	r3, sl, #3
 80065d2:	f000 bd56 	b.w	8007082 <_dtoa_r+0xb4a>
 80065d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80065da:	2200      	movs	r2, #0
 80065dc:	ec51 0b17 	vmov	r0, r1, d7
 80065e0:	2300      	movs	r3, #0
 80065e2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80065e6:	f7fa fa8f 	bl	8000b08 <__aeabi_dcmpeq>
 80065ea:	4680      	mov	r8, r0
 80065ec:	b158      	cbz	r0, 8006606 <_dtoa_r+0xce>
 80065ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80065f0:	2301      	movs	r3, #1
 80065f2:	6013      	str	r3, [r2, #0]
 80065f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80065f6:	b113      	cbz	r3, 80065fe <_dtoa_r+0xc6>
 80065f8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80065fa:	4b86      	ldr	r3, [pc, #536]	@ (8006814 <_dtoa_r+0x2dc>)
 80065fc:	6013      	str	r3, [r2, #0]
 80065fe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006828 <_dtoa_r+0x2f0>
 8006602:	f000 bd40 	b.w	8007086 <_dtoa_r+0xb4e>
 8006606:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800660a:	aa14      	add	r2, sp, #80	@ 0x50
 800660c:	a915      	add	r1, sp, #84	@ 0x54
 800660e:	4648      	mov	r0, r9
 8006610:	f001 f984 	bl	800791c <__d2b>
 8006614:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006618:	9002      	str	r0, [sp, #8]
 800661a:	2e00      	cmp	r6, #0
 800661c:	d078      	beq.n	8006710 <_dtoa_r+0x1d8>
 800661e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006620:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006628:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800662c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006630:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006634:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006638:	4619      	mov	r1, r3
 800663a:	2200      	movs	r2, #0
 800663c:	4b76      	ldr	r3, [pc, #472]	@ (8006818 <_dtoa_r+0x2e0>)
 800663e:	f7f9 fe43 	bl	80002c8 <__aeabi_dsub>
 8006642:	a36b      	add	r3, pc, #428	@ (adr r3, 80067f0 <_dtoa_r+0x2b8>)
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	f7f9 fff6 	bl	8000638 <__aeabi_dmul>
 800664c:	a36a      	add	r3, pc, #424	@ (adr r3, 80067f8 <_dtoa_r+0x2c0>)
 800664e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006652:	f7f9 fe3b 	bl	80002cc <__adddf3>
 8006656:	4604      	mov	r4, r0
 8006658:	4630      	mov	r0, r6
 800665a:	460d      	mov	r5, r1
 800665c:	f7f9 ff82 	bl	8000564 <__aeabi_i2d>
 8006660:	a367      	add	r3, pc, #412	@ (adr r3, 8006800 <_dtoa_r+0x2c8>)
 8006662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006666:	f7f9 ffe7 	bl	8000638 <__aeabi_dmul>
 800666a:	4602      	mov	r2, r0
 800666c:	460b      	mov	r3, r1
 800666e:	4620      	mov	r0, r4
 8006670:	4629      	mov	r1, r5
 8006672:	f7f9 fe2b 	bl	80002cc <__adddf3>
 8006676:	4604      	mov	r4, r0
 8006678:	460d      	mov	r5, r1
 800667a:	f7fa fa8d 	bl	8000b98 <__aeabi_d2iz>
 800667e:	2200      	movs	r2, #0
 8006680:	4607      	mov	r7, r0
 8006682:	2300      	movs	r3, #0
 8006684:	4620      	mov	r0, r4
 8006686:	4629      	mov	r1, r5
 8006688:	f7fa fa48 	bl	8000b1c <__aeabi_dcmplt>
 800668c:	b140      	cbz	r0, 80066a0 <_dtoa_r+0x168>
 800668e:	4638      	mov	r0, r7
 8006690:	f7f9 ff68 	bl	8000564 <__aeabi_i2d>
 8006694:	4622      	mov	r2, r4
 8006696:	462b      	mov	r3, r5
 8006698:	f7fa fa36 	bl	8000b08 <__aeabi_dcmpeq>
 800669c:	b900      	cbnz	r0, 80066a0 <_dtoa_r+0x168>
 800669e:	3f01      	subs	r7, #1
 80066a0:	2f16      	cmp	r7, #22
 80066a2:	d852      	bhi.n	800674a <_dtoa_r+0x212>
 80066a4:	4b5d      	ldr	r3, [pc, #372]	@ (800681c <_dtoa_r+0x2e4>)
 80066a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80066aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80066b2:	f7fa fa33 	bl	8000b1c <__aeabi_dcmplt>
 80066b6:	2800      	cmp	r0, #0
 80066b8:	d049      	beq.n	800674e <_dtoa_r+0x216>
 80066ba:	3f01      	subs	r7, #1
 80066bc:	2300      	movs	r3, #0
 80066be:	9310      	str	r3, [sp, #64]	@ 0x40
 80066c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80066c2:	1b9b      	subs	r3, r3, r6
 80066c4:	1e5a      	subs	r2, r3, #1
 80066c6:	bf45      	ittet	mi
 80066c8:	f1c3 0301 	rsbmi	r3, r3, #1
 80066cc:	9300      	strmi	r3, [sp, #0]
 80066ce:	2300      	movpl	r3, #0
 80066d0:	2300      	movmi	r3, #0
 80066d2:	9206      	str	r2, [sp, #24]
 80066d4:	bf54      	ite	pl
 80066d6:	9300      	strpl	r3, [sp, #0]
 80066d8:	9306      	strmi	r3, [sp, #24]
 80066da:	2f00      	cmp	r7, #0
 80066dc:	db39      	blt.n	8006752 <_dtoa_r+0x21a>
 80066de:	9b06      	ldr	r3, [sp, #24]
 80066e0:	970d      	str	r7, [sp, #52]	@ 0x34
 80066e2:	443b      	add	r3, r7
 80066e4:	9306      	str	r3, [sp, #24]
 80066e6:	2300      	movs	r3, #0
 80066e8:	9308      	str	r3, [sp, #32]
 80066ea:	9b07      	ldr	r3, [sp, #28]
 80066ec:	2b09      	cmp	r3, #9
 80066ee:	d863      	bhi.n	80067b8 <_dtoa_r+0x280>
 80066f0:	2b05      	cmp	r3, #5
 80066f2:	bfc4      	itt	gt
 80066f4:	3b04      	subgt	r3, #4
 80066f6:	9307      	strgt	r3, [sp, #28]
 80066f8:	9b07      	ldr	r3, [sp, #28]
 80066fa:	f1a3 0302 	sub.w	r3, r3, #2
 80066fe:	bfcc      	ite	gt
 8006700:	2400      	movgt	r4, #0
 8006702:	2401      	movle	r4, #1
 8006704:	2b03      	cmp	r3, #3
 8006706:	d863      	bhi.n	80067d0 <_dtoa_r+0x298>
 8006708:	e8df f003 	tbb	[pc, r3]
 800670c:	2b375452 	.word	0x2b375452
 8006710:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006714:	441e      	add	r6, r3
 8006716:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800671a:	2b20      	cmp	r3, #32
 800671c:	bfc1      	itttt	gt
 800671e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006722:	409f      	lslgt	r7, r3
 8006724:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006728:	fa24 f303 	lsrgt.w	r3, r4, r3
 800672c:	bfd6      	itet	le
 800672e:	f1c3 0320 	rsble	r3, r3, #32
 8006732:	ea47 0003 	orrgt.w	r0, r7, r3
 8006736:	fa04 f003 	lslle.w	r0, r4, r3
 800673a:	f7f9 ff03 	bl	8000544 <__aeabi_ui2d>
 800673e:	2201      	movs	r2, #1
 8006740:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006744:	3e01      	subs	r6, #1
 8006746:	9212      	str	r2, [sp, #72]	@ 0x48
 8006748:	e776      	b.n	8006638 <_dtoa_r+0x100>
 800674a:	2301      	movs	r3, #1
 800674c:	e7b7      	b.n	80066be <_dtoa_r+0x186>
 800674e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006750:	e7b6      	b.n	80066c0 <_dtoa_r+0x188>
 8006752:	9b00      	ldr	r3, [sp, #0]
 8006754:	1bdb      	subs	r3, r3, r7
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	427b      	negs	r3, r7
 800675a:	9308      	str	r3, [sp, #32]
 800675c:	2300      	movs	r3, #0
 800675e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006760:	e7c3      	b.n	80066ea <_dtoa_r+0x1b2>
 8006762:	2301      	movs	r3, #1
 8006764:	9309      	str	r3, [sp, #36]	@ 0x24
 8006766:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006768:	eb07 0b03 	add.w	fp, r7, r3
 800676c:	f10b 0301 	add.w	r3, fp, #1
 8006770:	2b01      	cmp	r3, #1
 8006772:	9303      	str	r3, [sp, #12]
 8006774:	bfb8      	it	lt
 8006776:	2301      	movlt	r3, #1
 8006778:	e006      	b.n	8006788 <_dtoa_r+0x250>
 800677a:	2301      	movs	r3, #1
 800677c:	9309      	str	r3, [sp, #36]	@ 0x24
 800677e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006780:	2b00      	cmp	r3, #0
 8006782:	dd28      	ble.n	80067d6 <_dtoa_r+0x29e>
 8006784:	469b      	mov	fp, r3
 8006786:	9303      	str	r3, [sp, #12]
 8006788:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800678c:	2100      	movs	r1, #0
 800678e:	2204      	movs	r2, #4
 8006790:	f102 0514 	add.w	r5, r2, #20
 8006794:	429d      	cmp	r5, r3
 8006796:	d926      	bls.n	80067e6 <_dtoa_r+0x2ae>
 8006798:	6041      	str	r1, [r0, #4]
 800679a:	4648      	mov	r0, r9
 800679c:	f000 fd9c 	bl	80072d8 <_Balloc>
 80067a0:	4682      	mov	sl, r0
 80067a2:	2800      	cmp	r0, #0
 80067a4:	d142      	bne.n	800682c <_dtoa_r+0x2f4>
 80067a6:	4b1e      	ldr	r3, [pc, #120]	@ (8006820 <_dtoa_r+0x2e8>)
 80067a8:	4602      	mov	r2, r0
 80067aa:	f240 11af 	movw	r1, #431	@ 0x1af
 80067ae:	e6da      	b.n	8006566 <_dtoa_r+0x2e>
 80067b0:	2300      	movs	r3, #0
 80067b2:	e7e3      	b.n	800677c <_dtoa_r+0x244>
 80067b4:	2300      	movs	r3, #0
 80067b6:	e7d5      	b.n	8006764 <_dtoa_r+0x22c>
 80067b8:	2401      	movs	r4, #1
 80067ba:	2300      	movs	r3, #0
 80067bc:	9307      	str	r3, [sp, #28]
 80067be:	9409      	str	r4, [sp, #36]	@ 0x24
 80067c0:	f04f 3bff 	mov.w	fp, #4294967295
 80067c4:	2200      	movs	r2, #0
 80067c6:	f8cd b00c 	str.w	fp, [sp, #12]
 80067ca:	2312      	movs	r3, #18
 80067cc:	920c      	str	r2, [sp, #48]	@ 0x30
 80067ce:	e7db      	b.n	8006788 <_dtoa_r+0x250>
 80067d0:	2301      	movs	r3, #1
 80067d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80067d4:	e7f4      	b.n	80067c0 <_dtoa_r+0x288>
 80067d6:	f04f 0b01 	mov.w	fp, #1
 80067da:	f8cd b00c 	str.w	fp, [sp, #12]
 80067de:	465b      	mov	r3, fp
 80067e0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80067e4:	e7d0      	b.n	8006788 <_dtoa_r+0x250>
 80067e6:	3101      	adds	r1, #1
 80067e8:	0052      	lsls	r2, r2, #1
 80067ea:	e7d1      	b.n	8006790 <_dtoa_r+0x258>
 80067ec:	f3af 8000 	nop.w
 80067f0:	636f4361 	.word	0x636f4361
 80067f4:	3fd287a7 	.word	0x3fd287a7
 80067f8:	8b60c8b3 	.word	0x8b60c8b3
 80067fc:	3fc68a28 	.word	0x3fc68a28
 8006800:	509f79fb 	.word	0x509f79fb
 8006804:	3fd34413 	.word	0x3fd34413
 8006808:	080086b5 	.word	0x080086b5
 800680c:	080086cc 	.word	0x080086cc
 8006810:	7ff00000 	.word	0x7ff00000
 8006814:	08008685 	.word	0x08008685
 8006818:	3ff80000 	.word	0x3ff80000
 800681c:	08008820 	.word	0x08008820
 8006820:	08008724 	.word	0x08008724
 8006824:	080086b1 	.word	0x080086b1
 8006828:	08008684 	.word	0x08008684
 800682c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006830:	6018      	str	r0, [r3, #0]
 8006832:	9b03      	ldr	r3, [sp, #12]
 8006834:	2b0e      	cmp	r3, #14
 8006836:	f200 80a1 	bhi.w	800697c <_dtoa_r+0x444>
 800683a:	2c00      	cmp	r4, #0
 800683c:	f000 809e 	beq.w	800697c <_dtoa_r+0x444>
 8006840:	2f00      	cmp	r7, #0
 8006842:	dd33      	ble.n	80068ac <_dtoa_r+0x374>
 8006844:	4b9c      	ldr	r3, [pc, #624]	@ (8006ab8 <_dtoa_r+0x580>)
 8006846:	f007 020f 	and.w	r2, r7, #15
 800684a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800684e:	ed93 7b00 	vldr	d7, [r3]
 8006852:	05f8      	lsls	r0, r7, #23
 8006854:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006858:	ea4f 1427 	mov.w	r4, r7, asr #4
 800685c:	d516      	bpl.n	800688c <_dtoa_r+0x354>
 800685e:	4b97      	ldr	r3, [pc, #604]	@ (8006abc <_dtoa_r+0x584>)
 8006860:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006864:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006868:	f7fa f810 	bl	800088c <__aeabi_ddiv>
 800686c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006870:	f004 040f 	and.w	r4, r4, #15
 8006874:	2603      	movs	r6, #3
 8006876:	4d91      	ldr	r5, [pc, #580]	@ (8006abc <_dtoa_r+0x584>)
 8006878:	b954      	cbnz	r4, 8006890 <_dtoa_r+0x358>
 800687a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800687e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006882:	f7fa f803 	bl	800088c <__aeabi_ddiv>
 8006886:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800688a:	e028      	b.n	80068de <_dtoa_r+0x3a6>
 800688c:	2602      	movs	r6, #2
 800688e:	e7f2      	b.n	8006876 <_dtoa_r+0x33e>
 8006890:	07e1      	lsls	r1, r4, #31
 8006892:	d508      	bpl.n	80068a6 <_dtoa_r+0x36e>
 8006894:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006898:	e9d5 2300 	ldrd	r2, r3, [r5]
 800689c:	f7f9 fecc 	bl	8000638 <__aeabi_dmul>
 80068a0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80068a4:	3601      	adds	r6, #1
 80068a6:	1064      	asrs	r4, r4, #1
 80068a8:	3508      	adds	r5, #8
 80068aa:	e7e5      	b.n	8006878 <_dtoa_r+0x340>
 80068ac:	f000 80af 	beq.w	8006a0e <_dtoa_r+0x4d6>
 80068b0:	427c      	negs	r4, r7
 80068b2:	4b81      	ldr	r3, [pc, #516]	@ (8006ab8 <_dtoa_r+0x580>)
 80068b4:	4d81      	ldr	r5, [pc, #516]	@ (8006abc <_dtoa_r+0x584>)
 80068b6:	f004 020f 	and.w	r2, r4, #15
 80068ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80068c6:	f7f9 feb7 	bl	8000638 <__aeabi_dmul>
 80068ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068ce:	1124      	asrs	r4, r4, #4
 80068d0:	2300      	movs	r3, #0
 80068d2:	2602      	movs	r6, #2
 80068d4:	2c00      	cmp	r4, #0
 80068d6:	f040 808f 	bne.w	80069f8 <_dtoa_r+0x4c0>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1d3      	bne.n	8006886 <_dtoa_r+0x34e>
 80068de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80068e0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 8094 	beq.w	8006a12 <_dtoa_r+0x4da>
 80068ea:	4b75      	ldr	r3, [pc, #468]	@ (8006ac0 <_dtoa_r+0x588>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	4620      	mov	r0, r4
 80068f0:	4629      	mov	r1, r5
 80068f2:	f7fa f913 	bl	8000b1c <__aeabi_dcmplt>
 80068f6:	2800      	cmp	r0, #0
 80068f8:	f000 808b 	beq.w	8006a12 <_dtoa_r+0x4da>
 80068fc:	9b03      	ldr	r3, [sp, #12]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 8087 	beq.w	8006a12 <_dtoa_r+0x4da>
 8006904:	f1bb 0f00 	cmp.w	fp, #0
 8006908:	dd34      	ble.n	8006974 <_dtoa_r+0x43c>
 800690a:	4620      	mov	r0, r4
 800690c:	4b6d      	ldr	r3, [pc, #436]	@ (8006ac4 <_dtoa_r+0x58c>)
 800690e:	2200      	movs	r2, #0
 8006910:	4629      	mov	r1, r5
 8006912:	f7f9 fe91 	bl	8000638 <__aeabi_dmul>
 8006916:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800691a:	f107 38ff 	add.w	r8, r7, #4294967295
 800691e:	3601      	adds	r6, #1
 8006920:	465c      	mov	r4, fp
 8006922:	4630      	mov	r0, r6
 8006924:	f7f9 fe1e 	bl	8000564 <__aeabi_i2d>
 8006928:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800692c:	f7f9 fe84 	bl	8000638 <__aeabi_dmul>
 8006930:	4b65      	ldr	r3, [pc, #404]	@ (8006ac8 <_dtoa_r+0x590>)
 8006932:	2200      	movs	r2, #0
 8006934:	f7f9 fcca 	bl	80002cc <__adddf3>
 8006938:	4605      	mov	r5, r0
 800693a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800693e:	2c00      	cmp	r4, #0
 8006940:	d16a      	bne.n	8006a18 <_dtoa_r+0x4e0>
 8006942:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006946:	4b61      	ldr	r3, [pc, #388]	@ (8006acc <_dtoa_r+0x594>)
 8006948:	2200      	movs	r2, #0
 800694a:	f7f9 fcbd 	bl	80002c8 <__aeabi_dsub>
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006956:	462a      	mov	r2, r5
 8006958:	4633      	mov	r3, r6
 800695a:	f7fa f8fd 	bl	8000b58 <__aeabi_dcmpgt>
 800695e:	2800      	cmp	r0, #0
 8006960:	f040 8298 	bne.w	8006e94 <_dtoa_r+0x95c>
 8006964:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006968:	462a      	mov	r2, r5
 800696a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800696e:	f7fa f8d5 	bl	8000b1c <__aeabi_dcmplt>
 8006972:	bb38      	cbnz	r0, 80069c4 <_dtoa_r+0x48c>
 8006974:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006978:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800697c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800697e:	2b00      	cmp	r3, #0
 8006980:	f2c0 8157 	blt.w	8006c32 <_dtoa_r+0x6fa>
 8006984:	2f0e      	cmp	r7, #14
 8006986:	f300 8154 	bgt.w	8006c32 <_dtoa_r+0x6fa>
 800698a:	4b4b      	ldr	r3, [pc, #300]	@ (8006ab8 <_dtoa_r+0x580>)
 800698c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006990:	ed93 7b00 	vldr	d7, [r3]
 8006994:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006996:	2b00      	cmp	r3, #0
 8006998:	ed8d 7b00 	vstr	d7, [sp]
 800699c:	f280 80e5 	bge.w	8006b6a <_dtoa_r+0x632>
 80069a0:	9b03      	ldr	r3, [sp, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f300 80e1 	bgt.w	8006b6a <_dtoa_r+0x632>
 80069a8:	d10c      	bne.n	80069c4 <_dtoa_r+0x48c>
 80069aa:	4b48      	ldr	r3, [pc, #288]	@ (8006acc <_dtoa_r+0x594>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	ec51 0b17 	vmov	r0, r1, d7
 80069b2:	f7f9 fe41 	bl	8000638 <__aeabi_dmul>
 80069b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069ba:	f7fa f8c3 	bl	8000b44 <__aeabi_dcmpge>
 80069be:	2800      	cmp	r0, #0
 80069c0:	f000 8266 	beq.w	8006e90 <_dtoa_r+0x958>
 80069c4:	2400      	movs	r4, #0
 80069c6:	4625      	mov	r5, r4
 80069c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80069ca:	4656      	mov	r6, sl
 80069cc:	ea6f 0803 	mvn.w	r8, r3
 80069d0:	2700      	movs	r7, #0
 80069d2:	4621      	mov	r1, r4
 80069d4:	4648      	mov	r0, r9
 80069d6:	f000 fcbf 	bl	8007358 <_Bfree>
 80069da:	2d00      	cmp	r5, #0
 80069dc:	f000 80bd 	beq.w	8006b5a <_dtoa_r+0x622>
 80069e0:	b12f      	cbz	r7, 80069ee <_dtoa_r+0x4b6>
 80069e2:	42af      	cmp	r7, r5
 80069e4:	d003      	beq.n	80069ee <_dtoa_r+0x4b6>
 80069e6:	4639      	mov	r1, r7
 80069e8:	4648      	mov	r0, r9
 80069ea:	f000 fcb5 	bl	8007358 <_Bfree>
 80069ee:	4629      	mov	r1, r5
 80069f0:	4648      	mov	r0, r9
 80069f2:	f000 fcb1 	bl	8007358 <_Bfree>
 80069f6:	e0b0      	b.n	8006b5a <_dtoa_r+0x622>
 80069f8:	07e2      	lsls	r2, r4, #31
 80069fa:	d505      	bpl.n	8006a08 <_dtoa_r+0x4d0>
 80069fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a00:	f7f9 fe1a 	bl	8000638 <__aeabi_dmul>
 8006a04:	3601      	adds	r6, #1
 8006a06:	2301      	movs	r3, #1
 8006a08:	1064      	asrs	r4, r4, #1
 8006a0a:	3508      	adds	r5, #8
 8006a0c:	e762      	b.n	80068d4 <_dtoa_r+0x39c>
 8006a0e:	2602      	movs	r6, #2
 8006a10:	e765      	b.n	80068de <_dtoa_r+0x3a6>
 8006a12:	9c03      	ldr	r4, [sp, #12]
 8006a14:	46b8      	mov	r8, r7
 8006a16:	e784      	b.n	8006922 <_dtoa_r+0x3ea>
 8006a18:	4b27      	ldr	r3, [pc, #156]	@ (8006ab8 <_dtoa_r+0x580>)
 8006a1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a24:	4454      	add	r4, sl
 8006a26:	2900      	cmp	r1, #0
 8006a28:	d054      	beq.n	8006ad4 <_dtoa_r+0x59c>
 8006a2a:	4929      	ldr	r1, [pc, #164]	@ (8006ad0 <_dtoa_r+0x598>)
 8006a2c:	2000      	movs	r0, #0
 8006a2e:	f7f9 ff2d 	bl	800088c <__aeabi_ddiv>
 8006a32:	4633      	mov	r3, r6
 8006a34:	462a      	mov	r2, r5
 8006a36:	f7f9 fc47 	bl	80002c8 <__aeabi_dsub>
 8006a3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006a3e:	4656      	mov	r6, sl
 8006a40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a44:	f7fa f8a8 	bl	8000b98 <__aeabi_d2iz>
 8006a48:	4605      	mov	r5, r0
 8006a4a:	f7f9 fd8b 	bl	8000564 <__aeabi_i2d>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a56:	f7f9 fc37 	bl	80002c8 <__aeabi_dsub>
 8006a5a:	3530      	adds	r5, #48	@ 0x30
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a64:	f806 5b01 	strb.w	r5, [r6], #1
 8006a68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006a6c:	f7fa f856 	bl	8000b1c <__aeabi_dcmplt>
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d172      	bne.n	8006b5a <_dtoa_r+0x622>
 8006a74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a78:	4911      	ldr	r1, [pc, #68]	@ (8006ac0 <_dtoa_r+0x588>)
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	f7f9 fc24 	bl	80002c8 <__aeabi_dsub>
 8006a80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006a84:	f7fa f84a 	bl	8000b1c <__aeabi_dcmplt>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	f040 80b4 	bne.w	8006bf6 <_dtoa_r+0x6be>
 8006a8e:	42a6      	cmp	r6, r4
 8006a90:	f43f af70 	beq.w	8006974 <_dtoa_r+0x43c>
 8006a94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006a98:	4b0a      	ldr	r3, [pc, #40]	@ (8006ac4 <_dtoa_r+0x58c>)
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f7f9 fdcc 	bl	8000638 <__aeabi_dmul>
 8006aa0:	4b08      	ldr	r3, [pc, #32]	@ (8006ac4 <_dtoa_r+0x58c>)
 8006aa2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aac:	f7f9 fdc4 	bl	8000638 <__aeabi_dmul>
 8006ab0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ab4:	e7c4      	b.n	8006a40 <_dtoa_r+0x508>
 8006ab6:	bf00      	nop
 8006ab8:	08008820 	.word	0x08008820
 8006abc:	080087f8 	.word	0x080087f8
 8006ac0:	3ff00000 	.word	0x3ff00000
 8006ac4:	40240000 	.word	0x40240000
 8006ac8:	401c0000 	.word	0x401c0000
 8006acc:	40140000 	.word	0x40140000
 8006ad0:	3fe00000 	.word	0x3fe00000
 8006ad4:	4631      	mov	r1, r6
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	f7f9 fdae 	bl	8000638 <__aeabi_dmul>
 8006adc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006ae0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006ae2:	4656      	mov	r6, sl
 8006ae4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ae8:	f7fa f856 	bl	8000b98 <__aeabi_d2iz>
 8006aec:	4605      	mov	r5, r0
 8006aee:	f7f9 fd39 	bl	8000564 <__aeabi_i2d>
 8006af2:	4602      	mov	r2, r0
 8006af4:	460b      	mov	r3, r1
 8006af6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006afa:	f7f9 fbe5 	bl	80002c8 <__aeabi_dsub>
 8006afe:	3530      	adds	r5, #48	@ 0x30
 8006b00:	f806 5b01 	strb.w	r5, [r6], #1
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	42a6      	cmp	r6, r4
 8006b0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b0e:	f04f 0200 	mov.w	r2, #0
 8006b12:	d124      	bne.n	8006b5e <_dtoa_r+0x626>
 8006b14:	4baf      	ldr	r3, [pc, #700]	@ (8006dd4 <_dtoa_r+0x89c>)
 8006b16:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006b1a:	f7f9 fbd7 	bl	80002cc <__adddf3>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	460b      	mov	r3, r1
 8006b22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b26:	f7fa f817 	bl	8000b58 <__aeabi_dcmpgt>
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	d163      	bne.n	8006bf6 <_dtoa_r+0x6be>
 8006b2e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006b32:	49a8      	ldr	r1, [pc, #672]	@ (8006dd4 <_dtoa_r+0x89c>)
 8006b34:	2000      	movs	r0, #0
 8006b36:	f7f9 fbc7 	bl	80002c8 <__aeabi_dsub>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b42:	f7f9 ffeb 	bl	8000b1c <__aeabi_dcmplt>
 8006b46:	2800      	cmp	r0, #0
 8006b48:	f43f af14 	beq.w	8006974 <_dtoa_r+0x43c>
 8006b4c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006b4e:	1e73      	subs	r3, r6, #1
 8006b50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b52:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b56:	2b30      	cmp	r3, #48	@ 0x30
 8006b58:	d0f8      	beq.n	8006b4c <_dtoa_r+0x614>
 8006b5a:	4647      	mov	r7, r8
 8006b5c:	e03b      	b.n	8006bd6 <_dtoa_r+0x69e>
 8006b5e:	4b9e      	ldr	r3, [pc, #632]	@ (8006dd8 <_dtoa_r+0x8a0>)
 8006b60:	f7f9 fd6a 	bl	8000638 <__aeabi_dmul>
 8006b64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b68:	e7bc      	b.n	8006ae4 <_dtoa_r+0x5ac>
 8006b6a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006b6e:	4656      	mov	r6, sl
 8006b70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b74:	4620      	mov	r0, r4
 8006b76:	4629      	mov	r1, r5
 8006b78:	f7f9 fe88 	bl	800088c <__aeabi_ddiv>
 8006b7c:	f7fa f80c 	bl	8000b98 <__aeabi_d2iz>
 8006b80:	4680      	mov	r8, r0
 8006b82:	f7f9 fcef 	bl	8000564 <__aeabi_i2d>
 8006b86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b8a:	f7f9 fd55 	bl	8000638 <__aeabi_dmul>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	4620      	mov	r0, r4
 8006b94:	4629      	mov	r1, r5
 8006b96:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006b9a:	f7f9 fb95 	bl	80002c8 <__aeabi_dsub>
 8006b9e:	f806 4b01 	strb.w	r4, [r6], #1
 8006ba2:	9d03      	ldr	r5, [sp, #12]
 8006ba4:	eba6 040a 	sub.w	r4, r6, sl
 8006ba8:	42a5      	cmp	r5, r4
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	d133      	bne.n	8006c18 <_dtoa_r+0x6e0>
 8006bb0:	f7f9 fb8c 	bl	80002cc <__adddf3>
 8006bb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bb8:	4604      	mov	r4, r0
 8006bba:	460d      	mov	r5, r1
 8006bbc:	f7f9 ffcc 	bl	8000b58 <__aeabi_dcmpgt>
 8006bc0:	b9c0      	cbnz	r0, 8006bf4 <_dtoa_r+0x6bc>
 8006bc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	4629      	mov	r1, r5
 8006bca:	f7f9 ff9d 	bl	8000b08 <__aeabi_dcmpeq>
 8006bce:	b110      	cbz	r0, 8006bd6 <_dtoa_r+0x69e>
 8006bd0:	f018 0f01 	tst.w	r8, #1
 8006bd4:	d10e      	bne.n	8006bf4 <_dtoa_r+0x6bc>
 8006bd6:	9902      	ldr	r1, [sp, #8]
 8006bd8:	4648      	mov	r0, r9
 8006bda:	f000 fbbd 	bl	8007358 <_Bfree>
 8006bde:	2300      	movs	r3, #0
 8006be0:	7033      	strb	r3, [r6, #0]
 8006be2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006be4:	3701      	adds	r7, #1
 8006be6:	601f      	str	r7, [r3, #0]
 8006be8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 824b 	beq.w	8007086 <_dtoa_r+0xb4e>
 8006bf0:	601e      	str	r6, [r3, #0]
 8006bf2:	e248      	b.n	8007086 <_dtoa_r+0xb4e>
 8006bf4:	46b8      	mov	r8, r7
 8006bf6:	4633      	mov	r3, r6
 8006bf8:	461e      	mov	r6, r3
 8006bfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bfe:	2a39      	cmp	r2, #57	@ 0x39
 8006c00:	d106      	bne.n	8006c10 <_dtoa_r+0x6d8>
 8006c02:	459a      	cmp	sl, r3
 8006c04:	d1f8      	bne.n	8006bf8 <_dtoa_r+0x6c0>
 8006c06:	2230      	movs	r2, #48	@ 0x30
 8006c08:	f108 0801 	add.w	r8, r8, #1
 8006c0c:	f88a 2000 	strb.w	r2, [sl]
 8006c10:	781a      	ldrb	r2, [r3, #0]
 8006c12:	3201      	adds	r2, #1
 8006c14:	701a      	strb	r2, [r3, #0]
 8006c16:	e7a0      	b.n	8006b5a <_dtoa_r+0x622>
 8006c18:	4b6f      	ldr	r3, [pc, #444]	@ (8006dd8 <_dtoa_r+0x8a0>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f7f9 fd0c 	bl	8000638 <__aeabi_dmul>
 8006c20:	2200      	movs	r2, #0
 8006c22:	2300      	movs	r3, #0
 8006c24:	4604      	mov	r4, r0
 8006c26:	460d      	mov	r5, r1
 8006c28:	f7f9 ff6e 	bl	8000b08 <__aeabi_dcmpeq>
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	d09f      	beq.n	8006b70 <_dtoa_r+0x638>
 8006c30:	e7d1      	b.n	8006bd6 <_dtoa_r+0x69e>
 8006c32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c34:	2a00      	cmp	r2, #0
 8006c36:	f000 80ea 	beq.w	8006e0e <_dtoa_r+0x8d6>
 8006c3a:	9a07      	ldr	r2, [sp, #28]
 8006c3c:	2a01      	cmp	r2, #1
 8006c3e:	f300 80cd 	bgt.w	8006ddc <_dtoa_r+0x8a4>
 8006c42:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006c44:	2a00      	cmp	r2, #0
 8006c46:	f000 80c1 	beq.w	8006dcc <_dtoa_r+0x894>
 8006c4a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006c4e:	9c08      	ldr	r4, [sp, #32]
 8006c50:	9e00      	ldr	r6, [sp, #0]
 8006c52:	9a00      	ldr	r2, [sp, #0]
 8006c54:	441a      	add	r2, r3
 8006c56:	9200      	str	r2, [sp, #0]
 8006c58:	9a06      	ldr	r2, [sp, #24]
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	441a      	add	r2, r3
 8006c5e:	4648      	mov	r0, r9
 8006c60:	9206      	str	r2, [sp, #24]
 8006c62:	f000 fc2d 	bl	80074c0 <__i2b>
 8006c66:	4605      	mov	r5, r0
 8006c68:	b166      	cbz	r6, 8006c84 <_dtoa_r+0x74c>
 8006c6a:	9b06      	ldr	r3, [sp, #24]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	dd09      	ble.n	8006c84 <_dtoa_r+0x74c>
 8006c70:	42b3      	cmp	r3, r6
 8006c72:	9a00      	ldr	r2, [sp, #0]
 8006c74:	bfa8      	it	ge
 8006c76:	4633      	movge	r3, r6
 8006c78:	1ad2      	subs	r2, r2, r3
 8006c7a:	9200      	str	r2, [sp, #0]
 8006c7c:	9a06      	ldr	r2, [sp, #24]
 8006c7e:	1af6      	subs	r6, r6, r3
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	9306      	str	r3, [sp, #24]
 8006c84:	9b08      	ldr	r3, [sp, #32]
 8006c86:	b30b      	cbz	r3, 8006ccc <_dtoa_r+0x794>
 8006c88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f000 80c6 	beq.w	8006e1c <_dtoa_r+0x8e4>
 8006c90:	2c00      	cmp	r4, #0
 8006c92:	f000 80c0 	beq.w	8006e16 <_dtoa_r+0x8de>
 8006c96:	4629      	mov	r1, r5
 8006c98:	4622      	mov	r2, r4
 8006c9a:	4648      	mov	r0, r9
 8006c9c:	f000 fcc8 	bl	8007630 <__pow5mult>
 8006ca0:	9a02      	ldr	r2, [sp, #8]
 8006ca2:	4601      	mov	r1, r0
 8006ca4:	4605      	mov	r5, r0
 8006ca6:	4648      	mov	r0, r9
 8006ca8:	f000 fc20 	bl	80074ec <__multiply>
 8006cac:	9902      	ldr	r1, [sp, #8]
 8006cae:	4680      	mov	r8, r0
 8006cb0:	4648      	mov	r0, r9
 8006cb2:	f000 fb51 	bl	8007358 <_Bfree>
 8006cb6:	9b08      	ldr	r3, [sp, #32]
 8006cb8:	1b1b      	subs	r3, r3, r4
 8006cba:	9308      	str	r3, [sp, #32]
 8006cbc:	f000 80b1 	beq.w	8006e22 <_dtoa_r+0x8ea>
 8006cc0:	9a08      	ldr	r2, [sp, #32]
 8006cc2:	4641      	mov	r1, r8
 8006cc4:	4648      	mov	r0, r9
 8006cc6:	f000 fcb3 	bl	8007630 <__pow5mult>
 8006cca:	9002      	str	r0, [sp, #8]
 8006ccc:	2101      	movs	r1, #1
 8006cce:	4648      	mov	r0, r9
 8006cd0:	f000 fbf6 	bl	80074c0 <__i2b>
 8006cd4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 81d8 	beq.w	800708e <_dtoa_r+0xb56>
 8006cde:	461a      	mov	r2, r3
 8006ce0:	4601      	mov	r1, r0
 8006ce2:	4648      	mov	r0, r9
 8006ce4:	f000 fca4 	bl	8007630 <__pow5mult>
 8006ce8:	9b07      	ldr	r3, [sp, #28]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	4604      	mov	r4, r0
 8006cee:	f300 809f 	bgt.w	8006e30 <_dtoa_r+0x8f8>
 8006cf2:	9b04      	ldr	r3, [sp, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f040 8097 	bne.w	8006e28 <_dtoa_r+0x8f0>
 8006cfa:	9b05      	ldr	r3, [sp, #20]
 8006cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f040 8093 	bne.w	8006e2c <_dtoa_r+0x8f4>
 8006d06:	9b05      	ldr	r3, [sp, #20]
 8006d08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d0c:	0d1b      	lsrs	r3, r3, #20
 8006d0e:	051b      	lsls	r3, r3, #20
 8006d10:	b133      	cbz	r3, 8006d20 <_dtoa_r+0x7e8>
 8006d12:	9b00      	ldr	r3, [sp, #0]
 8006d14:	3301      	adds	r3, #1
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	9b06      	ldr	r3, [sp, #24]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	9306      	str	r3, [sp, #24]
 8006d1e:	2301      	movs	r3, #1
 8006d20:	9308      	str	r3, [sp, #32]
 8006d22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 81b8 	beq.w	800709a <_dtoa_r+0xb62>
 8006d2a:	6923      	ldr	r3, [r4, #16]
 8006d2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d30:	6918      	ldr	r0, [r3, #16]
 8006d32:	f000 fb79 	bl	8007428 <__hi0bits>
 8006d36:	f1c0 0020 	rsb	r0, r0, #32
 8006d3a:	9b06      	ldr	r3, [sp, #24]
 8006d3c:	4418      	add	r0, r3
 8006d3e:	f010 001f 	ands.w	r0, r0, #31
 8006d42:	f000 8082 	beq.w	8006e4a <_dtoa_r+0x912>
 8006d46:	f1c0 0320 	rsb	r3, r0, #32
 8006d4a:	2b04      	cmp	r3, #4
 8006d4c:	dd73      	ble.n	8006e36 <_dtoa_r+0x8fe>
 8006d4e:	9b00      	ldr	r3, [sp, #0]
 8006d50:	f1c0 001c 	rsb	r0, r0, #28
 8006d54:	4403      	add	r3, r0
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	9b06      	ldr	r3, [sp, #24]
 8006d5a:	4403      	add	r3, r0
 8006d5c:	4406      	add	r6, r0
 8006d5e:	9306      	str	r3, [sp, #24]
 8006d60:	9b00      	ldr	r3, [sp, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	dd05      	ble.n	8006d72 <_dtoa_r+0x83a>
 8006d66:	9902      	ldr	r1, [sp, #8]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	4648      	mov	r0, r9
 8006d6c:	f000 fcba 	bl	80076e4 <__lshift>
 8006d70:	9002      	str	r0, [sp, #8]
 8006d72:	9b06      	ldr	r3, [sp, #24]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	dd05      	ble.n	8006d84 <_dtoa_r+0x84c>
 8006d78:	4621      	mov	r1, r4
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	4648      	mov	r0, r9
 8006d7e:	f000 fcb1 	bl	80076e4 <__lshift>
 8006d82:	4604      	mov	r4, r0
 8006d84:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d061      	beq.n	8006e4e <_dtoa_r+0x916>
 8006d8a:	9802      	ldr	r0, [sp, #8]
 8006d8c:	4621      	mov	r1, r4
 8006d8e:	f000 fd15 	bl	80077bc <__mcmp>
 8006d92:	2800      	cmp	r0, #0
 8006d94:	da5b      	bge.n	8006e4e <_dtoa_r+0x916>
 8006d96:	2300      	movs	r3, #0
 8006d98:	9902      	ldr	r1, [sp, #8]
 8006d9a:	220a      	movs	r2, #10
 8006d9c:	4648      	mov	r0, r9
 8006d9e:	f000 fafd 	bl	800739c <__multadd>
 8006da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006da4:	9002      	str	r0, [sp, #8]
 8006da6:	f107 38ff 	add.w	r8, r7, #4294967295
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 8177 	beq.w	800709e <_dtoa_r+0xb66>
 8006db0:	4629      	mov	r1, r5
 8006db2:	2300      	movs	r3, #0
 8006db4:	220a      	movs	r2, #10
 8006db6:	4648      	mov	r0, r9
 8006db8:	f000 faf0 	bl	800739c <__multadd>
 8006dbc:	f1bb 0f00 	cmp.w	fp, #0
 8006dc0:	4605      	mov	r5, r0
 8006dc2:	dc6f      	bgt.n	8006ea4 <_dtoa_r+0x96c>
 8006dc4:	9b07      	ldr	r3, [sp, #28]
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	dc49      	bgt.n	8006e5e <_dtoa_r+0x926>
 8006dca:	e06b      	b.n	8006ea4 <_dtoa_r+0x96c>
 8006dcc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006dce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006dd2:	e73c      	b.n	8006c4e <_dtoa_r+0x716>
 8006dd4:	3fe00000 	.word	0x3fe00000
 8006dd8:	40240000 	.word	0x40240000
 8006ddc:	9b03      	ldr	r3, [sp, #12]
 8006dde:	1e5c      	subs	r4, r3, #1
 8006de0:	9b08      	ldr	r3, [sp, #32]
 8006de2:	42a3      	cmp	r3, r4
 8006de4:	db09      	blt.n	8006dfa <_dtoa_r+0x8c2>
 8006de6:	1b1c      	subs	r4, r3, r4
 8006de8:	9b03      	ldr	r3, [sp, #12]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f6bf af30 	bge.w	8006c50 <_dtoa_r+0x718>
 8006df0:	9b00      	ldr	r3, [sp, #0]
 8006df2:	9a03      	ldr	r2, [sp, #12]
 8006df4:	1a9e      	subs	r6, r3, r2
 8006df6:	2300      	movs	r3, #0
 8006df8:	e72b      	b.n	8006c52 <_dtoa_r+0x71a>
 8006dfa:	9b08      	ldr	r3, [sp, #32]
 8006dfc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006dfe:	9408      	str	r4, [sp, #32]
 8006e00:	1ae3      	subs	r3, r4, r3
 8006e02:	441a      	add	r2, r3
 8006e04:	9e00      	ldr	r6, [sp, #0]
 8006e06:	9b03      	ldr	r3, [sp, #12]
 8006e08:	920d      	str	r2, [sp, #52]	@ 0x34
 8006e0a:	2400      	movs	r4, #0
 8006e0c:	e721      	b.n	8006c52 <_dtoa_r+0x71a>
 8006e0e:	9c08      	ldr	r4, [sp, #32]
 8006e10:	9e00      	ldr	r6, [sp, #0]
 8006e12:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006e14:	e728      	b.n	8006c68 <_dtoa_r+0x730>
 8006e16:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006e1a:	e751      	b.n	8006cc0 <_dtoa_r+0x788>
 8006e1c:	9a08      	ldr	r2, [sp, #32]
 8006e1e:	9902      	ldr	r1, [sp, #8]
 8006e20:	e750      	b.n	8006cc4 <_dtoa_r+0x78c>
 8006e22:	f8cd 8008 	str.w	r8, [sp, #8]
 8006e26:	e751      	b.n	8006ccc <_dtoa_r+0x794>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	e779      	b.n	8006d20 <_dtoa_r+0x7e8>
 8006e2c:	9b04      	ldr	r3, [sp, #16]
 8006e2e:	e777      	b.n	8006d20 <_dtoa_r+0x7e8>
 8006e30:	2300      	movs	r3, #0
 8006e32:	9308      	str	r3, [sp, #32]
 8006e34:	e779      	b.n	8006d2a <_dtoa_r+0x7f2>
 8006e36:	d093      	beq.n	8006d60 <_dtoa_r+0x828>
 8006e38:	9a00      	ldr	r2, [sp, #0]
 8006e3a:	331c      	adds	r3, #28
 8006e3c:	441a      	add	r2, r3
 8006e3e:	9200      	str	r2, [sp, #0]
 8006e40:	9a06      	ldr	r2, [sp, #24]
 8006e42:	441a      	add	r2, r3
 8006e44:	441e      	add	r6, r3
 8006e46:	9206      	str	r2, [sp, #24]
 8006e48:	e78a      	b.n	8006d60 <_dtoa_r+0x828>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	e7f4      	b.n	8006e38 <_dtoa_r+0x900>
 8006e4e:	9b03      	ldr	r3, [sp, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	46b8      	mov	r8, r7
 8006e54:	dc20      	bgt.n	8006e98 <_dtoa_r+0x960>
 8006e56:	469b      	mov	fp, r3
 8006e58:	9b07      	ldr	r3, [sp, #28]
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	dd1e      	ble.n	8006e9c <_dtoa_r+0x964>
 8006e5e:	f1bb 0f00 	cmp.w	fp, #0
 8006e62:	f47f adb1 	bne.w	80069c8 <_dtoa_r+0x490>
 8006e66:	4621      	mov	r1, r4
 8006e68:	465b      	mov	r3, fp
 8006e6a:	2205      	movs	r2, #5
 8006e6c:	4648      	mov	r0, r9
 8006e6e:	f000 fa95 	bl	800739c <__multadd>
 8006e72:	4601      	mov	r1, r0
 8006e74:	4604      	mov	r4, r0
 8006e76:	9802      	ldr	r0, [sp, #8]
 8006e78:	f000 fca0 	bl	80077bc <__mcmp>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	f77f ada3 	ble.w	80069c8 <_dtoa_r+0x490>
 8006e82:	4656      	mov	r6, sl
 8006e84:	2331      	movs	r3, #49	@ 0x31
 8006e86:	f806 3b01 	strb.w	r3, [r6], #1
 8006e8a:	f108 0801 	add.w	r8, r8, #1
 8006e8e:	e59f      	b.n	80069d0 <_dtoa_r+0x498>
 8006e90:	9c03      	ldr	r4, [sp, #12]
 8006e92:	46b8      	mov	r8, r7
 8006e94:	4625      	mov	r5, r4
 8006e96:	e7f4      	b.n	8006e82 <_dtoa_r+0x94a>
 8006e98:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 8101 	beq.w	80070a6 <_dtoa_r+0xb6e>
 8006ea4:	2e00      	cmp	r6, #0
 8006ea6:	dd05      	ble.n	8006eb4 <_dtoa_r+0x97c>
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	4632      	mov	r2, r6
 8006eac:	4648      	mov	r0, r9
 8006eae:	f000 fc19 	bl	80076e4 <__lshift>
 8006eb2:	4605      	mov	r5, r0
 8006eb4:	9b08      	ldr	r3, [sp, #32]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d05c      	beq.n	8006f74 <_dtoa_r+0xa3c>
 8006eba:	6869      	ldr	r1, [r5, #4]
 8006ebc:	4648      	mov	r0, r9
 8006ebe:	f000 fa0b 	bl	80072d8 <_Balloc>
 8006ec2:	4606      	mov	r6, r0
 8006ec4:	b928      	cbnz	r0, 8006ed2 <_dtoa_r+0x99a>
 8006ec6:	4b82      	ldr	r3, [pc, #520]	@ (80070d0 <_dtoa_r+0xb98>)
 8006ec8:	4602      	mov	r2, r0
 8006eca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006ece:	f7ff bb4a 	b.w	8006566 <_dtoa_r+0x2e>
 8006ed2:	692a      	ldr	r2, [r5, #16]
 8006ed4:	3202      	adds	r2, #2
 8006ed6:	0092      	lsls	r2, r2, #2
 8006ed8:	f105 010c 	add.w	r1, r5, #12
 8006edc:	300c      	adds	r0, #12
 8006ede:	f000 ffa3 	bl	8007e28 <memcpy>
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	4631      	mov	r1, r6
 8006ee6:	4648      	mov	r0, r9
 8006ee8:	f000 fbfc 	bl	80076e4 <__lshift>
 8006eec:	f10a 0301 	add.w	r3, sl, #1
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	eb0a 030b 	add.w	r3, sl, fp
 8006ef6:	9308      	str	r3, [sp, #32]
 8006ef8:	9b04      	ldr	r3, [sp, #16]
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	462f      	mov	r7, r5
 8006f00:	9306      	str	r3, [sp, #24]
 8006f02:	4605      	mov	r5, r0
 8006f04:	9b00      	ldr	r3, [sp, #0]
 8006f06:	9802      	ldr	r0, [sp, #8]
 8006f08:	4621      	mov	r1, r4
 8006f0a:	f103 3bff 	add.w	fp, r3, #4294967295
 8006f0e:	f7ff fa8a 	bl	8006426 <quorem>
 8006f12:	4603      	mov	r3, r0
 8006f14:	3330      	adds	r3, #48	@ 0x30
 8006f16:	9003      	str	r0, [sp, #12]
 8006f18:	4639      	mov	r1, r7
 8006f1a:	9802      	ldr	r0, [sp, #8]
 8006f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f1e:	f000 fc4d 	bl	80077bc <__mcmp>
 8006f22:	462a      	mov	r2, r5
 8006f24:	9004      	str	r0, [sp, #16]
 8006f26:	4621      	mov	r1, r4
 8006f28:	4648      	mov	r0, r9
 8006f2a:	f000 fc63 	bl	80077f4 <__mdiff>
 8006f2e:	68c2      	ldr	r2, [r0, #12]
 8006f30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f32:	4606      	mov	r6, r0
 8006f34:	bb02      	cbnz	r2, 8006f78 <_dtoa_r+0xa40>
 8006f36:	4601      	mov	r1, r0
 8006f38:	9802      	ldr	r0, [sp, #8]
 8006f3a:	f000 fc3f 	bl	80077bc <__mcmp>
 8006f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f40:	4602      	mov	r2, r0
 8006f42:	4631      	mov	r1, r6
 8006f44:	4648      	mov	r0, r9
 8006f46:	920c      	str	r2, [sp, #48]	@ 0x30
 8006f48:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f4a:	f000 fa05 	bl	8007358 <_Bfree>
 8006f4e:	9b07      	ldr	r3, [sp, #28]
 8006f50:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006f52:	9e00      	ldr	r6, [sp, #0]
 8006f54:	ea42 0103 	orr.w	r1, r2, r3
 8006f58:	9b06      	ldr	r3, [sp, #24]
 8006f5a:	4319      	orrs	r1, r3
 8006f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f5e:	d10d      	bne.n	8006f7c <_dtoa_r+0xa44>
 8006f60:	2b39      	cmp	r3, #57	@ 0x39
 8006f62:	d027      	beq.n	8006fb4 <_dtoa_r+0xa7c>
 8006f64:	9a04      	ldr	r2, [sp, #16]
 8006f66:	2a00      	cmp	r2, #0
 8006f68:	dd01      	ble.n	8006f6e <_dtoa_r+0xa36>
 8006f6a:	9b03      	ldr	r3, [sp, #12]
 8006f6c:	3331      	adds	r3, #49	@ 0x31
 8006f6e:	f88b 3000 	strb.w	r3, [fp]
 8006f72:	e52e      	b.n	80069d2 <_dtoa_r+0x49a>
 8006f74:	4628      	mov	r0, r5
 8006f76:	e7b9      	b.n	8006eec <_dtoa_r+0x9b4>
 8006f78:	2201      	movs	r2, #1
 8006f7a:	e7e2      	b.n	8006f42 <_dtoa_r+0xa0a>
 8006f7c:	9904      	ldr	r1, [sp, #16]
 8006f7e:	2900      	cmp	r1, #0
 8006f80:	db04      	blt.n	8006f8c <_dtoa_r+0xa54>
 8006f82:	9807      	ldr	r0, [sp, #28]
 8006f84:	4301      	orrs	r1, r0
 8006f86:	9806      	ldr	r0, [sp, #24]
 8006f88:	4301      	orrs	r1, r0
 8006f8a:	d120      	bne.n	8006fce <_dtoa_r+0xa96>
 8006f8c:	2a00      	cmp	r2, #0
 8006f8e:	ddee      	ble.n	8006f6e <_dtoa_r+0xa36>
 8006f90:	9902      	ldr	r1, [sp, #8]
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	2201      	movs	r2, #1
 8006f96:	4648      	mov	r0, r9
 8006f98:	f000 fba4 	bl	80076e4 <__lshift>
 8006f9c:	4621      	mov	r1, r4
 8006f9e:	9002      	str	r0, [sp, #8]
 8006fa0:	f000 fc0c 	bl	80077bc <__mcmp>
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	9b00      	ldr	r3, [sp, #0]
 8006fa8:	dc02      	bgt.n	8006fb0 <_dtoa_r+0xa78>
 8006faa:	d1e0      	bne.n	8006f6e <_dtoa_r+0xa36>
 8006fac:	07da      	lsls	r2, r3, #31
 8006fae:	d5de      	bpl.n	8006f6e <_dtoa_r+0xa36>
 8006fb0:	2b39      	cmp	r3, #57	@ 0x39
 8006fb2:	d1da      	bne.n	8006f6a <_dtoa_r+0xa32>
 8006fb4:	2339      	movs	r3, #57	@ 0x39
 8006fb6:	f88b 3000 	strb.w	r3, [fp]
 8006fba:	4633      	mov	r3, r6
 8006fbc:	461e      	mov	r6, r3
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006fc4:	2a39      	cmp	r2, #57	@ 0x39
 8006fc6:	d04e      	beq.n	8007066 <_dtoa_r+0xb2e>
 8006fc8:	3201      	adds	r2, #1
 8006fca:	701a      	strb	r2, [r3, #0]
 8006fcc:	e501      	b.n	80069d2 <_dtoa_r+0x49a>
 8006fce:	2a00      	cmp	r2, #0
 8006fd0:	dd03      	ble.n	8006fda <_dtoa_r+0xaa2>
 8006fd2:	2b39      	cmp	r3, #57	@ 0x39
 8006fd4:	d0ee      	beq.n	8006fb4 <_dtoa_r+0xa7c>
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	e7c9      	b.n	8006f6e <_dtoa_r+0xa36>
 8006fda:	9a00      	ldr	r2, [sp, #0]
 8006fdc:	9908      	ldr	r1, [sp, #32]
 8006fde:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006fe2:	428a      	cmp	r2, r1
 8006fe4:	d028      	beq.n	8007038 <_dtoa_r+0xb00>
 8006fe6:	9902      	ldr	r1, [sp, #8]
 8006fe8:	2300      	movs	r3, #0
 8006fea:	220a      	movs	r2, #10
 8006fec:	4648      	mov	r0, r9
 8006fee:	f000 f9d5 	bl	800739c <__multadd>
 8006ff2:	42af      	cmp	r7, r5
 8006ff4:	9002      	str	r0, [sp, #8]
 8006ff6:	f04f 0300 	mov.w	r3, #0
 8006ffa:	f04f 020a 	mov.w	r2, #10
 8006ffe:	4639      	mov	r1, r7
 8007000:	4648      	mov	r0, r9
 8007002:	d107      	bne.n	8007014 <_dtoa_r+0xadc>
 8007004:	f000 f9ca 	bl	800739c <__multadd>
 8007008:	4607      	mov	r7, r0
 800700a:	4605      	mov	r5, r0
 800700c:	9b00      	ldr	r3, [sp, #0]
 800700e:	3301      	adds	r3, #1
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	e777      	b.n	8006f04 <_dtoa_r+0x9cc>
 8007014:	f000 f9c2 	bl	800739c <__multadd>
 8007018:	4629      	mov	r1, r5
 800701a:	4607      	mov	r7, r0
 800701c:	2300      	movs	r3, #0
 800701e:	220a      	movs	r2, #10
 8007020:	4648      	mov	r0, r9
 8007022:	f000 f9bb 	bl	800739c <__multadd>
 8007026:	4605      	mov	r5, r0
 8007028:	e7f0      	b.n	800700c <_dtoa_r+0xad4>
 800702a:	f1bb 0f00 	cmp.w	fp, #0
 800702e:	bfcc      	ite	gt
 8007030:	465e      	movgt	r6, fp
 8007032:	2601      	movle	r6, #1
 8007034:	4456      	add	r6, sl
 8007036:	2700      	movs	r7, #0
 8007038:	9902      	ldr	r1, [sp, #8]
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	2201      	movs	r2, #1
 800703e:	4648      	mov	r0, r9
 8007040:	f000 fb50 	bl	80076e4 <__lshift>
 8007044:	4621      	mov	r1, r4
 8007046:	9002      	str	r0, [sp, #8]
 8007048:	f000 fbb8 	bl	80077bc <__mcmp>
 800704c:	2800      	cmp	r0, #0
 800704e:	dcb4      	bgt.n	8006fba <_dtoa_r+0xa82>
 8007050:	d102      	bne.n	8007058 <_dtoa_r+0xb20>
 8007052:	9b00      	ldr	r3, [sp, #0]
 8007054:	07db      	lsls	r3, r3, #31
 8007056:	d4b0      	bmi.n	8006fba <_dtoa_r+0xa82>
 8007058:	4633      	mov	r3, r6
 800705a:	461e      	mov	r6, r3
 800705c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007060:	2a30      	cmp	r2, #48	@ 0x30
 8007062:	d0fa      	beq.n	800705a <_dtoa_r+0xb22>
 8007064:	e4b5      	b.n	80069d2 <_dtoa_r+0x49a>
 8007066:	459a      	cmp	sl, r3
 8007068:	d1a8      	bne.n	8006fbc <_dtoa_r+0xa84>
 800706a:	2331      	movs	r3, #49	@ 0x31
 800706c:	f108 0801 	add.w	r8, r8, #1
 8007070:	f88a 3000 	strb.w	r3, [sl]
 8007074:	e4ad      	b.n	80069d2 <_dtoa_r+0x49a>
 8007076:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007078:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80070d4 <_dtoa_r+0xb9c>
 800707c:	b11b      	cbz	r3, 8007086 <_dtoa_r+0xb4e>
 800707e:	f10a 0308 	add.w	r3, sl, #8
 8007082:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	4650      	mov	r0, sl
 8007088:	b017      	add	sp, #92	@ 0x5c
 800708a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800708e:	9b07      	ldr	r3, [sp, #28]
 8007090:	2b01      	cmp	r3, #1
 8007092:	f77f ae2e 	ble.w	8006cf2 <_dtoa_r+0x7ba>
 8007096:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007098:	9308      	str	r3, [sp, #32]
 800709a:	2001      	movs	r0, #1
 800709c:	e64d      	b.n	8006d3a <_dtoa_r+0x802>
 800709e:	f1bb 0f00 	cmp.w	fp, #0
 80070a2:	f77f aed9 	ble.w	8006e58 <_dtoa_r+0x920>
 80070a6:	4656      	mov	r6, sl
 80070a8:	9802      	ldr	r0, [sp, #8]
 80070aa:	4621      	mov	r1, r4
 80070ac:	f7ff f9bb 	bl	8006426 <quorem>
 80070b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80070b4:	f806 3b01 	strb.w	r3, [r6], #1
 80070b8:	eba6 020a 	sub.w	r2, r6, sl
 80070bc:	4593      	cmp	fp, r2
 80070be:	ddb4      	ble.n	800702a <_dtoa_r+0xaf2>
 80070c0:	9902      	ldr	r1, [sp, #8]
 80070c2:	2300      	movs	r3, #0
 80070c4:	220a      	movs	r2, #10
 80070c6:	4648      	mov	r0, r9
 80070c8:	f000 f968 	bl	800739c <__multadd>
 80070cc:	9002      	str	r0, [sp, #8]
 80070ce:	e7eb      	b.n	80070a8 <_dtoa_r+0xb70>
 80070d0:	08008724 	.word	0x08008724
 80070d4:	080086a8 	.word	0x080086a8

080070d8 <_free_r>:
 80070d8:	b538      	push	{r3, r4, r5, lr}
 80070da:	4605      	mov	r5, r0
 80070dc:	2900      	cmp	r1, #0
 80070de:	d041      	beq.n	8007164 <_free_r+0x8c>
 80070e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070e4:	1f0c      	subs	r4, r1, #4
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	bfb8      	it	lt
 80070ea:	18e4      	addlt	r4, r4, r3
 80070ec:	f000 f8e8 	bl	80072c0 <__malloc_lock>
 80070f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007168 <_free_r+0x90>)
 80070f2:	6813      	ldr	r3, [r2, #0]
 80070f4:	b933      	cbnz	r3, 8007104 <_free_r+0x2c>
 80070f6:	6063      	str	r3, [r4, #4]
 80070f8:	6014      	str	r4, [r2, #0]
 80070fa:	4628      	mov	r0, r5
 80070fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007100:	f000 b8e4 	b.w	80072cc <__malloc_unlock>
 8007104:	42a3      	cmp	r3, r4
 8007106:	d908      	bls.n	800711a <_free_r+0x42>
 8007108:	6820      	ldr	r0, [r4, #0]
 800710a:	1821      	adds	r1, r4, r0
 800710c:	428b      	cmp	r3, r1
 800710e:	bf01      	itttt	eq
 8007110:	6819      	ldreq	r1, [r3, #0]
 8007112:	685b      	ldreq	r3, [r3, #4]
 8007114:	1809      	addeq	r1, r1, r0
 8007116:	6021      	streq	r1, [r4, #0]
 8007118:	e7ed      	b.n	80070f6 <_free_r+0x1e>
 800711a:	461a      	mov	r2, r3
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	b10b      	cbz	r3, 8007124 <_free_r+0x4c>
 8007120:	42a3      	cmp	r3, r4
 8007122:	d9fa      	bls.n	800711a <_free_r+0x42>
 8007124:	6811      	ldr	r1, [r2, #0]
 8007126:	1850      	adds	r0, r2, r1
 8007128:	42a0      	cmp	r0, r4
 800712a:	d10b      	bne.n	8007144 <_free_r+0x6c>
 800712c:	6820      	ldr	r0, [r4, #0]
 800712e:	4401      	add	r1, r0
 8007130:	1850      	adds	r0, r2, r1
 8007132:	4283      	cmp	r3, r0
 8007134:	6011      	str	r1, [r2, #0]
 8007136:	d1e0      	bne.n	80070fa <_free_r+0x22>
 8007138:	6818      	ldr	r0, [r3, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	6053      	str	r3, [r2, #4]
 800713e:	4408      	add	r0, r1
 8007140:	6010      	str	r0, [r2, #0]
 8007142:	e7da      	b.n	80070fa <_free_r+0x22>
 8007144:	d902      	bls.n	800714c <_free_r+0x74>
 8007146:	230c      	movs	r3, #12
 8007148:	602b      	str	r3, [r5, #0]
 800714a:	e7d6      	b.n	80070fa <_free_r+0x22>
 800714c:	6820      	ldr	r0, [r4, #0]
 800714e:	1821      	adds	r1, r4, r0
 8007150:	428b      	cmp	r3, r1
 8007152:	bf04      	itt	eq
 8007154:	6819      	ldreq	r1, [r3, #0]
 8007156:	685b      	ldreq	r3, [r3, #4]
 8007158:	6063      	str	r3, [r4, #4]
 800715a:	bf04      	itt	eq
 800715c:	1809      	addeq	r1, r1, r0
 800715e:	6021      	streq	r1, [r4, #0]
 8007160:	6054      	str	r4, [r2, #4]
 8007162:	e7ca      	b.n	80070fa <_free_r+0x22>
 8007164:	bd38      	pop	{r3, r4, r5, pc}
 8007166:	bf00      	nop
 8007168:	20000624 	.word	0x20000624

0800716c <malloc>:
 800716c:	4b02      	ldr	r3, [pc, #8]	@ (8007178 <malloc+0xc>)
 800716e:	4601      	mov	r1, r0
 8007170:	6818      	ldr	r0, [r3, #0]
 8007172:	f000 b825 	b.w	80071c0 <_malloc_r>
 8007176:	bf00      	nop
 8007178:	2000001c 	.word	0x2000001c

0800717c <sbrk_aligned>:
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	4e0f      	ldr	r6, [pc, #60]	@ (80071bc <sbrk_aligned+0x40>)
 8007180:	460c      	mov	r4, r1
 8007182:	6831      	ldr	r1, [r6, #0]
 8007184:	4605      	mov	r5, r0
 8007186:	b911      	cbnz	r1, 800718e <sbrk_aligned+0x12>
 8007188:	f000 fe3e 	bl	8007e08 <_sbrk_r>
 800718c:	6030      	str	r0, [r6, #0]
 800718e:	4621      	mov	r1, r4
 8007190:	4628      	mov	r0, r5
 8007192:	f000 fe39 	bl	8007e08 <_sbrk_r>
 8007196:	1c43      	adds	r3, r0, #1
 8007198:	d103      	bne.n	80071a2 <sbrk_aligned+0x26>
 800719a:	f04f 34ff 	mov.w	r4, #4294967295
 800719e:	4620      	mov	r0, r4
 80071a0:	bd70      	pop	{r4, r5, r6, pc}
 80071a2:	1cc4      	adds	r4, r0, #3
 80071a4:	f024 0403 	bic.w	r4, r4, #3
 80071a8:	42a0      	cmp	r0, r4
 80071aa:	d0f8      	beq.n	800719e <sbrk_aligned+0x22>
 80071ac:	1a21      	subs	r1, r4, r0
 80071ae:	4628      	mov	r0, r5
 80071b0:	f000 fe2a 	bl	8007e08 <_sbrk_r>
 80071b4:	3001      	adds	r0, #1
 80071b6:	d1f2      	bne.n	800719e <sbrk_aligned+0x22>
 80071b8:	e7ef      	b.n	800719a <sbrk_aligned+0x1e>
 80071ba:	bf00      	nop
 80071bc:	20000620 	.word	0x20000620

080071c0 <_malloc_r>:
 80071c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071c4:	1ccd      	adds	r5, r1, #3
 80071c6:	f025 0503 	bic.w	r5, r5, #3
 80071ca:	3508      	adds	r5, #8
 80071cc:	2d0c      	cmp	r5, #12
 80071ce:	bf38      	it	cc
 80071d0:	250c      	movcc	r5, #12
 80071d2:	2d00      	cmp	r5, #0
 80071d4:	4606      	mov	r6, r0
 80071d6:	db01      	blt.n	80071dc <_malloc_r+0x1c>
 80071d8:	42a9      	cmp	r1, r5
 80071da:	d904      	bls.n	80071e6 <_malloc_r+0x26>
 80071dc:	230c      	movs	r3, #12
 80071de:	6033      	str	r3, [r6, #0]
 80071e0:	2000      	movs	r0, #0
 80071e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072bc <_malloc_r+0xfc>
 80071ea:	f000 f869 	bl	80072c0 <__malloc_lock>
 80071ee:	f8d8 3000 	ldr.w	r3, [r8]
 80071f2:	461c      	mov	r4, r3
 80071f4:	bb44      	cbnz	r4, 8007248 <_malloc_r+0x88>
 80071f6:	4629      	mov	r1, r5
 80071f8:	4630      	mov	r0, r6
 80071fa:	f7ff ffbf 	bl	800717c <sbrk_aligned>
 80071fe:	1c43      	adds	r3, r0, #1
 8007200:	4604      	mov	r4, r0
 8007202:	d158      	bne.n	80072b6 <_malloc_r+0xf6>
 8007204:	f8d8 4000 	ldr.w	r4, [r8]
 8007208:	4627      	mov	r7, r4
 800720a:	2f00      	cmp	r7, #0
 800720c:	d143      	bne.n	8007296 <_malloc_r+0xd6>
 800720e:	2c00      	cmp	r4, #0
 8007210:	d04b      	beq.n	80072aa <_malloc_r+0xea>
 8007212:	6823      	ldr	r3, [r4, #0]
 8007214:	4639      	mov	r1, r7
 8007216:	4630      	mov	r0, r6
 8007218:	eb04 0903 	add.w	r9, r4, r3
 800721c:	f000 fdf4 	bl	8007e08 <_sbrk_r>
 8007220:	4581      	cmp	r9, r0
 8007222:	d142      	bne.n	80072aa <_malloc_r+0xea>
 8007224:	6821      	ldr	r1, [r4, #0]
 8007226:	1a6d      	subs	r5, r5, r1
 8007228:	4629      	mov	r1, r5
 800722a:	4630      	mov	r0, r6
 800722c:	f7ff ffa6 	bl	800717c <sbrk_aligned>
 8007230:	3001      	adds	r0, #1
 8007232:	d03a      	beq.n	80072aa <_malloc_r+0xea>
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	442b      	add	r3, r5
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	f8d8 3000 	ldr.w	r3, [r8]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	bb62      	cbnz	r2, 800729c <_malloc_r+0xdc>
 8007242:	f8c8 7000 	str.w	r7, [r8]
 8007246:	e00f      	b.n	8007268 <_malloc_r+0xa8>
 8007248:	6822      	ldr	r2, [r4, #0]
 800724a:	1b52      	subs	r2, r2, r5
 800724c:	d420      	bmi.n	8007290 <_malloc_r+0xd0>
 800724e:	2a0b      	cmp	r2, #11
 8007250:	d917      	bls.n	8007282 <_malloc_r+0xc2>
 8007252:	1961      	adds	r1, r4, r5
 8007254:	42a3      	cmp	r3, r4
 8007256:	6025      	str	r5, [r4, #0]
 8007258:	bf18      	it	ne
 800725a:	6059      	strne	r1, [r3, #4]
 800725c:	6863      	ldr	r3, [r4, #4]
 800725e:	bf08      	it	eq
 8007260:	f8c8 1000 	streq.w	r1, [r8]
 8007264:	5162      	str	r2, [r4, r5]
 8007266:	604b      	str	r3, [r1, #4]
 8007268:	4630      	mov	r0, r6
 800726a:	f000 f82f 	bl	80072cc <__malloc_unlock>
 800726e:	f104 000b 	add.w	r0, r4, #11
 8007272:	1d23      	adds	r3, r4, #4
 8007274:	f020 0007 	bic.w	r0, r0, #7
 8007278:	1ac2      	subs	r2, r0, r3
 800727a:	bf1c      	itt	ne
 800727c:	1a1b      	subne	r3, r3, r0
 800727e:	50a3      	strne	r3, [r4, r2]
 8007280:	e7af      	b.n	80071e2 <_malloc_r+0x22>
 8007282:	6862      	ldr	r2, [r4, #4]
 8007284:	42a3      	cmp	r3, r4
 8007286:	bf0c      	ite	eq
 8007288:	f8c8 2000 	streq.w	r2, [r8]
 800728c:	605a      	strne	r2, [r3, #4]
 800728e:	e7eb      	b.n	8007268 <_malloc_r+0xa8>
 8007290:	4623      	mov	r3, r4
 8007292:	6864      	ldr	r4, [r4, #4]
 8007294:	e7ae      	b.n	80071f4 <_malloc_r+0x34>
 8007296:	463c      	mov	r4, r7
 8007298:	687f      	ldr	r7, [r7, #4]
 800729a:	e7b6      	b.n	800720a <_malloc_r+0x4a>
 800729c:	461a      	mov	r2, r3
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	42a3      	cmp	r3, r4
 80072a2:	d1fb      	bne.n	800729c <_malloc_r+0xdc>
 80072a4:	2300      	movs	r3, #0
 80072a6:	6053      	str	r3, [r2, #4]
 80072a8:	e7de      	b.n	8007268 <_malloc_r+0xa8>
 80072aa:	230c      	movs	r3, #12
 80072ac:	6033      	str	r3, [r6, #0]
 80072ae:	4630      	mov	r0, r6
 80072b0:	f000 f80c 	bl	80072cc <__malloc_unlock>
 80072b4:	e794      	b.n	80071e0 <_malloc_r+0x20>
 80072b6:	6005      	str	r5, [r0, #0]
 80072b8:	e7d6      	b.n	8007268 <_malloc_r+0xa8>
 80072ba:	bf00      	nop
 80072bc:	20000624 	.word	0x20000624

080072c0 <__malloc_lock>:
 80072c0:	4801      	ldr	r0, [pc, #4]	@ (80072c8 <__malloc_lock+0x8>)
 80072c2:	f7ff b8ae 	b.w	8006422 <__retarget_lock_acquire_recursive>
 80072c6:	bf00      	nop
 80072c8:	2000061c 	.word	0x2000061c

080072cc <__malloc_unlock>:
 80072cc:	4801      	ldr	r0, [pc, #4]	@ (80072d4 <__malloc_unlock+0x8>)
 80072ce:	f7ff b8a9 	b.w	8006424 <__retarget_lock_release_recursive>
 80072d2:	bf00      	nop
 80072d4:	2000061c 	.word	0x2000061c

080072d8 <_Balloc>:
 80072d8:	b570      	push	{r4, r5, r6, lr}
 80072da:	69c6      	ldr	r6, [r0, #28]
 80072dc:	4604      	mov	r4, r0
 80072de:	460d      	mov	r5, r1
 80072e0:	b976      	cbnz	r6, 8007300 <_Balloc+0x28>
 80072e2:	2010      	movs	r0, #16
 80072e4:	f7ff ff42 	bl	800716c <malloc>
 80072e8:	4602      	mov	r2, r0
 80072ea:	61e0      	str	r0, [r4, #28]
 80072ec:	b920      	cbnz	r0, 80072f8 <_Balloc+0x20>
 80072ee:	4b18      	ldr	r3, [pc, #96]	@ (8007350 <_Balloc+0x78>)
 80072f0:	4818      	ldr	r0, [pc, #96]	@ (8007354 <_Balloc+0x7c>)
 80072f2:	216b      	movs	r1, #107	@ 0x6b
 80072f4:	f000 fda6 	bl	8007e44 <__assert_func>
 80072f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072fc:	6006      	str	r6, [r0, #0]
 80072fe:	60c6      	str	r6, [r0, #12]
 8007300:	69e6      	ldr	r6, [r4, #28]
 8007302:	68f3      	ldr	r3, [r6, #12]
 8007304:	b183      	cbz	r3, 8007328 <_Balloc+0x50>
 8007306:	69e3      	ldr	r3, [r4, #28]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800730e:	b9b8      	cbnz	r0, 8007340 <_Balloc+0x68>
 8007310:	2101      	movs	r1, #1
 8007312:	fa01 f605 	lsl.w	r6, r1, r5
 8007316:	1d72      	adds	r2, r6, #5
 8007318:	0092      	lsls	r2, r2, #2
 800731a:	4620      	mov	r0, r4
 800731c:	f000 fdb0 	bl	8007e80 <_calloc_r>
 8007320:	b160      	cbz	r0, 800733c <_Balloc+0x64>
 8007322:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007326:	e00e      	b.n	8007346 <_Balloc+0x6e>
 8007328:	2221      	movs	r2, #33	@ 0x21
 800732a:	2104      	movs	r1, #4
 800732c:	4620      	mov	r0, r4
 800732e:	f000 fda7 	bl	8007e80 <_calloc_r>
 8007332:	69e3      	ldr	r3, [r4, #28]
 8007334:	60f0      	str	r0, [r6, #12]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1e4      	bne.n	8007306 <_Balloc+0x2e>
 800733c:	2000      	movs	r0, #0
 800733e:	bd70      	pop	{r4, r5, r6, pc}
 8007340:	6802      	ldr	r2, [r0, #0]
 8007342:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007346:	2300      	movs	r3, #0
 8007348:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800734c:	e7f7      	b.n	800733e <_Balloc+0x66>
 800734e:	bf00      	nop
 8007350:	080086b5 	.word	0x080086b5
 8007354:	08008735 	.word	0x08008735

08007358 <_Bfree>:
 8007358:	b570      	push	{r4, r5, r6, lr}
 800735a:	69c6      	ldr	r6, [r0, #28]
 800735c:	4605      	mov	r5, r0
 800735e:	460c      	mov	r4, r1
 8007360:	b976      	cbnz	r6, 8007380 <_Bfree+0x28>
 8007362:	2010      	movs	r0, #16
 8007364:	f7ff ff02 	bl	800716c <malloc>
 8007368:	4602      	mov	r2, r0
 800736a:	61e8      	str	r0, [r5, #28]
 800736c:	b920      	cbnz	r0, 8007378 <_Bfree+0x20>
 800736e:	4b09      	ldr	r3, [pc, #36]	@ (8007394 <_Bfree+0x3c>)
 8007370:	4809      	ldr	r0, [pc, #36]	@ (8007398 <_Bfree+0x40>)
 8007372:	218f      	movs	r1, #143	@ 0x8f
 8007374:	f000 fd66 	bl	8007e44 <__assert_func>
 8007378:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800737c:	6006      	str	r6, [r0, #0]
 800737e:	60c6      	str	r6, [r0, #12]
 8007380:	b13c      	cbz	r4, 8007392 <_Bfree+0x3a>
 8007382:	69eb      	ldr	r3, [r5, #28]
 8007384:	6862      	ldr	r2, [r4, #4]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800738c:	6021      	str	r1, [r4, #0]
 800738e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007392:	bd70      	pop	{r4, r5, r6, pc}
 8007394:	080086b5 	.word	0x080086b5
 8007398:	08008735 	.word	0x08008735

0800739c <__multadd>:
 800739c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073a0:	690d      	ldr	r5, [r1, #16]
 80073a2:	4607      	mov	r7, r0
 80073a4:	460c      	mov	r4, r1
 80073a6:	461e      	mov	r6, r3
 80073a8:	f101 0c14 	add.w	ip, r1, #20
 80073ac:	2000      	movs	r0, #0
 80073ae:	f8dc 3000 	ldr.w	r3, [ip]
 80073b2:	b299      	uxth	r1, r3
 80073b4:	fb02 6101 	mla	r1, r2, r1, r6
 80073b8:	0c1e      	lsrs	r6, r3, #16
 80073ba:	0c0b      	lsrs	r3, r1, #16
 80073bc:	fb02 3306 	mla	r3, r2, r6, r3
 80073c0:	b289      	uxth	r1, r1
 80073c2:	3001      	adds	r0, #1
 80073c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80073c8:	4285      	cmp	r5, r0
 80073ca:	f84c 1b04 	str.w	r1, [ip], #4
 80073ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80073d2:	dcec      	bgt.n	80073ae <__multadd+0x12>
 80073d4:	b30e      	cbz	r6, 800741a <__multadd+0x7e>
 80073d6:	68a3      	ldr	r3, [r4, #8]
 80073d8:	42ab      	cmp	r3, r5
 80073da:	dc19      	bgt.n	8007410 <__multadd+0x74>
 80073dc:	6861      	ldr	r1, [r4, #4]
 80073de:	4638      	mov	r0, r7
 80073e0:	3101      	adds	r1, #1
 80073e2:	f7ff ff79 	bl	80072d8 <_Balloc>
 80073e6:	4680      	mov	r8, r0
 80073e8:	b928      	cbnz	r0, 80073f6 <__multadd+0x5a>
 80073ea:	4602      	mov	r2, r0
 80073ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007420 <__multadd+0x84>)
 80073ee:	480d      	ldr	r0, [pc, #52]	@ (8007424 <__multadd+0x88>)
 80073f0:	21ba      	movs	r1, #186	@ 0xba
 80073f2:	f000 fd27 	bl	8007e44 <__assert_func>
 80073f6:	6922      	ldr	r2, [r4, #16]
 80073f8:	3202      	adds	r2, #2
 80073fa:	f104 010c 	add.w	r1, r4, #12
 80073fe:	0092      	lsls	r2, r2, #2
 8007400:	300c      	adds	r0, #12
 8007402:	f000 fd11 	bl	8007e28 <memcpy>
 8007406:	4621      	mov	r1, r4
 8007408:	4638      	mov	r0, r7
 800740a:	f7ff ffa5 	bl	8007358 <_Bfree>
 800740e:	4644      	mov	r4, r8
 8007410:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007414:	3501      	adds	r5, #1
 8007416:	615e      	str	r6, [r3, #20]
 8007418:	6125      	str	r5, [r4, #16]
 800741a:	4620      	mov	r0, r4
 800741c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007420:	08008724 	.word	0x08008724
 8007424:	08008735 	.word	0x08008735

08007428 <__hi0bits>:
 8007428:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800742c:	4603      	mov	r3, r0
 800742e:	bf36      	itet	cc
 8007430:	0403      	lslcc	r3, r0, #16
 8007432:	2000      	movcs	r0, #0
 8007434:	2010      	movcc	r0, #16
 8007436:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800743a:	bf3c      	itt	cc
 800743c:	021b      	lslcc	r3, r3, #8
 800743e:	3008      	addcc	r0, #8
 8007440:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007444:	bf3c      	itt	cc
 8007446:	011b      	lslcc	r3, r3, #4
 8007448:	3004      	addcc	r0, #4
 800744a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800744e:	bf3c      	itt	cc
 8007450:	009b      	lslcc	r3, r3, #2
 8007452:	3002      	addcc	r0, #2
 8007454:	2b00      	cmp	r3, #0
 8007456:	db05      	blt.n	8007464 <__hi0bits+0x3c>
 8007458:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800745c:	f100 0001 	add.w	r0, r0, #1
 8007460:	bf08      	it	eq
 8007462:	2020      	moveq	r0, #32
 8007464:	4770      	bx	lr

08007466 <__lo0bits>:
 8007466:	6803      	ldr	r3, [r0, #0]
 8007468:	4602      	mov	r2, r0
 800746a:	f013 0007 	ands.w	r0, r3, #7
 800746e:	d00b      	beq.n	8007488 <__lo0bits+0x22>
 8007470:	07d9      	lsls	r1, r3, #31
 8007472:	d421      	bmi.n	80074b8 <__lo0bits+0x52>
 8007474:	0798      	lsls	r0, r3, #30
 8007476:	bf49      	itett	mi
 8007478:	085b      	lsrmi	r3, r3, #1
 800747a:	089b      	lsrpl	r3, r3, #2
 800747c:	2001      	movmi	r0, #1
 800747e:	6013      	strmi	r3, [r2, #0]
 8007480:	bf5c      	itt	pl
 8007482:	6013      	strpl	r3, [r2, #0]
 8007484:	2002      	movpl	r0, #2
 8007486:	4770      	bx	lr
 8007488:	b299      	uxth	r1, r3
 800748a:	b909      	cbnz	r1, 8007490 <__lo0bits+0x2a>
 800748c:	0c1b      	lsrs	r3, r3, #16
 800748e:	2010      	movs	r0, #16
 8007490:	b2d9      	uxtb	r1, r3
 8007492:	b909      	cbnz	r1, 8007498 <__lo0bits+0x32>
 8007494:	3008      	adds	r0, #8
 8007496:	0a1b      	lsrs	r3, r3, #8
 8007498:	0719      	lsls	r1, r3, #28
 800749a:	bf04      	itt	eq
 800749c:	091b      	lsreq	r3, r3, #4
 800749e:	3004      	addeq	r0, #4
 80074a0:	0799      	lsls	r1, r3, #30
 80074a2:	bf04      	itt	eq
 80074a4:	089b      	lsreq	r3, r3, #2
 80074a6:	3002      	addeq	r0, #2
 80074a8:	07d9      	lsls	r1, r3, #31
 80074aa:	d403      	bmi.n	80074b4 <__lo0bits+0x4e>
 80074ac:	085b      	lsrs	r3, r3, #1
 80074ae:	f100 0001 	add.w	r0, r0, #1
 80074b2:	d003      	beq.n	80074bc <__lo0bits+0x56>
 80074b4:	6013      	str	r3, [r2, #0]
 80074b6:	4770      	bx	lr
 80074b8:	2000      	movs	r0, #0
 80074ba:	4770      	bx	lr
 80074bc:	2020      	movs	r0, #32
 80074be:	4770      	bx	lr

080074c0 <__i2b>:
 80074c0:	b510      	push	{r4, lr}
 80074c2:	460c      	mov	r4, r1
 80074c4:	2101      	movs	r1, #1
 80074c6:	f7ff ff07 	bl	80072d8 <_Balloc>
 80074ca:	4602      	mov	r2, r0
 80074cc:	b928      	cbnz	r0, 80074da <__i2b+0x1a>
 80074ce:	4b05      	ldr	r3, [pc, #20]	@ (80074e4 <__i2b+0x24>)
 80074d0:	4805      	ldr	r0, [pc, #20]	@ (80074e8 <__i2b+0x28>)
 80074d2:	f240 1145 	movw	r1, #325	@ 0x145
 80074d6:	f000 fcb5 	bl	8007e44 <__assert_func>
 80074da:	2301      	movs	r3, #1
 80074dc:	6144      	str	r4, [r0, #20]
 80074de:	6103      	str	r3, [r0, #16]
 80074e0:	bd10      	pop	{r4, pc}
 80074e2:	bf00      	nop
 80074e4:	08008724 	.word	0x08008724
 80074e8:	08008735 	.word	0x08008735

080074ec <__multiply>:
 80074ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f0:	4617      	mov	r7, r2
 80074f2:	690a      	ldr	r2, [r1, #16]
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	bfa8      	it	ge
 80074fa:	463b      	movge	r3, r7
 80074fc:	4689      	mov	r9, r1
 80074fe:	bfa4      	itt	ge
 8007500:	460f      	movge	r7, r1
 8007502:	4699      	movge	r9, r3
 8007504:	693d      	ldr	r5, [r7, #16]
 8007506:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	6879      	ldr	r1, [r7, #4]
 800750e:	eb05 060a 	add.w	r6, r5, sl
 8007512:	42b3      	cmp	r3, r6
 8007514:	b085      	sub	sp, #20
 8007516:	bfb8      	it	lt
 8007518:	3101      	addlt	r1, #1
 800751a:	f7ff fedd 	bl	80072d8 <_Balloc>
 800751e:	b930      	cbnz	r0, 800752e <__multiply+0x42>
 8007520:	4602      	mov	r2, r0
 8007522:	4b41      	ldr	r3, [pc, #260]	@ (8007628 <__multiply+0x13c>)
 8007524:	4841      	ldr	r0, [pc, #260]	@ (800762c <__multiply+0x140>)
 8007526:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800752a:	f000 fc8b 	bl	8007e44 <__assert_func>
 800752e:	f100 0414 	add.w	r4, r0, #20
 8007532:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007536:	4623      	mov	r3, r4
 8007538:	2200      	movs	r2, #0
 800753a:	4573      	cmp	r3, lr
 800753c:	d320      	bcc.n	8007580 <__multiply+0x94>
 800753e:	f107 0814 	add.w	r8, r7, #20
 8007542:	f109 0114 	add.w	r1, r9, #20
 8007546:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800754a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800754e:	9302      	str	r3, [sp, #8]
 8007550:	1beb      	subs	r3, r5, r7
 8007552:	3b15      	subs	r3, #21
 8007554:	f023 0303 	bic.w	r3, r3, #3
 8007558:	3304      	adds	r3, #4
 800755a:	3715      	adds	r7, #21
 800755c:	42bd      	cmp	r5, r7
 800755e:	bf38      	it	cc
 8007560:	2304      	movcc	r3, #4
 8007562:	9301      	str	r3, [sp, #4]
 8007564:	9b02      	ldr	r3, [sp, #8]
 8007566:	9103      	str	r1, [sp, #12]
 8007568:	428b      	cmp	r3, r1
 800756a:	d80c      	bhi.n	8007586 <__multiply+0x9a>
 800756c:	2e00      	cmp	r6, #0
 800756e:	dd03      	ble.n	8007578 <__multiply+0x8c>
 8007570:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007574:	2b00      	cmp	r3, #0
 8007576:	d055      	beq.n	8007624 <__multiply+0x138>
 8007578:	6106      	str	r6, [r0, #16]
 800757a:	b005      	add	sp, #20
 800757c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007580:	f843 2b04 	str.w	r2, [r3], #4
 8007584:	e7d9      	b.n	800753a <__multiply+0x4e>
 8007586:	f8b1 a000 	ldrh.w	sl, [r1]
 800758a:	f1ba 0f00 	cmp.w	sl, #0
 800758e:	d01f      	beq.n	80075d0 <__multiply+0xe4>
 8007590:	46c4      	mov	ip, r8
 8007592:	46a1      	mov	r9, r4
 8007594:	2700      	movs	r7, #0
 8007596:	f85c 2b04 	ldr.w	r2, [ip], #4
 800759a:	f8d9 3000 	ldr.w	r3, [r9]
 800759e:	fa1f fb82 	uxth.w	fp, r2
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	fb0a 330b 	mla	r3, sl, fp, r3
 80075a8:	443b      	add	r3, r7
 80075aa:	f8d9 7000 	ldr.w	r7, [r9]
 80075ae:	0c12      	lsrs	r2, r2, #16
 80075b0:	0c3f      	lsrs	r7, r7, #16
 80075b2:	fb0a 7202 	mla	r2, sl, r2, r7
 80075b6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075c0:	4565      	cmp	r5, ip
 80075c2:	f849 3b04 	str.w	r3, [r9], #4
 80075c6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80075ca:	d8e4      	bhi.n	8007596 <__multiply+0xaa>
 80075cc:	9b01      	ldr	r3, [sp, #4]
 80075ce:	50e7      	str	r7, [r4, r3]
 80075d0:	9b03      	ldr	r3, [sp, #12]
 80075d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80075d6:	3104      	adds	r1, #4
 80075d8:	f1b9 0f00 	cmp.w	r9, #0
 80075dc:	d020      	beq.n	8007620 <__multiply+0x134>
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	4647      	mov	r7, r8
 80075e2:	46a4      	mov	ip, r4
 80075e4:	f04f 0a00 	mov.w	sl, #0
 80075e8:	f8b7 b000 	ldrh.w	fp, [r7]
 80075ec:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80075f0:	fb09 220b 	mla	r2, r9, fp, r2
 80075f4:	4452      	add	r2, sl
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075fc:	f84c 3b04 	str.w	r3, [ip], #4
 8007600:	f857 3b04 	ldr.w	r3, [r7], #4
 8007604:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007608:	f8bc 3000 	ldrh.w	r3, [ip]
 800760c:	fb09 330a 	mla	r3, r9, sl, r3
 8007610:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007614:	42bd      	cmp	r5, r7
 8007616:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800761a:	d8e5      	bhi.n	80075e8 <__multiply+0xfc>
 800761c:	9a01      	ldr	r2, [sp, #4]
 800761e:	50a3      	str	r3, [r4, r2]
 8007620:	3404      	adds	r4, #4
 8007622:	e79f      	b.n	8007564 <__multiply+0x78>
 8007624:	3e01      	subs	r6, #1
 8007626:	e7a1      	b.n	800756c <__multiply+0x80>
 8007628:	08008724 	.word	0x08008724
 800762c:	08008735 	.word	0x08008735

08007630 <__pow5mult>:
 8007630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007634:	4615      	mov	r5, r2
 8007636:	f012 0203 	ands.w	r2, r2, #3
 800763a:	4607      	mov	r7, r0
 800763c:	460e      	mov	r6, r1
 800763e:	d007      	beq.n	8007650 <__pow5mult+0x20>
 8007640:	4c25      	ldr	r4, [pc, #148]	@ (80076d8 <__pow5mult+0xa8>)
 8007642:	3a01      	subs	r2, #1
 8007644:	2300      	movs	r3, #0
 8007646:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800764a:	f7ff fea7 	bl	800739c <__multadd>
 800764e:	4606      	mov	r6, r0
 8007650:	10ad      	asrs	r5, r5, #2
 8007652:	d03d      	beq.n	80076d0 <__pow5mult+0xa0>
 8007654:	69fc      	ldr	r4, [r7, #28]
 8007656:	b97c      	cbnz	r4, 8007678 <__pow5mult+0x48>
 8007658:	2010      	movs	r0, #16
 800765a:	f7ff fd87 	bl	800716c <malloc>
 800765e:	4602      	mov	r2, r0
 8007660:	61f8      	str	r0, [r7, #28]
 8007662:	b928      	cbnz	r0, 8007670 <__pow5mult+0x40>
 8007664:	4b1d      	ldr	r3, [pc, #116]	@ (80076dc <__pow5mult+0xac>)
 8007666:	481e      	ldr	r0, [pc, #120]	@ (80076e0 <__pow5mult+0xb0>)
 8007668:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800766c:	f000 fbea 	bl	8007e44 <__assert_func>
 8007670:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007674:	6004      	str	r4, [r0, #0]
 8007676:	60c4      	str	r4, [r0, #12]
 8007678:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800767c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007680:	b94c      	cbnz	r4, 8007696 <__pow5mult+0x66>
 8007682:	f240 2171 	movw	r1, #625	@ 0x271
 8007686:	4638      	mov	r0, r7
 8007688:	f7ff ff1a 	bl	80074c0 <__i2b>
 800768c:	2300      	movs	r3, #0
 800768e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007692:	4604      	mov	r4, r0
 8007694:	6003      	str	r3, [r0, #0]
 8007696:	f04f 0900 	mov.w	r9, #0
 800769a:	07eb      	lsls	r3, r5, #31
 800769c:	d50a      	bpl.n	80076b4 <__pow5mult+0x84>
 800769e:	4631      	mov	r1, r6
 80076a0:	4622      	mov	r2, r4
 80076a2:	4638      	mov	r0, r7
 80076a4:	f7ff ff22 	bl	80074ec <__multiply>
 80076a8:	4631      	mov	r1, r6
 80076aa:	4680      	mov	r8, r0
 80076ac:	4638      	mov	r0, r7
 80076ae:	f7ff fe53 	bl	8007358 <_Bfree>
 80076b2:	4646      	mov	r6, r8
 80076b4:	106d      	asrs	r5, r5, #1
 80076b6:	d00b      	beq.n	80076d0 <__pow5mult+0xa0>
 80076b8:	6820      	ldr	r0, [r4, #0]
 80076ba:	b938      	cbnz	r0, 80076cc <__pow5mult+0x9c>
 80076bc:	4622      	mov	r2, r4
 80076be:	4621      	mov	r1, r4
 80076c0:	4638      	mov	r0, r7
 80076c2:	f7ff ff13 	bl	80074ec <__multiply>
 80076c6:	6020      	str	r0, [r4, #0]
 80076c8:	f8c0 9000 	str.w	r9, [r0]
 80076cc:	4604      	mov	r4, r0
 80076ce:	e7e4      	b.n	800769a <__pow5mult+0x6a>
 80076d0:	4630      	mov	r0, r6
 80076d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076d6:	bf00      	nop
 80076d8:	080087e8 	.word	0x080087e8
 80076dc:	080086b5 	.word	0x080086b5
 80076e0:	08008735 	.word	0x08008735

080076e4 <__lshift>:
 80076e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076e8:	460c      	mov	r4, r1
 80076ea:	6849      	ldr	r1, [r1, #4]
 80076ec:	6923      	ldr	r3, [r4, #16]
 80076ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076f2:	68a3      	ldr	r3, [r4, #8]
 80076f4:	4607      	mov	r7, r0
 80076f6:	4691      	mov	r9, r2
 80076f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076fc:	f108 0601 	add.w	r6, r8, #1
 8007700:	42b3      	cmp	r3, r6
 8007702:	db0b      	blt.n	800771c <__lshift+0x38>
 8007704:	4638      	mov	r0, r7
 8007706:	f7ff fde7 	bl	80072d8 <_Balloc>
 800770a:	4605      	mov	r5, r0
 800770c:	b948      	cbnz	r0, 8007722 <__lshift+0x3e>
 800770e:	4602      	mov	r2, r0
 8007710:	4b28      	ldr	r3, [pc, #160]	@ (80077b4 <__lshift+0xd0>)
 8007712:	4829      	ldr	r0, [pc, #164]	@ (80077b8 <__lshift+0xd4>)
 8007714:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007718:	f000 fb94 	bl	8007e44 <__assert_func>
 800771c:	3101      	adds	r1, #1
 800771e:	005b      	lsls	r3, r3, #1
 8007720:	e7ee      	b.n	8007700 <__lshift+0x1c>
 8007722:	2300      	movs	r3, #0
 8007724:	f100 0114 	add.w	r1, r0, #20
 8007728:	f100 0210 	add.w	r2, r0, #16
 800772c:	4618      	mov	r0, r3
 800772e:	4553      	cmp	r3, sl
 8007730:	db33      	blt.n	800779a <__lshift+0xb6>
 8007732:	6920      	ldr	r0, [r4, #16]
 8007734:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007738:	f104 0314 	add.w	r3, r4, #20
 800773c:	f019 091f 	ands.w	r9, r9, #31
 8007740:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007744:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007748:	d02b      	beq.n	80077a2 <__lshift+0xbe>
 800774a:	f1c9 0e20 	rsb	lr, r9, #32
 800774e:	468a      	mov	sl, r1
 8007750:	2200      	movs	r2, #0
 8007752:	6818      	ldr	r0, [r3, #0]
 8007754:	fa00 f009 	lsl.w	r0, r0, r9
 8007758:	4310      	orrs	r0, r2
 800775a:	f84a 0b04 	str.w	r0, [sl], #4
 800775e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007762:	459c      	cmp	ip, r3
 8007764:	fa22 f20e 	lsr.w	r2, r2, lr
 8007768:	d8f3      	bhi.n	8007752 <__lshift+0x6e>
 800776a:	ebac 0304 	sub.w	r3, ip, r4
 800776e:	3b15      	subs	r3, #21
 8007770:	f023 0303 	bic.w	r3, r3, #3
 8007774:	3304      	adds	r3, #4
 8007776:	f104 0015 	add.w	r0, r4, #21
 800777a:	4560      	cmp	r0, ip
 800777c:	bf88      	it	hi
 800777e:	2304      	movhi	r3, #4
 8007780:	50ca      	str	r2, [r1, r3]
 8007782:	b10a      	cbz	r2, 8007788 <__lshift+0xa4>
 8007784:	f108 0602 	add.w	r6, r8, #2
 8007788:	3e01      	subs	r6, #1
 800778a:	4638      	mov	r0, r7
 800778c:	612e      	str	r6, [r5, #16]
 800778e:	4621      	mov	r1, r4
 8007790:	f7ff fde2 	bl	8007358 <_Bfree>
 8007794:	4628      	mov	r0, r5
 8007796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800779a:	f842 0f04 	str.w	r0, [r2, #4]!
 800779e:	3301      	adds	r3, #1
 80077a0:	e7c5      	b.n	800772e <__lshift+0x4a>
 80077a2:	3904      	subs	r1, #4
 80077a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80077a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80077ac:	459c      	cmp	ip, r3
 80077ae:	d8f9      	bhi.n	80077a4 <__lshift+0xc0>
 80077b0:	e7ea      	b.n	8007788 <__lshift+0xa4>
 80077b2:	bf00      	nop
 80077b4:	08008724 	.word	0x08008724
 80077b8:	08008735 	.word	0x08008735

080077bc <__mcmp>:
 80077bc:	690a      	ldr	r2, [r1, #16]
 80077be:	4603      	mov	r3, r0
 80077c0:	6900      	ldr	r0, [r0, #16]
 80077c2:	1a80      	subs	r0, r0, r2
 80077c4:	b530      	push	{r4, r5, lr}
 80077c6:	d10e      	bne.n	80077e6 <__mcmp+0x2a>
 80077c8:	3314      	adds	r3, #20
 80077ca:	3114      	adds	r1, #20
 80077cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80077d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80077d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80077d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80077dc:	4295      	cmp	r5, r2
 80077de:	d003      	beq.n	80077e8 <__mcmp+0x2c>
 80077e0:	d205      	bcs.n	80077ee <__mcmp+0x32>
 80077e2:	f04f 30ff 	mov.w	r0, #4294967295
 80077e6:	bd30      	pop	{r4, r5, pc}
 80077e8:	42a3      	cmp	r3, r4
 80077ea:	d3f3      	bcc.n	80077d4 <__mcmp+0x18>
 80077ec:	e7fb      	b.n	80077e6 <__mcmp+0x2a>
 80077ee:	2001      	movs	r0, #1
 80077f0:	e7f9      	b.n	80077e6 <__mcmp+0x2a>
	...

080077f4 <__mdiff>:
 80077f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f8:	4689      	mov	r9, r1
 80077fa:	4606      	mov	r6, r0
 80077fc:	4611      	mov	r1, r2
 80077fe:	4648      	mov	r0, r9
 8007800:	4614      	mov	r4, r2
 8007802:	f7ff ffdb 	bl	80077bc <__mcmp>
 8007806:	1e05      	subs	r5, r0, #0
 8007808:	d112      	bne.n	8007830 <__mdiff+0x3c>
 800780a:	4629      	mov	r1, r5
 800780c:	4630      	mov	r0, r6
 800780e:	f7ff fd63 	bl	80072d8 <_Balloc>
 8007812:	4602      	mov	r2, r0
 8007814:	b928      	cbnz	r0, 8007822 <__mdiff+0x2e>
 8007816:	4b3f      	ldr	r3, [pc, #252]	@ (8007914 <__mdiff+0x120>)
 8007818:	f240 2137 	movw	r1, #567	@ 0x237
 800781c:	483e      	ldr	r0, [pc, #248]	@ (8007918 <__mdiff+0x124>)
 800781e:	f000 fb11 	bl	8007e44 <__assert_func>
 8007822:	2301      	movs	r3, #1
 8007824:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007828:	4610      	mov	r0, r2
 800782a:	b003      	add	sp, #12
 800782c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007830:	bfbc      	itt	lt
 8007832:	464b      	movlt	r3, r9
 8007834:	46a1      	movlt	r9, r4
 8007836:	4630      	mov	r0, r6
 8007838:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800783c:	bfba      	itte	lt
 800783e:	461c      	movlt	r4, r3
 8007840:	2501      	movlt	r5, #1
 8007842:	2500      	movge	r5, #0
 8007844:	f7ff fd48 	bl	80072d8 <_Balloc>
 8007848:	4602      	mov	r2, r0
 800784a:	b918      	cbnz	r0, 8007854 <__mdiff+0x60>
 800784c:	4b31      	ldr	r3, [pc, #196]	@ (8007914 <__mdiff+0x120>)
 800784e:	f240 2145 	movw	r1, #581	@ 0x245
 8007852:	e7e3      	b.n	800781c <__mdiff+0x28>
 8007854:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007858:	6926      	ldr	r6, [r4, #16]
 800785a:	60c5      	str	r5, [r0, #12]
 800785c:	f109 0310 	add.w	r3, r9, #16
 8007860:	f109 0514 	add.w	r5, r9, #20
 8007864:	f104 0e14 	add.w	lr, r4, #20
 8007868:	f100 0b14 	add.w	fp, r0, #20
 800786c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007870:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007874:	9301      	str	r3, [sp, #4]
 8007876:	46d9      	mov	r9, fp
 8007878:	f04f 0c00 	mov.w	ip, #0
 800787c:	9b01      	ldr	r3, [sp, #4]
 800787e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007882:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007886:	9301      	str	r3, [sp, #4]
 8007888:	fa1f f38a 	uxth.w	r3, sl
 800788c:	4619      	mov	r1, r3
 800788e:	b283      	uxth	r3, r0
 8007890:	1acb      	subs	r3, r1, r3
 8007892:	0c00      	lsrs	r0, r0, #16
 8007894:	4463      	add	r3, ip
 8007896:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800789a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800789e:	b29b      	uxth	r3, r3
 80078a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80078a4:	4576      	cmp	r6, lr
 80078a6:	f849 3b04 	str.w	r3, [r9], #4
 80078aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078ae:	d8e5      	bhi.n	800787c <__mdiff+0x88>
 80078b0:	1b33      	subs	r3, r6, r4
 80078b2:	3b15      	subs	r3, #21
 80078b4:	f023 0303 	bic.w	r3, r3, #3
 80078b8:	3415      	adds	r4, #21
 80078ba:	3304      	adds	r3, #4
 80078bc:	42a6      	cmp	r6, r4
 80078be:	bf38      	it	cc
 80078c0:	2304      	movcc	r3, #4
 80078c2:	441d      	add	r5, r3
 80078c4:	445b      	add	r3, fp
 80078c6:	461e      	mov	r6, r3
 80078c8:	462c      	mov	r4, r5
 80078ca:	4544      	cmp	r4, r8
 80078cc:	d30e      	bcc.n	80078ec <__mdiff+0xf8>
 80078ce:	f108 0103 	add.w	r1, r8, #3
 80078d2:	1b49      	subs	r1, r1, r5
 80078d4:	f021 0103 	bic.w	r1, r1, #3
 80078d8:	3d03      	subs	r5, #3
 80078da:	45a8      	cmp	r8, r5
 80078dc:	bf38      	it	cc
 80078de:	2100      	movcc	r1, #0
 80078e0:	440b      	add	r3, r1
 80078e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078e6:	b191      	cbz	r1, 800790e <__mdiff+0x11a>
 80078e8:	6117      	str	r7, [r2, #16]
 80078ea:	e79d      	b.n	8007828 <__mdiff+0x34>
 80078ec:	f854 1b04 	ldr.w	r1, [r4], #4
 80078f0:	46e6      	mov	lr, ip
 80078f2:	0c08      	lsrs	r0, r1, #16
 80078f4:	fa1c fc81 	uxtah	ip, ip, r1
 80078f8:	4471      	add	r1, lr
 80078fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80078fe:	b289      	uxth	r1, r1
 8007900:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007904:	f846 1b04 	str.w	r1, [r6], #4
 8007908:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800790c:	e7dd      	b.n	80078ca <__mdiff+0xd6>
 800790e:	3f01      	subs	r7, #1
 8007910:	e7e7      	b.n	80078e2 <__mdiff+0xee>
 8007912:	bf00      	nop
 8007914:	08008724 	.word	0x08008724
 8007918:	08008735 	.word	0x08008735

0800791c <__d2b>:
 800791c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007920:	460f      	mov	r7, r1
 8007922:	2101      	movs	r1, #1
 8007924:	ec59 8b10 	vmov	r8, r9, d0
 8007928:	4616      	mov	r6, r2
 800792a:	f7ff fcd5 	bl	80072d8 <_Balloc>
 800792e:	4604      	mov	r4, r0
 8007930:	b930      	cbnz	r0, 8007940 <__d2b+0x24>
 8007932:	4602      	mov	r2, r0
 8007934:	4b23      	ldr	r3, [pc, #140]	@ (80079c4 <__d2b+0xa8>)
 8007936:	4824      	ldr	r0, [pc, #144]	@ (80079c8 <__d2b+0xac>)
 8007938:	f240 310f 	movw	r1, #783	@ 0x30f
 800793c:	f000 fa82 	bl	8007e44 <__assert_func>
 8007940:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007944:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007948:	b10d      	cbz	r5, 800794e <__d2b+0x32>
 800794a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800794e:	9301      	str	r3, [sp, #4]
 8007950:	f1b8 0300 	subs.w	r3, r8, #0
 8007954:	d023      	beq.n	800799e <__d2b+0x82>
 8007956:	4668      	mov	r0, sp
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	f7ff fd84 	bl	8007466 <__lo0bits>
 800795e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007962:	b1d0      	cbz	r0, 800799a <__d2b+0x7e>
 8007964:	f1c0 0320 	rsb	r3, r0, #32
 8007968:	fa02 f303 	lsl.w	r3, r2, r3
 800796c:	430b      	orrs	r3, r1
 800796e:	40c2      	lsrs	r2, r0
 8007970:	6163      	str	r3, [r4, #20]
 8007972:	9201      	str	r2, [sp, #4]
 8007974:	9b01      	ldr	r3, [sp, #4]
 8007976:	61a3      	str	r3, [r4, #24]
 8007978:	2b00      	cmp	r3, #0
 800797a:	bf0c      	ite	eq
 800797c:	2201      	moveq	r2, #1
 800797e:	2202      	movne	r2, #2
 8007980:	6122      	str	r2, [r4, #16]
 8007982:	b1a5      	cbz	r5, 80079ae <__d2b+0x92>
 8007984:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007988:	4405      	add	r5, r0
 800798a:	603d      	str	r5, [r7, #0]
 800798c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007990:	6030      	str	r0, [r6, #0]
 8007992:	4620      	mov	r0, r4
 8007994:	b003      	add	sp, #12
 8007996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800799a:	6161      	str	r1, [r4, #20]
 800799c:	e7ea      	b.n	8007974 <__d2b+0x58>
 800799e:	a801      	add	r0, sp, #4
 80079a0:	f7ff fd61 	bl	8007466 <__lo0bits>
 80079a4:	9b01      	ldr	r3, [sp, #4]
 80079a6:	6163      	str	r3, [r4, #20]
 80079a8:	3020      	adds	r0, #32
 80079aa:	2201      	movs	r2, #1
 80079ac:	e7e8      	b.n	8007980 <__d2b+0x64>
 80079ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80079b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80079b6:	6038      	str	r0, [r7, #0]
 80079b8:	6918      	ldr	r0, [r3, #16]
 80079ba:	f7ff fd35 	bl	8007428 <__hi0bits>
 80079be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80079c2:	e7e5      	b.n	8007990 <__d2b+0x74>
 80079c4:	08008724 	.word	0x08008724
 80079c8:	08008735 	.word	0x08008735

080079cc <__ssputs_r>:
 80079cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d0:	688e      	ldr	r6, [r1, #8]
 80079d2:	461f      	mov	r7, r3
 80079d4:	42be      	cmp	r6, r7
 80079d6:	680b      	ldr	r3, [r1, #0]
 80079d8:	4682      	mov	sl, r0
 80079da:	460c      	mov	r4, r1
 80079dc:	4690      	mov	r8, r2
 80079de:	d82d      	bhi.n	8007a3c <__ssputs_r+0x70>
 80079e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80079e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80079e8:	d026      	beq.n	8007a38 <__ssputs_r+0x6c>
 80079ea:	6965      	ldr	r5, [r4, #20]
 80079ec:	6909      	ldr	r1, [r1, #16]
 80079ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079f2:	eba3 0901 	sub.w	r9, r3, r1
 80079f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079fa:	1c7b      	adds	r3, r7, #1
 80079fc:	444b      	add	r3, r9
 80079fe:	106d      	asrs	r5, r5, #1
 8007a00:	429d      	cmp	r5, r3
 8007a02:	bf38      	it	cc
 8007a04:	461d      	movcc	r5, r3
 8007a06:	0553      	lsls	r3, r2, #21
 8007a08:	d527      	bpl.n	8007a5a <__ssputs_r+0x8e>
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	f7ff fbd8 	bl	80071c0 <_malloc_r>
 8007a10:	4606      	mov	r6, r0
 8007a12:	b360      	cbz	r0, 8007a6e <__ssputs_r+0xa2>
 8007a14:	6921      	ldr	r1, [r4, #16]
 8007a16:	464a      	mov	r2, r9
 8007a18:	f000 fa06 	bl	8007e28 <memcpy>
 8007a1c:	89a3      	ldrh	r3, [r4, #12]
 8007a1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a26:	81a3      	strh	r3, [r4, #12]
 8007a28:	6126      	str	r6, [r4, #16]
 8007a2a:	6165      	str	r5, [r4, #20]
 8007a2c:	444e      	add	r6, r9
 8007a2e:	eba5 0509 	sub.w	r5, r5, r9
 8007a32:	6026      	str	r6, [r4, #0]
 8007a34:	60a5      	str	r5, [r4, #8]
 8007a36:	463e      	mov	r6, r7
 8007a38:	42be      	cmp	r6, r7
 8007a3a:	d900      	bls.n	8007a3e <__ssputs_r+0x72>
 8007a3c:	463e      	mov	r6, r7
 8007a3e:	6820      	ldr	r0, [r4, #0]
 8007a40:	4632      	mov	r2, r6
 8007a42:	4641      	mov	r1, r8
 8007a44:	f000 f9c6 	bl	8007dd4 <memmove>
 8007a48:	68a3      	ldr	r3, [r4, #8]
 8007a4a:	1b9b      	subs	r3, r3, r6
 8007a4c:	60a3      	str	r3, [r4, #8]
 8007a4e:	6823      	ldr	r3, [r4, #0]
 8007a50:	4433      	add	r3, r6
 8007a52:	6023      	str	r3, [r4, #0]
 8007a54:	2000      	movs	r0, #0
 8007a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a5a:	462a      	mov	r2, r5
 8007a5c:	f000 fa36 	bl	8007ecc <_realloc_r>
 8007a60:	4606      	mov	r6, r0
 8007a62:	2800      	cmp	r0, #0
 8007a64:	d1e0      	bne.n	8007a28 <__ssputs_r+0x5c>
 8007a66:	6921      	ldr	r1, [r4, #16]
 8007a68:	4650      	mov	r0, sl
 8007a6a:	f7ff fb35 	bl	80070d8 <_free_r>
 8007a6e:	230c      	movs	r3, #12
 8007a70:	f8ca 3000 	str.w	r3, [sl]
 8007a74:	89a3      	ldrh	r3, [r4, #12]
 8007a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a7a:	81a3      	strh	r3, [r4, #12]
 8007a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a80:	e7e9      	b.n	8007a56 <__ssputs_r+0x8a>
	...

08007a84 <_svfiprintf_r>:
 8007a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a88:	4698      	mov	r8, r3
 8007a8a:	898b      	ldrh	r3, [r1, #12]
 8007a8c:	061b      	lsls	r3, r3, #24
 8007a8e:	b09d      	sub	sp, #116	@ 0x74
 8007a90:	4607      	mov	r7, r0
 8007a92:	460d      	mov	r5, r1
 8007a94:	4614      	mov	r4, r2
 8007a96:	d510      	bpl.n	8007aba <_svfiprintf_r+0x36>
 8007a98:	690b      	ldr	r3, [r1, #16]
 8007a9a:	b973      	cbnz	r3, 8007aba <_svfiprintf_r+0x36>
 8007a9c:	2140      	movs	r1, #64	@ 0x40
 8007a9e:	f7ff fb8f 	bl	80071c0 <_malloc_r>
 8007aa2:	6028      	str	r0, [r5, #0]
 8007aa4:	6128      	str	r0, [r5, #16]
 8007aa6:	b930      	cbnz	r0, 8007ab6 <_svfiprintf_r+0x32>
 8007aa8:	230c      	movs	r3, #12
 8007aaa:	603b      	str	r3, [r7, #0]
 8007aac:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab0:	b01d      	add	sp, #116	@ 0x74
 8007ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab6:	2340      	movs	r3, #64	@ 0x40
 8007ab8:	616b      	str	r3, [r5, #20]
 8007aba:	2300      	movs	r3, #0
 8007abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007abe:	2320      	movs	r3, #32
 8007ac0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ac4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ac8:	2330      	movs	r3, #48	@ 0x30
 8007aca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007c68 <_svfiprintf_r+0x1e4>
 8007ace:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ad2:	f04f 0901 	mov.w	r9, #1
 8007ad6:	4623      	mov	r3, r4
 8007ad8:	469a      	mov	sl, r3
 8007ada:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ade:	b10a      	cbz	r2, 8007ae4 <_svfiprintf_r+0x60>
 8007ae0:	2a25      	cmp	r2, #37	@ 0x25
 8007ae2:	d1f9      	bne.n	8007ad8 <_svfiprintf_r+0x54>
 8007ae4:	ebba 0b04 	subs.w	fp, sl, r4
 8007ae8:	d00b      	beq.n	8007b02 <_svfiprintf_r+0x7e>
 8007aea:	465b      	mov	r3, fp
 8007aec:	4622      	mov	r2, r4
 8007aee:	4629      	mov	r1, r5
 8007af0:	4638      	mov	r0, r7
 8007af2:	f7ff ff6b 	bl	80079cc <__ssputs_r>
 8007af6:	3001      	adds	r0, #1
 8007af8:	f000 80a7 	beq.w	8007c4a <_svfiprintf_r+0x1c6>
 8007afc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007afe:	445a      	add	r2, fp
 8007b00:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b02:	f89a 3000 	ldrb.w	r3, [sl]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 809f 	beq.w	8007c4a <_svfiprintf_r+0x1c6>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b16:	f10a 0a01 	add.w	sl, sl, #1
 8007b1a:	9304      	str	r3, [sp, #16]
 8007b1c:	9307      	str	r3, [sp, #28]
 8007b1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b22:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b24:	4654      	mov	r4, sl
 8007b26:	2205      	movs	r2, #5
 8007b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b2c:	484e      	ldr	r0, [pc, #312]	@ (8007c68 <_svfiprintf_r+0x1e4>)
 8007b2e:	f7f8 fb6f 	bl	8000210 <memchr>
 8007b32:	9a04      	ldr	r2, [sp, #16]
 8007b34:	b9d8      	cbnz	r0, 8007b6e <_svfiprintf_r+0xea>
 8007b36:	06d0      	lsls	r0, r2, #27
 8007b38:	bf44      	itt	mi
 8007b3a:	2320      	movmi	r3, #32
 8007b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b40:	0711      	lsls	r1, r2, #28
 8007b42:	bf44      	itt	mi
 8007b44:	232b      	movmi	r3, #43	@ 0x2b
 8007b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b50:	d015      	beq.n	8007b7e <_svfiprintf_r+0xfa>
 8007b52:	9a07      	ldr	r2, [sp, #28]
 8007b54:	4654      	mov	r4, sl
 8007b56:	2000      	movs	r0, #0
 8007b58:	f04f 0c0a 	mov.w	ip, #10
 8007b5c:	4621      	mov	r1, r4
 8007b5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b62:	3b30      	subs	r3, #48	@ 0x30
 8007b64:	2b09      	cmp	r3, #9
 8007b66:	d94b      	bls.n	8007c00 <_svfiprintf_r+0x17c>
 8007b68:	b1b0      	cbz	r0, 8007b98 <_svfiprintf_r+0x114>
 8007b6a:	9207      	str	r2, [sp, #28]
 8007b6c:	e014      	b.n	8007b98 <_svfiprintf_r+0x114>
 8007b6e:	eba0 0308 	sub.w	r3, r0, r8
 8007b72:	fa09 f303 	lsl.w	r3, r9, r3
 8007b76:	4313      	orrs	r3, r2
 8007b78:	9304      	str	r3, [sp, #16]
 8007b7a:	46a2      	mov	sl, r4
 8007b7c:	e7d2      	b.n	8007b24 <_svfiprintf_r+0xa0>
 8007b7e:	9b03      	ldr	r3, [sp, #12]
 8007b80:	1d19      	adds	r1, r3, #4
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	9103      	str	r1, [sp, #12]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	bfbb      	ittet	lt
 8007b8a:	425b      	neglt	r3, r3
 8007b8c:	f042 0202 	orrlt.w	r2, r2, #2
 8007b90:	9307      	strge	r3, [sp, #28]
 8007b92:	9307      	strlt	r3, [sp, #28]
 8007b94:	bfb8      	it	lt
 8007b96:	9204      	strlt	r2, [sp, #16]
 8007b98:	7823      	ldrb	r3, [r4, #0]
 8007b9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b9c:	d10a      	bne.n	8007bb4 <_svfiprintf_r+0x130>
 8007b9e:	7863      	ldrb	r3, [r4, #1]
 8007ba0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ba2:	d132      	bne.n	8007c0a <_svfiprintf_r+0x186>
 8007ba4:	9b03      	ldr	r3, [sp, #12]
 8007ba6:	1d1a      	adds	r2, r3, #4
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	9203      	str	r2, [sp, #12]
 8007bac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007bb0:	3402      	adds	r4, #2
 8007bb2:	9305      	str	r3, [sp, #20]
 8007bb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007c78 <_svfiprintf_r+0x1f4>
 8007bb8:	7821      	ldrb	r1, [r4, #0]
 8007bba:	2203      	movs	r2, #3
 8007bbc:	4650      	mov	r0, sl
 8007bbe:	f7f8 fb27 	bl	8000210 <memchr>
 8007bc2:	b138      	cbz	r0, 8007bd4 <_svfiprintf_r+0x150>
 8007bc4:	9b04      	ldr	r3, [sp, #16]
 8007bc6:	eba0 000a 	sub.w	r0, r0, sl
 8007bca:	2240      	movs	r2, #64	@ 0x40
 8007bcc:	4082      	lsls	r2, r0
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	3401      	adds	r4, #1
 8007bd2:	9304      	str	r3, [sp, #16]
 8007bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bd8:	4824      	ldr	r0, [pc, #144]	@ (8007c6c <_svfiprintf_r+0x1e8>)
 8007bda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007bde:	2206      	movs	r2, #6
 8007be0:	f7f8 fb16 	bl	8000210 <memchr>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d036      	beq.n	8007c56 <_svfiprintf_r+0x1d2>
 8007be8:	4b21      	ldr	r3, [pc, #132]	@ (8007c70 <_svfiprintf_r+0x1ec>)
 8007bea:	bb1b      	cbnz	r3, 8007c34 <_svfiprintf_r+0x1b0>
 8007bec:	9b03      	ldr	r3, [sp, #12]
 8007bee:	3307      	adds	r3, #7
 8007bf0:	f023 0307 	bic.w	r3, r3, #7
 8007bf4:	3308      	adds	r3, #8
 8007bf6:	9303      	str	r3, [sp, #12]
 8007bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bfa:	4433      	add	r3, r6
 8007bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bfe:	e76a      	b.n	8007ad6 <_svfiprintf_r+0x52>
 8007c00:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c04:	460c      	mov	r4, r1
 8007c06:	2001      	movs	r0, #1
 8007c08:	e7a8      	b.n	8007b5c <_svfiprintf_r+0xd8>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	3401      	adds	r4, #1
 8007c0e:	9305      	str	r3, [sp, #20]
 8007c10:	4619      	mov	r1, r3
 8007c12:	f04f 0c0a 	mov.w	ip, #10
 8007c16:	4620      	mov	r0, r4
 8007c18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c1c:	3a30      	subs	r2, #48	@ 0x30
 8007c1e:	2a09      	cmp	r2, #9
 8007c20:	d903      	bls.n	8007c2a <_svfiprintf_r+0x1a6>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d0c6      	beq.n	8007bb4 <_svfiprintf_r+0x130>
 8007c26:	9105      	str	r1, [sp, #20]
 8007c28:	e7c4      	b.n	8007bb4 <_svfiprintf_r+0x130>
 8007c2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c2e:	4604      	mov	r4, r0
 8007c30:	2301      	movs	r3, #1
 8007c32:	e7f0      	b.n	8007c16 <_svfiprintf_r+0x192>
 8007c34:	ab03      	add	r3, sp, #12
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	462a      	mov	r2, r5
 8007c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8007c74 <_svfiprintf_r+0x1f0>)
 8007c3c:	a904      	add	r1, sp, #16
 8007c3e:	4638      	mov	r0, r7
 8007c40:	f7fd fe50 	bl	80058e4 <_printf_float>
 8007c44:	1c42      	adds	r2, r0, #1
 8007c46:	4606      	mov	r6, r0
 8007c48:	d1d6      	bne.n	8007bf8 <_svfiprintf_r+0x174>
 8007c4a:	89ab      	ldrh	r3, [r5, #12]
 8007c4c:	065b      	lsls	r3, r3, #25
 8007c4e:	f53f af2d 	bmi.w	8007aac <_svfiprintf_r+0x28>
 8007c52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c54:	e72c      	b.n	8007ab0 <_svfiprintf_r+0x2c>
 8007c56:	ab03      	add	r3, sp, #12
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	462a      	mov	r2, r5
 8007c5c:	4b05      	ldr	r3, [pc, #20]	@ (8007c74 <_svfiprintf_r+0x1f0>)
 8007c5e:	a904      	add	r1, sp, #16
 8007c60:	4638      	mov	r0, r7
 8007c62:	f7fe f8d7 	bl	8005e14 <_printf_i>
 8007c66:	e7ed      	b.n	8007c44 <_svfiprintf_r+0x1c0>
 8007c68:	0800878e 	.word	0x0800878e
 8007c6c:	08008798 	.word	0x08008798
 8007c70:	080058e5 	.word	0x080058e5
 8007c74:	080079cd 	.word	0x080079cd
 8007c78:	08008794 	.word	0x08008794

08007c7c <__sflush_r>:
 8007c7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c84:	0716      	lsls	r6, r2, #28
 8007c86:	4605      	mov	r5, r0
 8007c88:	460c      	mov	r4, r1
 8007c8a:	d454      	bmi.n	8007d36 <__sflush_r+0xba>
 8007c8c:	684b      	ldr	r3, [r1, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	dc02      	bgt.n	8007c98 <__sflush_r+0x1c>
 8007c92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	dd48      	ble.n	8007d2a <__sflush_r+0xae>
 8007c98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c9a:	2e00      	cmp	r6, #0
 8007c9c:	d045      	beq.n	8007d2a <__sflush_r+0xae>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ca4:	682f      	ldr	r7, [r5, #0]
 8007ca6:	6a21      	ldr	r1, [r4, #32]
 8007ca8:	602b      	str	r3, [r5, #0]
 8007caa:	d030      	beq.n	8007d0e <__sflush_r+0x92>
 8007cac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007cae:	89a3      	ldrh	r3, [r4, #12]
 8007cb0:	0759      	lsls	r1, r3, #29
 8007cb2:	d505      	bpl.n	8007cc0 <__sflush_r+0x44>
 8007cb4:	6863      	ldr	r3, [r4, #4]
 8007cb6:	1ad2      	subs	r2, r2, r3
 8007cb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007cba:	b10b      	cbz	r3, 8007cc0 <__sflush_r+0x44>
 8007cbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007cbe:	1ad2      	subs	r2, r2, r3
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007cc4:	6a21      	ldr	r1, [r4, #32]
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	47b0      	blx	r6
 8007cca:	1c43      	adds	r3, r0, #1
 8007ccc:	89a3      	ldrh	r3, [r4, #12]
 8007cce:	d106      	bne.n	8007cde <__sflush_r+0x62>
 8007cd0:	6829      	ldr	r1, [r5, #0]
 8007cd2:	291d      	cmp	r1, #29
 8007cd4:	d82b      	bhi.n	8007d2e <__sflush_r+0xb2>
 8007cd6:	4a2a      	ldr	r2, [pc, #168]	@ (8007d80 <__sflush_r+0x104>)
 8007cd8:	40ca      	lsrs	r2, r1
 8007cda:	07d6      	lsls	r6, r2, #31
 8007cdc:	d527      	bpl.n	8007d2e <__sflush_r+0xb2>
 8007cde:	2200      	movs	r2, #0
 8007ce0:	6062      	str	r2, [r4, #4]
 8007ce2:	04d9      	lsls	r1, r3, #19
 8007ce4:	6922      	ldr	r2, [r4, #16]
 8007ce6:	6022      	str	r2, [r4, #0]
 8007ce8:	d504      	bpl.n	8007cf4 <__sflush_r+0x78>
 8007cea:	1c42      	adds	r2, r0, #1
 8007cec:	d101      	bne.n	8007cf2 <__sflush_r+0x76>
 8007cee:	682b      	ldr	r3, [r5, #0]
 8007cf0:	b903      	cbnz	r3, 8007cf4 <__sflush_r+0x78>
 8007cf2:	6560      	str	r0, [r4, #84]	@ 0x54
 8007cf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cf6:	602f      	str	r7, [r5, #0]
 8007cf8:	b1b9      	cbz	r1, 8007d2a <__sflush_r+0xae>
 8007cfa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cfe:	4299      	cmp	r1, r3
 8007d00:	d002      	beq.n	8007d08 <__sflush_r+0x8c>
 8007d02:	4628      	mov	r0, r5
 8007d04:	f7ff f9e8 	bl	80070d8 <_free_r>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d0c:	e00d      	b.n	8007d2a <__sflush_r+0xae>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	4628      	mov	r0, r5
 8007d12:	47b0      	blx	r6
 8007d14:	4602      	mov	r2, r0
 8007d16:	1c50      	adds	r0, r2, #1
 8007d18:	d1c9      	bne.n	8007cae <__sflush_r+0x32>
 8007d1a:	682b      	ldr	r3, [r5, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d0c6      	beq.n	8007cae <__sflush_r+0x32>
 8007d20:	2b1d      	cmp	r3, #29
 8007d22:	d001      	beq.n	8007d28 <__sflush_r+0xac>
 8007d24:	2b16      	cmp	r3, #22
 8007d26:	d11e      	bne.n	8007d66 <__sflush_r+0xea>
 8007d28:	602f      	str	r7, [r5, #0]
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	e022      	b.n	8007d74 <__sflush_r+0xf8>
 8007d2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d32:	b21b      	sxth	r3, r3
 8007d34:	e01b      	b.n	8007d6e <__sflush_r+0xf2>
 8007d36:	690f      	ldr	r7, [r1, #16]
 8007d38:	2f00      	cmp	r7, #0
 8007d3a:	d0f6      	beq.n	8007d2a <__sflush_r+0xae>
 8007d3c:	0793      	lsls	r3, r2, #30
 8007d3e:	680e      	ldr	r6, [r1, #0]
 8007d40:	bf08      	it	eq
 8007d42:	694b      	ldreq	r3, [r1, #20]
 8007d44:	600f      	str	r7, [r1, #0]
 8007d46:	bf18      	it	ne
 8007d48:	2300      	movne	r3, #0
 8007d4a:	eba6 0807 	sub.w	r8, r6, r7
 8007d4e:	608b      	str	r3, [r1, #8]
 8007d50:	f1b8 0f00 	cmp.w	r8, #0
 8007d54:	dde9      	ble.n	8007d2a <__sflush_r+0xae>
 8007d56:	6a21      	ldr	r1, [r4, #32]
 8007d58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007d5a:	4643      	mov	r3, r8
 8007d5c:	463a      	mov	r2, r7
 8007d5e:	4628      	mov	r0, r5
 8007d60:	47b0      	blx	r6
 8007d62:	2800      	cmp	r0, #0
 8007d64:	dc08      	bgt.n	8007d78 <__sflush_r+0xfc>
 8007d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d6e:	81a3      	strh	r3, [r4, #12]
 8007d70:	f04f 30ff 	mov.w	r0, #4294967295
 8007d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d78:	4407      	add	r7, r0
 8007d7a:	eba8 0800 	sub.w	r8, r8, r0
 8007d7e:	e7e7      	b.n	8007d50 <__sflush_r+0xd4>
 8007d80:	20400001 	.word	0x20400001

08007d84 <_fflush_r>:
 8007d84:	b538      	push	{r3, r4, r5, lr}
 8007d86:	690b      	ldr	r3, [r1, #16]
 8007d88:	4605      	mov	r5, r0
 8007d8a:	460c      	mov	r4, r1
 8007d8c:	b913      	cbnz	r3, 8007d94 <_fflush_r+0x10>
 8007d8e:	2500      	movs	r5, #0
 8007d90:	4628      	mov	r0, r5
 8007d92:	bd38      	pop	{r3, r4, r5, pc}
 8007d94:	b118      	cbz	r0, 8007d9e <_fflush_r+0x1a>
 8007d96:	6a03      	ldr	r3, [r0, #32]
 8007d98:	b90b      	cbnz	r3, 8007d9e <_fflush_r+0x1a>
 8007d9a:	f7fe f9e5 	bl	8006168 <__sinit>
 8007d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0f3      	beq.n	8007d8e <_fflush_r+0xa>
 8007da6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007da8:	07d0      	lsls	r0, r2, #31
 8007daa:	d404      	bmi.n	8007db6 <_fflush_r+0x32>
 8007dac:	0599      	lsls	r1, r3, #22
 8007dae:	d402      	bmi.n	8007db6 <_fflush_r+0x32>
 8007db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007db2:	f7fe fb36 	bl	8006422 <__retarget_lock_acquire_recursive>
 8007db6:	4628      	mov	r0, r5
 8007db8:	4621      	mov	r1, r4
 8007dba:	f7ff ff5f 	bl	8007c7c <__sflush_r>
 8007dbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007dc0:	07da      	lsls	r2, r3, #31
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	d4e4      	bmi.n	8007d90 <_fflush_r+0xc>
 8007dc6:	89a3      	ldrh	r3, [r4, #12]
 8007dc8:	059b      	lsls	r3, r3, #22
 8007dca:	d4e1      	bmi.n	8007d90 <_fflush_r+0xc>
 8007dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dce:	f7fe fb29 	bl	8006424 <__retarget_lock_release_recursive>
 8007dd2:	e7dd      	b.n	8007d90 <_fflush_r+0xc>

08007dd4 <memmove>:
 8007dd4:	4288      	cmp	r0, r1
 8007dd6:	b510      	push	{r4, lr}
 8007dd8:	eb01 0402 	add.w	r4, r1, r2
 8007ddc:	d902      	bls.n	8007de4 <memmove+0x10>
 8007dde:	4284      	cmp	r4, r0
 8007de0:	4623      	mov	r3, r4
 8007de2:	d807      	bhi.n	8007df4 <memmove+0x20>
 8007de4:	1e43      	subs	r3, r0, #1
 8007de6:	42a1      	cmp	r1, r4
 8007de8:	d008      	beq.n	8007dfc <memmove+0x28>
 8007dea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007df2:	e7f8      	b.n	8007de6 <memmove+0x12>
 8007df4:	4402      	add	r2, r0
 8007df6:	4601      	mov	r1, r0
 8007df8:	428a      	cmp	r2, r1
 8007dfa:	d100      	bne.n	8007dfe <memmove+0x2a>
 8007dfc:	bd10      	pop	{r4, pc}
 8007dfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e06:	e7f7      	b.n	8007df8 <memmove+0x24>

08007e08 <_sbrk_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	4d06      	ldr	r5, [pc, #24]	@ (8007e24 <_sbrk_r+0x1c>)
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	4604      	mov	r4, r0
 8007e10:	4608      	mov	r0, r1
 8007e12:	602b      	str	r3, [r5, #0]
 8007e14:	f7fa f8fe 	bl	8002014 <_sbrk>
 8007e18:	1c43      	adds	r3, r0, #1
 8007e1a:	d102      	bne.n	8007e22 <_sbrk_r+0x1a>
 8007e1c:	682b      	ldr	r3, [r5, #0]
 8007e1e:	b103      	cbz	r3, 8007e22 <_sbrk_r+0x1a>
 8007e20:	6023      	str	r3, [r4, #0]
 8007e22:	bd38      	pop	{r3, r4, r5, pc}
 8007e24:	20000618 	.word	0x20000618

08007e28 <memcpy>:
 8007e28:	440a      	add	r2, r1
 8007e2a:	4291      	cmp	r1, r2
 8007e2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e30:	d100      	bne.n	8007e34 <memcpy+0xc>
 8007e32:	4770      	bx	lr
 8007e34:	b510      	push	{r4, lr}
 8007e36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e3e:	4291      	cmp	r1, r2
 8007e40:	d1f9      	bne.n	8007e36 <memcpy+0xe>
 8007e42:	bd10      	pop	{r4, pc}

08007e44 <__assert_func>:
 8007e44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e46:	4614      	mov	r4, r2
 8007e48:	461a      	mov	r2, r3
 8007e4a:	4b09      	ldr	r3, [pc, #36]	@ (8007e70 <__assert_func+0x2c>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4605      	mov	r5, r0
 8007e50:	68d8      	ldr	r0, [r3, #12]
 8007e52:	b14c      	cbz	r4, 8007e68 <__assert_func+0x24>
 8007e54:	4b07      	ldr	r3, [pc, #28]	@ (8007e74 <__assert_func+0x30>)
 8007e56:	9100      	str	r1, [sp, #0]
 8007e58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e5c:	4906      	ldr	r1, [pc, #24]	@ (8007e78 <__assert_func+0x34>)
 8007e5e:	462b      	mov	r3, r5
 8007e60:	f000 f870 	bl	8007f44 <fiprintf>
 8007e64:	f000 f880 	bl	8007f68 <abort>
 8007e68:	4b04      	ldr	r3, [pc, #16]	@ (8007e7c <__assert_func+0x38>)
 8007e6a:	461c      	mov	r4, r3
 8007e6c:	e7f3      	b.n	8007e56 <__assert_func+0x12>
 8007e6e:	bf00      	nop
 8007e70:	2000001c 	.word	0x2000001c
 8007e74:	080087a9 	.word	0x080087a9
 8007e78:	080087b6 	.word	0x080087b6
 8007e7c:	080087e4 	.word	0x080087e4

08007e80 <_calloc_r>:
 8007e80:	b570      	push	{r4, r5, r6, lr}
 8007e82:	fba1 5402 	umull	r5, r4, r1, r2
 8007e86:	b934      	cbnz	r4, 8007e96 <_calloc_r+0x16>
 8007e88:	4629      	mov	r1, r5
 8007e8a:	f7ff f999 	bl	80071c0 <_malloc_r>
 8007e8e:	4606      	mov	r6, r0
 8007e90:	b928      	cbnz	r0, 8007e9e <_calloc_r+0x1e>
 8007e92:	4630      	mov	r0, r6
 8007e94:	bd70      	pop	{r4, r5, r6, pc}
 8007e96:	220c      	movs	r2, #12
 8007e98:	6002      	str	r2, [r0, #0]
 8007e9a:	2600      	movs	r6, #0
 8007e9c:	e7f9      	b.n	8007e92 <_calloc_r+0x12>
 8007e9e:	462a      	mov	r2, r5
 8007ea0:	4621      	mov	r1, r4
 8007ea2:	f7fe fa32 	bl	800630a <memset>
 8007ea6:	e7f4      	b.n	8007e92 <_calloc_r+0x12>

08007ea8 <__ascii_mbtowc>:
 8007ea8:	b082      	sub	sp, #8
 8007eaa:	b901      	cbnz	r1, 8007eae <__ascii_mbtowc+0x6>
 8007eac:	a901      	add	r1, sp, #4
 8007eae:	b142      	cbz	r2, 8007ec2 <__ascii_mbtowc+0x1a>
 8007eb0:	b14b      	cbz	r3, 8007ec6 <__ascii_mbtowc+0x1e>
 8007eb2:	7813      	ldrb	r3, [r2, #0]
 8007eb4:	600b      	str	r3, [r1, #0]
 8007eb6:	7812      	ldrb	r2, [r2, #0]
 8007eb8:	1e10      	subs	r0, r2, #0
 8007eba:	bf18      	it	ne
 8007ebc:	2001      	movne	r0, #1
 8007ebe:	b002      	add	sp, #8
 8007ec0:	4770      	bx	lr
 8007ec2:	4610      	mov	r0, r2
 8007ec4:	e7fb      	b.n	8007ebe <__ascii_mbtowc+0x16>
 8007ec6:	f06f 0001 	mvn.w	r0, #1
 8007eca:	e7f8      	b.n	8007ebe <__ascii_mbtowc+0x16>

08007ecc <_realloc_r>:
 8007ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed0:	4607      	mov	r7, r0
 8007ed2:	4614      	mov	r4, r2
 8007ed4:	460d      	mov	r5, r1
 8007ed6:	b921      	cbnz	r1, 8007ee2 <_realloc_r+0x16>
 8007ed8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007edc:	4611      	mov	r1, r2
 8007ede:	f7ff b96f 	b.w	80071c0 <_malloc_r>
 8007ee2:	b92a      	cbnz	r2, 8007ef0 <_realloc_r+0x24>
 8007ee4:	f7ff f8f8 	bl	80070d8 <_free_r>
 8007ee8:	4625      	mov	r5, r4
 8007eea:	4628      	mov	r0, r5
 8007eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef0:	f000 f841 	bl	8007f76 <_malloc_usable_size_r>
 8007ef4:	4284      	cmp	r4, r0
 8007ef6:	4606      	mov	r6, r0
 8007ef8:	d802      	bhi.n	8007f00 <_realloc_r+0x34>
 8007efa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007efe:	d8f4      	bhi.n	8007eea <_realloc_r+0x1e>
 8007f00:	4621      	mov	r1, r4
 8007f02:	4638      	mov	r0, r7
 8007f04:	f7ff f95c 	bl	80071c0 <_malloc_r>
 8007f08:	4680      	mov	r8, r0
 8007f0a:	b908      	cbnz	r0, 8007f10 <_realloc_r+0x44>
 8007f0c:	4645      	mov	r5, r8
 8007f0e:	e7ec      	b.n	8007eea <_realloc_r+0x1e>
 8007f10:	42b4      	cmp	r4, r6
 8007f12:	4622      	mov	r2, r4
 8007f14:	4629      	mov	r1, r5
 8007f16:	bf28      	it	cs
 8007f18:	4632      	movcs	r2, r6
 8007f1a:	f7ff ff85 	bl	8007e28 <memcpy>
 8007f1e:	4629      	mov	r1, r5
 8007f20:	4638      	mov	r0, r7
 8007f22:	f7ff f8d9 	bl	80070d8 <_free_r>
 8007f26:	e7f1      	b.n	8007f0c <_realloc_r+0x40>

08007f28 <__ascii_wctomb>:
 8007f28:	4603      	mov	r3, r0
 8007f2a:	4608      	mov	r0, r1
 8007f2c:	b141      	cbz	r1, 8007f40 <__ascii_wctomb+0x18>
 8007f2e:	2aff      	cmp	r2, #255	@ 0xff
 8007f30:	d904      	bls.n	8007f3c <__ascii_wctomb+0x14>
 8007f32:	228a      	movs	r2, #138	@ 0x8a
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3a:	4770      	bx	lr
 8007f3c:	700a      	strb	r2, [r1, #0]
 8007f3e:	2001      	movs	r0, #1
 8007f40:	4770      	bx	lr
	...

08007f44 <fiprintf>:
 8007f44:	b40e      	push	{r1, r2, r3}
 8007f46:	b503      	push	{r0, r1, lr}
 8007f48:	4601      	mov	r1, r0
 8007f4a:	ab03      	add	r3, sp, #12
 8007f4c:	4805      	ldr	r0, [pc, #20]	@ (8007f64 <fiprintf+0x20>)
 8007f4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f52:	6800      	ldr	r0, [r0, #0]
 8007f54:	9301      	str	r3, [sp, #4]
 8007f56:	f000 f83f 	bl	8007fd8 <_vfiprintf_r>
 8007f5a:	b002      	add	sp, #8
 8007f5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f60:	b003      	add	sp, #12
 8007f62:	4770      	bx	lr
 8007f64:	2000001c 	.word	0x2000001c

08007f68 <abort>:
 8007f68:	b508      	push	{r3, lr}
 8007f6a:	2006      	movs	r0, #6
 8007f6c:	f000 fa08 	bl	8008380 <raise>
 8007f70:	2001      	movs	r0, #1
 8007f72:	f7f9 ffd6 	bl	8001f22 <_exit>

08007f76 <_malloc_usable_size_r>:
 8007f76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f7a:	1f18      	subs	r0, r3, #4
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	bfbc      	itt	lt
 8007f80:	580b      	ldrlt	r3, [r1, r0]
 8007f82:	18c0      	addlt	r0, r0, r3
 8007f84:	4770      	bx	lr

08007f86 <__sfputc_r>:
 8007f86:	6893      	ldr	r3, [r2, #8]
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	b410      	push	{r4}
 8007f8e:	6093      	str	r3, [r2, #8]
 8007f90:	da08      	bge.n	8007fa4 <__sfputc_r+0x1e>
 8007f92:	6994      	ldr	r4, [r2, #24]
 8007f94:	42a3      	cmp	r3, r4
 8007f96:	db01      	blt.n	8007f9c <__sfputc_r+0x16>
 8007f98:	290a      	cmp	r1, #10
 8007f9a:	d103      	bne.n	8007fa4 <__sfputc_r+0x1e>
 8007f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fa0:	f000 b932 	b.w	8008208 <__swbuf_r>
 8007fa4:	6813      	ldr	r3, [r2, #0]
 8007fa6:	1c58      	adds	r0, r3, #1
 8007fa8:	6010      	str	r0, [r2, #0]
 8007faa:	7019      	strb	r1, [r3, #0]
 8007fac:	4608      	mov	r0, r1
 8007fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <__sfputs_r>:
 8007fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb6:	4606      	mov	r6, r0
 8007fb8:	460f      	mov	r7, r1
 8007fba:	4614      	mov	r4, r2
 8007fbc:	18d5      	adds	r5, r2, r3
 8007fbe:	42ac      	cmp	r4, r5
 8007fc0:	d101      	bne.n	8007fc6 <__sfputs_r+0x12>
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	e007      	b.n	8007fd6 <__sfputs_r+0x22>
 8007fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fca:	463a      	mov	r2, r7
 8007fcc:	4630      	mov	r0, r6
 8007fce:	f7ff ffda 	bl	8007f86 <__sfputc_r>
 8007fd2:	1c43      	adds	r3, r0, #1
 8007fd4:	d1f3      	bne.n	8007fbe <__sfputs_r+0xa>
 8007fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fd8 <_vfiprintf_r>:
 8007fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fdc:	460d      	mov	r5, r1
 8007fde:	b09d      	sub	sp, #116	@ 0x74
 8007fe0:	4614      	mov	r4, r2
 8007fe2:	4698      	mov	r8, r3
 8007fe4:	4606      	mov	r6, r0
 8007fe6:	b118      	cbz	r0, 8007ff0 <_vfiprintf_r+0x18>
 8007fe8:	6a03      	ldr	r3, [r0, #32]
 8007fea:	b90b      	cbnz	r3, 8007ff0 <_vfiprintf_r+0x18>
 8007fec:	f7fe f8bc 	bl	8006168 <__sinit>
 8007ff0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ff2:	07d9      	lsls	r1, r3, #31
 8007ff4:	d405      	bmi.n	8008002 <_vfiprintf_r+0x2a>
 8007ff6:	89ab      	ldrh	r3, [r5, #12]
 8007ff8:	059a      	lsls	r2, r3, #22
 8007ffa:	d402      	bmi.n	8008002 <_vfiprintf_r+0x2a>
 8007ffc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ffe:	f7fe fa10 	bl	8006422 <__retarget_lock_acquire_recursive>
 8008002:	89ab      	ldrh	r3, [r5, #12]
 8008004:	071b      	lsls	r3, r3, #28
 8008006:	d501      	bpl.n	800800c <_vfiprintf_r+0x34>
 8008008:	692b      	ldr	r3, [r5, #16]
 800800a:	b99b      	cbnz	r3, 8008034 <_vfiprintf_r+0x5c>
 800800c:	4629      	mov	r1, r5
 800800e:	4630      	mov	r0, r6
 8008010:	f000 f938 	bl	8008284 <__swsetup_r>
 8008014:	b170      	cbz	r0, 8008034 <_vfiprintf_r+0x5c>
 8008016:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008018:	07dc      	lsls	r4, r3, #31
 800801a:	d504      	bpl.n	8008026 <_vfiprintf_r+0x4e>
 800801c:	f04f 30ff 	mov.w	r0, #4294967295
 8008020:	b01d      	add	sp, #116	@ 0x74
 8008022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008026:	89ab      	ldrh	r3, [r5, #12]
 8008028:	0598      	lsls	r0, r3, #22
 800802a:	d4f7      	bmi.n	800801c <_vfiprintf_r+0x44>
 800802c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800802e:	f7fe f9f9 	bl	8006424 <__retarget_lock_release_recursive>
 8008032:	e7f3      	b.n	800801c <_vfiprintf_r+0x44>
 8008034:	2300      	movs	r3, #0
 8008036:	9309      	str	r3, [sp, #36]	@ 0x24
 8008038:	2320      	movs	r3, #32
 800803a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800803e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008042:	2330      	movs	r3, #48	@ 0x30
 8008044:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80081f4 <_vfiprintf_r+0x21c>
 8008048:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800804c:	f04f 0901 	mov.w	r9, #1
 8008050:	4623      	mov	r3, r4
 8008052:	469a      	mov	sl, r3
 8008054:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008058:	b10a      	cbz	r2, 800805e <_vfiprintf_r+0x86>
 800805a:	2a25      	cmp	r2, #37	@ 0x25
 800805c:	d1f9      	bne.n	8008052 <_vfiprintf_r+0x7a>
 800805e:	ebba 0b04 	subs.w	fp, sl, r4
 8008062:	d00b      	beq.n	800807c <_vfiprintf_r+0xa4>
 8008064:	465b      	mov	r3, fp
 8008066:	4622      	mov	r2, r4
 8008068:	4629      	mov	r1, r5
 800806a:	4630      	mov	r0, r6
 800806c:	f7ff ffa2 	bl	8007fb4 <__sfputs_r>
 8008070:	3001      	adds	r0, #1
 8008072:	f000 80a7 	beq.w	80081c4 <_vfiprintf_r+0x1ec>
 8008076:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008078:	445a      	add	r2, fp
 800807a:	9209      	str	r2, [sp, #36]	@ 0x24
 800807c:	f89a 3000 	ldrb.w	r3, [sl]
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 809f 	beq.w	80081c4 <_vfiprintf_r+0x1ec>
 8008086:	2300      	movs	r3, #0
 8008088:	f04f 32ff 	mov.w	r2, #4294967295
 800808c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008090:	f10a 0a01 	add.w	sl, sl, #1
 8008094:	9304      	str	r3, [sp, #16]
 8008096:	9307      	str	r3, [sp, #28]
 8008098:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800809c:	931a      	str	r3, [sp, #104]	@ 0x68
 800809e:	4654      	mov	r4, sl
 80080a0:	2205      	movs	r2, #5
 80080a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080a6:	4853      	ldr	r0, [pc, #332]	@ (80081f4 <_vfiprintf_r+0x21c>)
 80080a8:	f7f8 f8b2 	bl	8000210 <memchr>
 80080ac:	9a04      	ldr	r2, [sp, #16]
 80080ae:	b9d8      	cbnz	r0, 80080e8 <_vfiprintf_r+0x110>
 80080b0:	06d1      	lsls	r1, r2, #27
 80080b2:	bf44      	itt	mi
 80080b4:	2320      	movmi	r3, #32
 80080b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080ba:	0713      	lsls	r3, r2, #28
 80080bc:	bf44      	itt	mi
 80080be:	232b      	movmi	r3, #43	@ 0x2b
 80080c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080c4:	f89a 3000 	ldrb.w	r3, [sl]
 80080c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80080ca:	d015      	beq.n	80080f8 <_vfiprintf_r+0x120>
 80080cc:	9a07      	ldr	r2, [sp, #28]
 80080ce:	4654      	mov	r4, sl
 80080d0:	2000      	movs	r0, #0
 80080d2:	f04f 0c0a 	mov.w	ip, #10
 80080d6:	4621      	mov	r1, r4
 80080d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080dc:	3b30      	subs	r3, #48	@ 0x30
 80080de:	2b09      	cmp	r3, #9
 80080e0:	d94b      	bls.n	800817a <_vfiprintf_r+0x1a2>
 80080e2:	b1b0      	cbz	r0, 8008112 <_vfiprintf_r+0x13a>
 80080e4:	9207      	str	r2, [sp, #28]
 80080e6:	e014      	b.n	8008112 <_vfiprintf_r+0x13a>
 80080e8:	eba0 0308 	sub.w	r3, r0, r8
 80080ec:	fa09 f303 	lsl.w	r3, r9, r3
 80080f0:	4313      	orrs	r3, r2
 80080f2:	9304      	str	r3, [sp, #16]
 80080f4:	46a2      	mov	sl, r4
 80080f6:	e7d2      	b.n	800809e <_vfiprintf_r+0xc6>
 80080f8:	9b03      	ldr	r3, [sp, #12]
 80080fa:	1d19      	adds	r1, r3, #4
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	9103      	str	r1, [sp, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	bfbb      	ittet	lt
 8008104:	425b      	neglt	r3, r3
 8008106:	f042 0202 	orrlt.w	r2, r2, #2
 800810a:	9307      	strge	r3, [sp, #28]
 800810c:	9307      	strlt	r3, [sp, #28]
 800810e:	bfb8      	it	lt
 8008110:	9204      	strlt	r2, [sp, #16]
 8008112:	7823      	ldrb	r3, [r4, #0]
 8008114:	2b2e      	cmp	r3, #46	@ 0x2e
 8008116:	d10a      	bne.n	800812e <_vfiprintf_r+0x156>
 8008118:	7863      	ldrb	r3, [r4, #1]
 800811a:	2b2a      	cmp	r3, #42	@ 0x2a
 800811c:	d132      	bne.n	8008184 <_vfiprintf_r+0x1ac>
 800811e:	9b03      	ldr	r3, [sp, #12]
 8008120:	1d1a      	adds	r2, r3, #4
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	9203      	str	r2, [sp, #12]
 8008126:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800812a:	3402      	adds	r4, #2
 800812c:	9305      	str	r3, [sp, #20]
 800812e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008204 <_vfiprintf_r+0x22c>
 8008132:	7821      	ldrb	r1, [r4, #0]
 8008134:	2203      	movs	r2, #3
 8008136:	4650      	mov	r0, sl
 8008138:	f7f8 f86a 	bl	8000210 <memchr>
 800813c:	b138      	cbz	r0, 800814e <_vfiprintf_r+0x176>
 800813e:	9b04      	ldr	r3, [sp, #16]
 8008140:	eba0 000a 	sub.w	r0, r0, sl
 8008144:	2240      	movs	r2, #64	@ 0x40
 8008146:	4082      	lsls	r2, r0
 8008148:	4313      	orrs	r3, r2
 800814a:	3401      	adds	r4, #1
 800814c:	9304      	str	r3, [sp, #16]
 800814e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008152:	4829      	ldr	r0, [pc, #164]	@ (80081f8 <_vfiprintf_r+0x220>)
 8008154:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008158:	2206      	movs	r2, #6
 800815a:	f7f8 f859 	bl	8000210 <memchr>
 800815e:	2800      	cmp	r0, #0
 8008160:	d03f      	beq.n	80081e2 <_vfiprintf_r+0x20a>
 8008162:	4b26      	ldr	r3, [pc, #152]	@ (80081fc <_vfiprintf_r+0x224>)
 8008164:	bb1b      	cbnz	r3, 80081ae <_vfiprintf_r+0x1d6>
 8008166:	9b03      	ldr	r3, [sp, #12]
 8008168:	3307      	adds	r3, #7
 800816a:	f023 0307 	bic.w	r3, r3, #7
 800816e:	3308      	adds	r3, #8
 8008170:	9303      	str	r3, [sp, #12]
 8008172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008174:	443b      	add	r3, r7
 8008176:	9309      	str	r3, [sp, #36]	@ 0x24
 8008178:	e76a      	b.n	8008050 <_vfiprintf_r+0x78>
 800817a:	fb0c 3202 	mla	r2, ip, r2, r3
 800817e:	460c      	mov	r4, r1
 8008180:	2001      	movs	r0, #1
 8008182:	e7a8      	b.n	80080d6 <_vfiprintf_r+0xfe>
 8008184:	2300      	movs	r3, #0
 8008186:	3401      	adds	r4, #1
 8008188:	9305      	str	r3, [sp, #20]
 800818a:	4619      	mov	r1, r3
 800818c:	f04f 0c0a 	mov.w	ip, #10
 8008190:	4620      	mov	r0, r4
 8008192:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008196:	3a30      	subs	r2, #48	@ 0x30
 8008198:	2a09      	cmp	r2, #9
 800819a:	d903      	bls.n	80081a4 <_vfiprintf_r+0x1cc>
 800819c:	2b00      	cmp	r3, #0
 800819e:	d0c6      	beq.n	800812e <_vfiprintf_r+0x156>
 80081a0:	9105      	str	r1, [sp, #20]
 80081a2:	e7c4      	b.n	800812e <_vfiprintf_r+0x156>
 80081a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80081a8:	4604      	mov	r4, r0
 80081aa:	2301      	movs	r3, #1
 80081ac:	e7f0      	b.n	8008190 <_vfiprintf_r+0x1b8>
 80081ae:	ab03      	add	r3, sp, #12
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	462a      	mov	r2, r5
 80081b4:	4b12      	ldr	r3, [pc, #72]	@ (8008200 <_vfiprintf_r+0x228>)
 80081b6:	a904      	add	r1, sp, #16
 80081b8:	4630      	mov	r0, r6
 80081ba:	f7fd fb93 	bl	80058e4 <_printf_float>
 80081be:	4607      	mov	r7, r0
 80081c0:	1c78      	adds	r0, r7, #1
 80081c2:	d1d6      	bne.n	8008172 <_vfiprintf_r+0x19a>
 80081c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081c6:	07d9      	lsls	r1, r3, #31
 80081c8:	d405      	bmi.n	80081d6 <_vfiprintf_r+0x1fe>
 80081ca:	89ab      	ldrh	r3, [r5, #12]
 80081cc:	059a      	lsls	r2, r3, #22
 80081ce:	d402      	bmi.n	80081d6 <_vfiprintf_r+0x1fe>
 80081d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081d2:	f7fe f927 	bl	8006424 <__retarget_lock_release_recursive>
 80081d6:	89ab      	ldrh	r3, [r5, #12]
 80081d8:	065b      	lsls	r3, r3, #25
 80081da:	f53f af1f 	bmi.w	800801c <_vfiprintf_r+0x44>
 80081de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081e0:	e71e      	b.n	8008020 <_vfiprintf_r+0x48>
 80081e2:	ab03      	add	r3, sp, #12
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	462a      	mov	r2, r5
 80081e8:	4b05      	ldr	r3, [pc, #20]	@ (8008200 <_vfiprintf_r+0x228>)
 80081ea:	a904      	add	r1, sp, #16
 80081ec:	4630      	mov	r0, r6
 80081ee:	f7fd fe11 	bl	8005e14 <_printf_i>
 80081f2:	e7e4      	b.n	80081be <_vfiprintf_r+0x1e6>
 80081f4:	0800878e 	.word	0x0800878e
 80081f8:	08008798 	.word	0x08008798
 80081fc:	080058e5 	.word	0x080058e5
 8008200:	08007fb5 	.word	0x08007fb5
 8008204:	08008794 	.word	0x08008794

08008208 <__swbuf_r>:
 8008208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820a:	460e      	mov	r6, r1
 800820c:	4614      	mov	r4, r2
 800820e:	4605      	mov	r5, r0
 8008210:	b118      	cbz	r0, 800821a <__swbuf_r+0x12>
 8008212:	6a03      	ldr	r3, [r0, #32]
 8008214:	b90b      	cbnz	r3, 800821a <__swbuf_r+0x12>
 8008216:	f7fd ffa7 	bl	8006168 <__sinit>
 800821a:	69a3      	ldr	r3, [r4, #24]
 800821c:	60a3      	str	r3, [r4, #8]
 800821e:	89a3      	ldrh	r3, [r4, #12]
 8008220:	071a      	lsls	r2, r3, #28
 8008222:	d501      	bpl.n	8008228 <__swbuf_r+0x20>
 8008224:	6923      	ldr	r3, [r4, #16]
 8008226:	b943      	cbnz	r3, 800823a <__swbuf_r+0x32>
 8008228:	4621      	mov	r1, r4
 800822a:	4628      	mov	r0, r5
 800822c:	f000 f82a 	bl	8008284 <__swsetup_r>
 8008230:	b118      	cbz	r0, 800823a <__swbuf_r+0x32>
 8008232:	f04f 37ff 	mov.w	r7, #4294967295
 8008236:	4638      	mov	r0, r7
 8008238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800823a:	6823      	ldr	r3, [r4, #0]
 800823c:	6922      	ldr	r2, [r4, #16]
 800823e:	1a98      	subs	r0, r3, r2
 8008240:	6963      	ldr	r3, [r4, #20]
 8008242:	b2f6      	uxtb	r6, r6
 8008244:	4283      	cmp	r3, r0
 8008246:	4637      	mov	r7, r6
 8008248:	dc05      	bgt.n	8008256 <__swbuf_r+0x4e>
 800824a:	4621      	mov	r1, r4
 800824c:	4628      	mov	r0, r5
 800824e:	f7ff fd99 	bl	8007d84 <_fflush_r>
 8008252:	2800      	cmp	r0, #0
 8008254:	d1ed      	bne.n	8008232 <__swbuf_r+0x2a>
 8008256:	68a3      	ldr	r3, [r4, #8]
 8008258:	3b01      	subs	r3, #1
 800825a:	60a3      	str	r3, [r4, #8]
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	1c5a      	adds	r2, r3, #1
 8008260:	6022      	str	r2, [r4, #0]
 8008262:	701e      	strb	r6, [r3, #0]
 8008264:	6962      	ldr	r2, [r4, #20]
 8008266:	1c43      	adds	r3, r0, #1
 8008268:	429a      	cmp	r2, r3
 800826a:	d004      	beq.n	8008276 <__swbuf_r+0x6e>
 800826c:	89a3      	ldrh	r3, [r4, #12]
 800826e:	07db      	lsls	r3, r3, #31
 8008270:	d5e1      	bpl.n	8008236 <__swbuf_r+0x2e>
 8008272:	2e0a      	cmp	r6, #10
 8008274:	d1df      	bne.n	8008236 <__swbuf_r+0x2e>
 8008276:	4621      	mov	r1, r4
 8008278:	4628      	mov	r0, r5
 800827a:	f7ff fd83 	bl	8007d84 <_fflush_r>
 800827e:	2800      	cmp	r0, #0
 8008280:	d0d9      	beq.n	8008236 <__swbuf_r+0x2e>
 8008282:	e7d6      	b.n	8008232 <__swbuf_r+0x2a>

08008284 <__swsetup_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	4b29      	ldr	r3, [pc, #164]	@ (800832c <__swsetup_r+0xa8>)
 8008288:	4605      	mov	r5, r0
 800828a:	6818      	ldr	r0, [r3, #0]
 800828c:	460c      	mov	r4, r1
 800828e:	b118      	cbz	r0, 8008298 <__swsetup_r+0x14>
 8008290:	6a03      	ldr	r3, [r0, #32]
 8008292:	b90b      	cbnz	r3, 8008298 <__swsetup_r+0x14>
 8008294:	f7fd ff68 	bl	8006168 <__sinit>
 8008298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800829c:	0719      	lsls	r1, r3, #28
 800829e:	d422      	bmi.n	80082e6 <__swsetup_r+0x62>
 80082a0:	06da      	lsls	r2, r3, #27
 80082a2:	d407      	bmi.n	80082b4 <__swsetup_r+0x30>
 80082a4:	2209      	movs	r2, #9
 80082a6:	602a      	str	r2, [r5, #0]
 80082a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082ac:	81a3      	strh	r3, [r4, #12]
 80082ae:	f04f 30ff 	mov.w	r0, #4294967295
 80082b2:	e033      	b.n	800831c <__swsetup_r+0x98>
 80082b4:	0758      	lsls	r0, r3, #29
 80082b6:	d512      	bpl.n	80082de <__swsetup_r+0x5a>
 80082b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082ba:	b141      	cbz	r1, 80082ce <__swsetup_r+0x4a>
 80082bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082c0:	4299      	cmp	r1, r3
 80082c2:	d002      	beq.n	80082ca <__swsetup_r+0x46>
 80082c4:	4628      	mov	r0, r5
 80082c6:	f7fe ff07 	bl	80070d8 <_free_r>
 80082ca:	2300      	movs	r3, #0
 80082cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80082ce:	89a3      	ldrh	r3, [r4, #12]
 80082d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80082d4:	81a3      	strh	r3, [r4, #12]
 80082d6:	2300      	movs	r3, #0
 80082d8:	6063      	str	r3, [r4, #4]
 80082da:	6923      	ldr	r3, [r4, #16]
 80082dc:	6023      	str	r3, [r4, #0]
 80082de:	89a3      	ldrh	r3, [r4, #12]
 80082e0:	f043 0308 	orr.w	r3, r3, #8
 80082e4:	81a3      	strh	r3, [r4, #12]
 80082e6:	6923      	ldr	r3, [r4, #16]
 80082e8:	b94b      	cbnz	r3, 80082fe <__swsetup_r+0x7a>
 80082ea:	89a3      	ldrh	r3, [r4, #12]
 80082ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80082f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082f4:	d003      	beq.n	80082fe <__swsetup_r+0x7a>
 80082f6:	4621      	mov	r1, r4
 80082f8:	4628      	mov	r0, r5
 80082fa:	f000 f883 	bl	8008404 <__smakebuf_r>
 80082fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008302:	f013 0201 	ands.w	r2, r3, #1
 8008306:	d00a      	beq.n	800831e <__swsetup_r+0x9a>
 8008308:	2200      	movs	r2, #0
 800830a:	60a2      	str	r2, [r4, #8]
 800830c:	6962      	ldr	r2, [r4, #20]
 800830e:	4252      	negs	r2, r2
 8008310:	61a2      	str	r2, [r4, #24]
 8008312:	6922      	ldr	r2, [r4, #16]
 8008314:	b942      	cbnz	r2, 8008328 <__swsetup_r+0xa4>
 8008316:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800831a:	d1c5      	bne.n	80082a8 <__swsetup_r+0x24>
 800831c:	bd38      	pop	{r3, r4, r5, pc}
 800831e:	0799      	lsls	r1, r3, #30
 8008320:	bf58      	it	pl
 8008322:	6962      	ldrpl	r2, [r4, #20]
 8008324:	60a2      	str	r2, [r4, #8]
 8008326:	e7f4      	b.n	8008312 <__swsetup_r+0x8e>
 8008328:	2000      	movs	r0, #0
 800832a:	e7f7      	b.n	800831c <__swsetup_r+0x98>
 800832c:	2000001c 	.word	0x2000001c

08008330 <_raise_r>:
 8008330:	291f      	cmp	r1, #31
 8008332:	b538      	push	{r3, r4, r5, lr}
 8008334:	4605      	mov	r5, r0
 8008336:	460c      	mov	r4, r1
 8008338:	d904      	bls.n	8008344 <_raise_r+0x14>
 800833a:	2316      	movs	r3, #22
 800833c:	6003      	str	r3, [r0, #0]
 800833e:	f04f 30ff 	mov.w	r0, #4294967295
 8008342:	bd38      	pop	{r3, r4, r5, pc}
 8008344:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008346:	b112      	cbz	r2, 800834e <_raise_r+0x1e>
 8008348:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800834c:	b94b      	cbnz	r3, 8008362 <_raise_r+0x32>
 800834e:	4628      	mov	r0, r5
 8008350:	f000 f830 	bl	80083b4 <_getpid_r>
 8008354:	4622      	mov	r2, r4
 8008356:	4601      	mov	r1, r0
 8008358:	4628      	mov	r0, r5
 800835a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800835e:	f000 b817 	b.w	8008390 <_kill_r>
 8008362:	2b01      	cmp	r3, #1
 8008364:	d00a      	beq.n	800837c <_raise_r+0x4c>
 8008366:	1c59      	adds	r1, r3, #1
 8008368:	d103      	bne.n	8008372 <_raise_r+0x42>
 800836a:	2316      	movs	r3, #22
 800836c:	6003      	str	r3, [r0, #0]
 800836e:	2001      	movs	r0, #1
 8008370:	e7e7      	b.n	8008342 <_raise_r+0x12>
 8008372:	2100      	movs	r1, #0
 8008374:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008378:	4620      	mov	r0, r4
 800837a:	4798      	blx	r3
 800837c:	2000      	movs	r0, #0
 800837e:	e7e0      	b.n	8008342 <_raise_r+0x12>

08008380 <raise>:
 8008380:	4b02      	ldr	r3, [pc, #8]	@ (800838c <raise+0xc>)
 8008382:	4601      	mov	r1, r0
 8008384:	6818      	ldr	r0, [r3, #0]
 8008386:	f7ff bfd3 	b.w	8008330 <_raise_r>
 800838a:	bf00      	nop
 800838c:	2000001c 	.word	0x2000001c

08008390 <_kill_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	4d07      	ldr	r5, [pc, #28]	@ (80083b0 <_kill_r+0x20>)
 8008394:	2300      	movs	r3, #0
 8008396:	4604      	mov	r4, r0
 8008398:	4608      	mov	r0, r1
 800839a:	4611      	mov	r1, r2
 800839c:	602b      	str	r3, [r5, #0]
 800839e:	f7f9 fdb0 	bl	8001f02 <_kill>
 80083a2:	1c43      	adds	r3, r0, #1
 80083a4:	d102      	bne.n	80083ac <_kill_r+0x1c>
 80083a6:	682b      	ldr	r3, [r5, #0]
 80083a8:	b103      	cbz	r3, 80083ac <_kill_r+0x1c>
 80083aa:	6023      	str	r3, [r4, #0]
 80083ac:	bd38      	pop	{r3, r4, r5, pc}
 80083ae:	bf00      	nop
 80083b0:	20000618 	.word	0x20000618

080083b4 <_getpid_r>:
 80083b4:	f7f9 bd9d 	b.w	8001ef2 <_getpid>

080083b8 <__swhatbuf_r>:
 80083b8:	b570      	push	{r4, r5, r6, lr}
 80083ba:	460c      	mov	r4, r1
 80083bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c0:	2900      	cmp	r1, #0
 80083c2:	b096      	sub	sp, #88	@ 0x58
 80083c4:	4615      	mov	r5, r2
 80083c6:	461e      	mov	r6, r3
 80083c8:	da0d      	bge.n	80083e6 <__swhatbuf_r+0x2e>
 80083ca:	89a3      	ldrh	r3, [r4, #12]
 80083cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80083d0:	f04f 0100 	mov.w	r1, #0
 80083d4:	bf14      	ite	ne
 80083d6:	2340      	movne	r3, #64	@ 0x40
 80083d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80083dc:	2000      	movs	r0, #0
 80083de:	6031      	str	r1, [r6, #0]
 80083e0:	602b      	str	r3, [r5, #0]
 80083e2:	b016      	add	sp, #88	@ 0x58
 80083e4:	bd70      	pop	{r4, r5, r6, pc}
 80083e6:	466a      	mov	r2, sp
 80083e8:	f000 f848 	bl	800847c <_fstat_r>
 80083ec:	2800      	cmp	r0, #0
 80083ee:	dbec      	blt.n	80083ca <__swhatbuf_r+0x12>
 80083f0:	9901      	ldr	r1, [sp, #4]
 80083f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80083f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80083fa:	4259      	negs	r1, r3
 80083fc:	4159      	adcs	r1, r3
 80083fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008402:	e7eb      	b.n	80083dc <__swhatbuf_r+0x24>

08008404 <__smakebuf_r>:
 8008404:	898b      	ldrh	r3, [r1, #12]
 8008406:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008408:	079d      	lsls	r5, r3, #30
 800840a:	4606      	mov	r6, r0
 800840c:	460c      	mov	r4, r1
 800840e:	d507      	bpl.n	8008420 <__smakebuf_r+0x1c>
 8008410:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	6123      	str	r3, [r4, #16]
 8008418:	2301      	movs	r3, #1
 800841a:	6163      	str	r3, [r4, #20]
 800841c:	b003      	add	sp, #12
 800841e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008420:	ab01      	add	r3, sp, #4
 8008422:	466a      	mov	r2, sp
 8008424:	f7ff ffc8 	bl	80083b8 <__swhatbuf_r>
 8008428:	9f00      	ldr	r7, [sp, #0]
 800842a:	4605      	mov	r5, r0
 800842c:	4639      	mov	r1, r7
 800842e:	4630      	mov	r0, r6
 8008430:	f7fe fec6 	bl	80071c0 <_malloc_r>
 8008434:	b948      	cbnz	r0, 800844a <__smakebuf_r+0x46>
 8008436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800843a:	059a      	lsls	r2, r3, #22
 800843c:	d4ee      	bmi.n	800841c <__smakebuf_r+0x18>
 800843e:	f023 0303 	bic.w	r3, r3, #3
 8008442:	f043 0302 	orr.w	r3, r3, #2
 8008446:	81a3      	strh	r3, [r4, #12]
 8008448:	e7e2      	b.n	8008410 <__smakebuf_r+0xc>
 800844a:	89a3      	ldrh	r3, [r4, #12]
 800844c:	6020      	str	r0, [r4, #0]
 800844e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008452:	81a3      	strh	r3, [r4, #12]
 8008454:	9b01      	ldr	r3, [sp, #4]
 8008456:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800845a:	b15b      	cbz	r3, 8008474 <__smakebuf_r+0x70>
 800845c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008460:	4630      	mov	r0, r6
 8008462:	f000 f81d 	bl	80084a0 <_isatty_r>
 8008466:	b128      	cbz	r0, 8008474 <__smakebuf_r+0x70>
 8008468:	89a3      	ldrh	r3, [r4, #12]
 800846a:	f023 0303 	bic.w	r3, r3, #3
 800846e:	f043 0301 	orr.w	r3, r3, #1
 8008472:	81a3      	strh	r3, [r4, #12]
 8008474:	89a3      	ldrh	r3, [r4, #12]
 8008476:	431d      	orrs	r5, r3
 8008478:	81a5      	strh	r5, [r4, #12]
 800847a:	e7cf      	b.n	800841c <__smakebuf_r+0x18>

0800847c <_fstat_r>:
 800847c:	b538      	push	{r3, r4, r5, lr}
 800847e:	4d07      	ldr	r5, [pc, #28]	@ (800849c <_fstat_r+0x20>)
 8008480:	2300      	movs	r3, #0
 8008482:	4604      	mov	r4, r0
 8008484:	4608      	mov	r0, r1
 8008486:	4611      	mov	r1, r2
 8008488:	602b      	str	r3, [r5, #0]
 800848a:	f7f9 fd9a 	bl	8001fc2 <_fstat>
 800848e:	1c43      	adds	r3, r0, #1
 8008490:	d102      	bne.n	8008498 <_fstat_r+0x1c>
 8008492:	682b      	ldr	r3, [r5, #0]
 8008494:	b103      	cbz	r3, 8008498 <_fstat_r+0x1c>
 8008496:	6023      	str	r3, [r4, #0]
 8008498:	bd38      	pop	{r3, r4, r5, pc}
 800849a:	bf00      	nop
 800849c:	20000618 	.word	0x20000618

080084a0 <_isatty_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4d06      	ldr	r5, [pc, #24]	@ (80084bc <_isatty_r+0x1c>)
 80084a4:	2300      	movs	r3, #0
 80084a6:	4604      	mov	r4, r0
 80084a8:	4608      	mov	r0, r1
 80084aa:	602b      	str	r3, [r5, #0]
 80084ac:	f7f9 fd99 	bl	8001fe2 <_isatty>
 80084b0:	1c43      	adds	r3, r0, #1
 80084b2:	d102      	bne.n	80084ba <_isatty_r+0x1a>
 80084b4:	682b      	ldr	r3, [r5, #0]
 80084b6:	b103      	cbz	r3, 80084ba <_isatty_r+0x1a>
 80084b8:	6023      	str	r3, [r4, #0]
 80084ba:	bd38      	pop	{r3, r4, r5, pc}
 80084bc:	20000618 	.word	0x20000618

080084c0 <_init>:
 80084c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c2:	bf00      	nop
 80084c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084c6:	bc08      	pop	{r3}
 80084c8:	469e      	mov	lr, r3
 80084ca:	4770      	bx	lr

080084cc <_fini>:
 80084cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ce:	bf00      	nop
 80084d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d2:	bc08      	pop	{r3}
 80084d4:	469e      	mov	lr, r3
 80084d6:	4770      	bx	lr
